<!--
~ Copyright 2005-2008 WSO2, Inc. (http://wso2.com)
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
        "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <link href="css/mashup-docs.css" rel="stylesheet" type="text/css" media="all"/>
        <link type="text/css" rel="stylesheet" href="css/SyntaxHighlighter.css" media="all"/>
        <script language="javascript" src="js/shCore.js"></script>
        <script language="javascript" src="js/shBrushJScript.js"></script>
        <script language="javascript" src="js/shBrushJava.js"></script>
        <script language="javascript" src="js/shBrushSql.js"></script>
        <script language="javascript" src="js/shBrushXml.js"></script>
    </head>

    <body>
        <div id="main-content">
            <h1>File Host Object</h1>

            <h2>1.0 Introduction</h2>

            <p>The File Host Object is a Mozilla Rhino Host Object designed for use
                in the WSO2 Mashup server environment for providing file
                storage/manipulation functionality.
            </p>

            <h3>1.1 Example</h3>

            <p>This example writes a file named hello.txt, moves it to a new directory, then reads and deletes
                the file.
            </p>

            <pre name="code" class="js">
                var text = "Hello World!";
                var file = new File("hello.txt");
                if (!file.exists)
                    file.createFile();
                file.openForWriting();
                file.write(text);
                file.close();
                var moved = file.move("backup/goodbye.txt");

                if (moved){
                    var file2 = new File("backup/goodbye.txt");
                    file2.openForReading();
                    print(file2.readAll());
                    file2.close();
                    if (!file2.deleteFile())
                        print('Unable to delete file.');
                }
            </pre>

            <h2>2.0 File Object</h2>

            <p>The File object provides basic read/write access to files in the {servicename}.resources
                directory.
            </p>

            <h3>2.1 File Interface</h3>

            <pre name="code" class="xml">
                {
                    Constructor File(String filename);
                    function void openForReading();
                    function void openForWriting();
                    function void openForAppending();
                    function void write(Object Object);
                    function void writeLine(Object object);
                    function String read(int numberOfCharacters);
                    function String readLine();
                    function String readAll();
                    function void close();
                    function String toString();
                    function boolean createFile();
                    function boolean move(String fileName);
                    function boolean deleteFile();
                    readonly property long length;
                    readonly property String lastModified;
                    readonly property String path;
                    readonly property String name;
                    readonly property boolean exists;
                }
            </pre>

            <h3>2.2 API Documentation</h3>

            <table class="MsoTableGrid" style="margin-left: 0.5in; border-collapse: collapse;" border="1"
                   cellpadding="5" cellspacing="0">
                <tbody>
                    <tr>
                        <td>Member</td>
                        <td>Description</td>
                        <td>Supported in version</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Constructor File(String filename);</b>
                            <br/>
                        </td>
                        <td>The file name should be relative to the service.resources directory of the
                            mashup service.
                            <br/>
                            Throws an error if the given path represents a directory.
                            <br/>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>void openForReading();</b>
                        </td>
                        <td>Opens the file for reading. Throws an error
                            if the file is already open for either appending or reading, if the
                            file does not exist, or if the file cannot be opened for any other file
                            system specific reason.
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>void openForWriting();</b>
                        </td>
                        <td>Opens the file for writing. The first call to write() or
                            writeLine() on a file which has been opened for writing will overwrite
                            the content of the file.
                            <br/>
                            If the file does not exist, openForWriting() will create the file.
                            <br/>
                            Throws an error if the file is already open for either appending or
                            reading, or if the file cannot be opened for any other file system
                            specific reason.
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>void openForAppending();</b>
                        </td>
                        <td>Opens the file for appending. Using write()
                            or writeLine() on a file which is open for appending will write the
                            content to the end of the file rather than the beginning.
                            <br/>
                            If the file does not exist, this will create the file.
                            <br/>
                            Throws an error if the file is already open for either writing or
                            reading, if the file cannot be opened for any other file system
                            specific reason.
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>void write(Object Object);</b>
                        </td>
                        <td>Writes the String representation of the
                            object to the file. Users can open the file for writing from the
                            start of the file or
                            for appending to the end of the file.
                            <br/>
                            If the file is not already open for writing or appending,
                            then calling this will automatically open the file for writing
                            (overwriting the current content of the file if it exists).
                            <br/>
                            Throws an error if the file is already open for reading.
                            <br/>
                            <em>var file = new File("readme.txt");</em>
                            <br/>
                            <em>file.openForWriting();</em>
                            <br/>
                            <em>//file.openForAppending();</em>
                            <br/>
                            <em>file.write("Hello World!");</em>
                            <br/>
                            <em>file.close();</em>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>void writeLine(Object object);</b>
                        </td>
                        <td>Writes the String representation of the
                            object to the file together with a line separator at the end. Users are
                            required to open the file for writing or for appending before writing
                            to the file.
                            <br/>
                            If the file is not open for either reading or writing or appending,
                            then calling this will automatically open the file for writing
                            (overwriting the current content of the file).
                            <br/>
                            <em>var file = new File("readme.txt");</em>
                            <br/>
                            <em>file.openForWriting();</em>
                            <br/>
                            <em>//file.openForAppending();</em>
                            <br/>
                            <em>file.writeLine("Hello World!");</em>
                            <br/>
                            <em>file.close();</em>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>String read(int numberOfCharacters);</b>
                        </td>
                        <td>Reads the given number of characters from the
                            file and returns a string representation of those characters. Users are
                            required to open the file for reading before reading from the file.
                            <br/>
                            If the file is not open for either reading or writing or appending,
                            then calling this will automatically open the file for reading.
                            <br/>
                            <em>var file = new File("readme.txt");</em>
                            <br/>
                            <em>file.openForReading();</em>
                            <br/>
                            <em>var text = file.read(5);</em>
                            <br/>
                            <em>print(text);</em>
                            <br/>
                            <em>file.close();</em>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>String readLine();</b>
                        </td>
                        <td>Reads a line from the file and return a
                            string representation of the line. Users are required to open the file
                            for reading before reading from the file.
                            <br/>
                            If the file is not open for either reading or writing or appending,
                            then calling this will automatically open the file for reading.
                            <br/>
                            <em>var file = new File("readme.txt");</em>
                            <br/>
                            <em>file.openForReading();</em>
                            <br/>
                            <em>var text = file.readLine();</em>
                            <br/>
                            <em>print(text);</em>
                            <br/>
                            <em>file.close();</em>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>String readAll();</b>
                        </td>
                        <td>Reads all the content in the file and returns
                            a string representation of the content. Users are required to open the
                            file for reading before reading from the file.
                            <br/>
                            If the file is not open for either reading or writing or appending,
                            then calling this will automatically open the file for reading.
                            <br/>
                            <em>var file = new File("readme.txt");</em>
                            <br/>
                            <em>file.openForReading();</em>
                            <br/>
                            <em>var text = file.readAll();</em>
                            <br/>
                            <em>print(text);</em>
                            <br/>
                            <em>file.close();</em>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>void close();</b>
                        </td>
                        <td>Users are expected to close the file after reading, writing and appending to the file.
                            <br/>
                            <em>var file = new File("readme.txt");</em>
                            <br/>
                            <em>file.openForReading();</em>
                            <br/>
                            <em>var x = file.readLine();</em>
                            <br/>
                            <em>file.close();</em>
                            <br/>
                            <em>file.openForAppending();</em>
                            <br/>
                            <em>file.write("Hello world!");</em>
                            <br/>
                            <em>file.close();</em>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>String toString();</b>
                        </td>
                        <td>Behaviour equal to the readAll();
                            <br/>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>boolean createFile();</b>
                        </td>
                        <td>Creates the file if it does not exist. Also creates the parent directories if they are not
                            present.
                            <br/>
                            <em>var file = new File("readme.txt");</em>
                            <br/>
                            <em>file.createFile();</em>
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>boolean move(string targetFileName);</b>
                        </td>
                        <td>Move the file to the given target file. Returns True if the file was successfully moved.
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>boolean deleteFile();</b>
                        </td>
                        <td>Deletes this file from the file system. Returns True if the file was successfully deleted.
                        </td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>readonly property long length;</b>
                        </td>
                        <td>Length of the file in bytes</td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>readonly property String lastModified;</b>
                        </td>
                        <td>Last modified time of this file.</td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>readonly property String path;</b>
                        </td>
                        <td>Path name of the file.</td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>readonly property String name;</b>
                        </td>
                        <td>Name of the file without the path.</td>
                        <td>0.1</td>
                    </tr>
                    <tr>
                        <td>
                            <b>readonly property boolean exists;</b>
                        </td>
                        <td>Checks whether this file actually exists. Returns True if the file exists.</td>
                        <td>0.1</td>
                    </tr>
                </tbody>
            </table>

            <h2>3.0 References</h2>

            <ul>
                <li>
                    <a href="apidocs/org/wso2/mashup/hostobjects/file/JavaScriptFileObject.html">JavaDoc for the
                        file host Object
                    </a>
                </li>
            </ul>
        </div>
        <script language="javascript">
            dp.SyntaxHighlighter.BloggerMode();
            dp.SyntaxHighlighter.HighlightAll('code');
        </script>
    </body>
</html>
