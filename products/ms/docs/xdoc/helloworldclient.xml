<!--
~ Copyright 2005-2008 WSO2, Inc. (http://wso2.com)
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
        "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <link href="css/mashup-docs.css" rel="stylesheet" type="text/css" media="all"/>
        <link type="text/css" rel="stylesheet" href="css/SyntaxHighlighter.css" media="all"/>
        <script language="javascript" src="js/shCore.js"></script>
        <script language="javascript" src="js/shBrushJScript.js"></script>
        <script language="javascript" src="js/shBrushJava.js"></script>
        <script language="javascript" src="js/shBrushSql.js"></script>
        <script language="javascript" src="js/shBrushXml.js"></script>
    </head>

    <body>

        <div id="main-content">

            <h1>Writing a Hello World Client</h1>

            <p>The Mashup Server supports the quick and easy creation of web services
                clients written in HTML and Javascript. You can use the
                <a href="generatedresources.html#stub">Javascript stubs (?stub)</a>
                generated by
                the Mashup Server to invoke the mashup services from your web page. Mashup Server also has the concept
                of bundling a
                custom UI along with the
                service. Follow these simple steps to write &amp; expose a simple client for
                the
                <a href="helloworldservice.html">helloworld service</a>
                :
            </p>

            <p><strong>Note:</strong>The Mashup Server should be running the helloworld service for this to work.
            </p>

            <h2>Step 1:</h2>

            <p>In Notepad or your favorite html editor, type the following text:</p>


            <pre name="code" class="html">
            &lt;html&gt;
            &lt;head&gt;
            &lt;META http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
            &lt;title/&gt;Hello World Client&lt;title/&gt;
            &lt;script type="text/javascript" src="js/wso2/WSRequest.js"&gt;&lt;/script&gt;
            &lt;script type="text/javascript" src="../helloWorld?stub"&gt;&lt;/script&gt;
            &lt;/head&gt;                    
            &lt;script type="text/javascript"&gt;
            &lt;!-- Invoke the operation 'hello()' from helloWorld service --&gt;
                                function load() {
				var hello = services["admin/helloWorld"].operations["hello"];
				var payload = null;
		
				&lt;!-- Get response from the operation 'hello()' from helloWorld service using callback method --&gt;
				hello.callback = function(payload) {
				
				&lt;!-- Serialize response XML to String value --&gt;
				var responseXML = WSRequest.util._serializeToString(payload);
				
				&lt;!-- Print the response string value in the browser. --&gt;
				document.write(responseXML);
				};
				&lt;!-- Invoke handleError method if an error occurs. --&gt;
				hello.onError = handleError;
				hello(payload); 
				}
 				function handleError(error) {
        			log (document.getElementById('console'), "Fault: " + error.reason + "\n\n" + error.detail);
    				};                
                               
                            &lt;/script&gt;
			&lt;body onload="load()"&gt;                       
                    &lt;/body&gt;
                &lt;/html&gt;
            </pre>

            <h2>Step 2:</h2>

            <p>Save the above as "index.html" in the directory
                "repository/scripts/Helloworld.resources/www" within the Mashup Server directory. Now
                you'll be able to see the newly created page when browse to the service
                endpoint (eg: http://{ip-of-mashup-installation}:9763/services/helloworld). Thats it, its so simple.
            </p>

            <p>Or, not simple enough for you? You can also get a template for a service, similar to the one above but
                customized to the service, by entering this url for your service. i.e.
                http://{ip-of-mashup-installation}:9763/services/helloworld?template&amp;flavor=html
                and saving response as "index.html". This template
                invokes the first operation in the service asynchronously, and illustrates how to invoke all the other
                services as well.
            </p>

            <p>Do you need even simpler method? Then you can go the mashup editor page and the tabs at the top will
                shift you among
                your service, custom UI and Google gadget. Why are you waiting! Start adding parameter values and build
                a unique and dynamic Mashup interface!
            </p>

        </div>
        <script language="javascript">
            dp.SyntaxHighlighter.BloggerMode();
            dp.SyntaxHighlighter.HighlightAll('code');
        </script>
    </body>
</html>
