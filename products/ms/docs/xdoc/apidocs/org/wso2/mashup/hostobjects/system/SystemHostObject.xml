<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
<!--
 ~ Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ WSO2 Inc. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--NewPage-->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 7 December 2008), see www.w3.org" />
<!-- Generated by javadoc (build 1.5.0_14) on Fri Feb 20 03:37:43 PST 2009 -->
<title>SystemHostObject (WSO2 Mashup Server Host Objects
API)</title>
<meta name="keywords" content=
"org.wso2.mashup.hostobjects.system.SystemHostObject class" />
<link rel="stylesheet" type="text/css" href=
"../../../../../JavadocStyles.css" title="Style" />
<script type="text/javascript">
//<![CDATA[
function windowTitle()
{
    parent.document.title="SystemHostObject (WSO2 Mashup Server Host Objects API)";
}
//]]>
</script>
</head>
<body>
<hr />
<!-- ======== START OF CLASS DATA ======== -->
<h2><font size="-1">org.wso2.mashup.hostobjects.system</font><br />
Class SystemHostObject</h2>
<pre>
java.lang.Object
  <img src="../../../../../resources/inherit.gif" alt=
"extended by " />org.mozilla.javascript.ScriptableObject
      <img src="../../../../../resources/inherit.gif" alt=
"extended by " /><b>org.wso2.mashup.hostobjects.system.SystemHostObject</b>
</pre>
<dl>
<dt><b>All Implemented Interfaces:</b></dt>
<dd>java.io.Serializable, org.mozilla.javascript.ConstProperties,
org.mozilla.javascript.debug.DebuggableObject,
org.mozilla.javascript.Scriptable</dd>
</dl>
<hr />
<dl>
<dd>
<pre>
public class <b>SystemHostObject</b>
</pre>
<dt>extends org.mozilla.javascript.ScriptableObject</dt>
</dd>
</dl>
This is a JavaScript Rhino host object aimed to provide a set of
system specific utility functions to the javascript service
developers.
<dl>
<dt><b>See Also:</b></dt>
<dd><a href=
"../../../../../serialized-form.html#org.wso2.mashup.hostobjects.system.SystemHostObject">
Serialized Form</a></dd>
</dl>
<hr />
<p><!-- =========== FIELD SUMMARY =========== -->
 <a name="field_summary" id="field_summary"><!-- --></a></p>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="2"><font size="+2"><b>Field
Summary</b></font></th>
</tr>
</table>
&#160;<a name=
"fields_inherited_from_class_org.mozilla.javascript.ScriptableObject"
id=
"fields_inherited_from_class_org.mozilla.javascript.ScriptableObject"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#EEEEFF" class="TableSubHeadingColor">
<th align="left"><b>Fields inherited from class
org.mozilla.javascript.ScriptableObject</b></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code>CONST, DONTENUM, EMPTY, PERMANENT, READONLY,
UNINITIALIZED_CONST</code></td>
</tr>
</table>
&#160;<a name=
"fields_inherited_from_class_org.mozilla.javascript.Scriptable" id=
"fields_inherited_from_class_org.mozilla.javascript.Scriptable">
<!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#EEEEFF" class="TableSubHeadingColor">
<th align="left"><b>Fields inherited from interface
org.mozilla.javascript.Scriptable</b></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code>NOT_FOUND</code></td>
</tr>
</table>
&#160; <!-- ======== CONSTRUCTOR SUMMARY ======== -->
 <a name="constructor_summary" id="constructor_summary">
<!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="2"><font size="+2"><b>Constructor
Summary</b></font></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#SystemHostObject()">
SystemHostObject</a></b>()</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</td>
</tr>
</table>
&#160; <!-- ========== METHOD SUMMARY =========== -->
 <a name="method_summary" id="method_summary"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="2"><font size="+2"><b>Method
Summary</b></font></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>&#160;java.lang.String</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#getClassName()">
getClassName</a></b>()</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Type to
be used for this object inside the javascript.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>&#160;void</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsConstructor()">
jsConstructor</a></b>()</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;void</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_clearInterval(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_clearInterval</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Removes
a JavaScript function scheduled for periodic execution using the
job id system.clearInterval(id);</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;void</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_clearTimeout(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_clearTimeout</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Sometimes
it's useful to be able to cancel a timer before it goes off.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;java.lang.Object</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_getXML(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_getXML</a></b>(org.mozilla.javascript.Context&#160;context,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
Utility function to get an XML file over the network var history =
system.getXML('http://wso2.org/repos/wso2/trunk/mashup/java/modules/samples/upgradeChecker/upgradeChecker.resources/history.xml');
You can also do basic authentication by giving a username/password
var history =
system.getXML('http://wso2.org/repos/wso2/trunk/mashup/java/modules/samples/upgradeChecker/upgradeChecker.resources/history.xml',
'username', 'password');</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;void</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_include(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_include</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Imports
the external scripts given as the arguments, to the java script run
time.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;void</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_log(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_log</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Allows
printing to the system log from a Mashup.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;void</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_notifyMonitor(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_notifyMonitor</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Sends
notification to a monitoring software via JMX.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;java.lang.String</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_setInterval(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_setInterval</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;This
method allows the scheduling of a JavaScript function
periodically.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;java.lang.String</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_setTimeout(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_setTimeout</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;setTimeout()
allows you to specify that a piece of JavaScript code (called an
expression) will be run a specified number of milliseconds from
when the setTimeout() method was called.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>static&#160;void</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsFunction_wait(org.mozilla.javascript.Context,%20org.mozilla.javascript.Scriptable,%20java.lang.Object[],%20org.mozilla.javascript.Function)">
jsFunction_wait</a></b>(org.mozilla.javascript.Context&#160;cx,
org.mozilla.javascript.Scriptable&#160;thisObj,
java.lang.Object[]&#160;arguments,
org.mozilla.javascript.Function&#160;funObj)</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Waits
the execution of the script for the given time in miliseconds or
waits for 10 miliseconds when the time is not given.</td>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td align="right" valign="top" width="1%"><font size=
"-1"><code>&#160;java.lang.String</code></font></td>
<td><code><b><a href=
"../../../../../org/wso2/mashup/hostobjects/system/SystemHostObject.html#jsGet_localHostName()">
jsGet_localHostName</a></b>()</code><br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Get the
string defining the hostname of the system.</td>
</tr>
</table>
&#160;<a name=
"methods_inherited_from_class_org.mozilla.javascript.ScriptableObject"
id=
"methods_inherited_from_class_org.mozilla.javascript.ScriptableObject"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#EEEEFF" class="TableSubHeadingColor">
<th align="left"><b>Methods inherited from class
org.mozilla.javascript.ScriptableObject</b></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code>associateValue, callMethod, callMethod, defineClass,
defineClass, defineClass, defineConst, defineConstProperty,
defineFunctionProperties, defineProperty, defineProperty,
defineProperty, defineProperty, delete, delete, deleteProperty,
deleteProperty, get, get, getAllIds, getAssociatedValue,
getAttributes, getAttributes, getAttributes, getAttributes,
getClassPrototype, getDefaultValue, getDefaultValue,
getFunctionPrototype, getGetterOrSetter, getIds,
getObjectPrototype, getParentScope, getProperty, getProperty,
getPropertyIds, getPrototype, getTopLevelScope, getTopScopeValue,
has, has, hasInstance, hasProperty, hasProperty, isConst, isSealed,
put, put, putConst, putConstProperty, putProperty, putProperty,
redefineProperty, sealObject, setAttributes, setAttributes,
setAttributes, setAttributes, setGetterOrSetter, setParentScope,
setPrototype</code></td>
</tr>
</table>
&#160;<a name="methods_inherited_from_class_java.lang.Object" id=
"methods_inherited_from_class_java.lang.Object"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#EEEEFF" class="TableSubHeadingColor">
<th align="left"><b>Methods inherited from class
java.lang.Object</b></th>
</tr>
<tr bgcolor="white" class="TableRowColor">
<td><code>equals, getClass, hashCode, notify, notifyAll, toString,
wait, wait, wait</code></td>
</tr>
</table>
&#160;
<p><!-- ========= CONSTRUCTOR DETAIL ======== -->
 <a name="constructor_detail" id="constructor_detail">
<!-- --></a></p>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="1"><font size="+2"><b>Constructor
Detail</b></font></th>
</tr>
</table>
<a name="SystemHostObject()"><!-- --></a>
<h3>SystemHostObject</h3>
<pre>
public <b>SystemHostObject</b>()
</pre>
<!-- ============ METHOD DETAIL ========== -->
<a name="method_detail" id="method_detail"><!-- --></a>
<table border="1" width="100%" cellpadding="3" cellspacing="0"
summary="">
<tr bgcolor="#CCCCFF" class="TableHeadingColor">
<th align="left" colspan="1"><font size="+2"><b>Method
Detail</b></font></th>
</tr>
</table>
<a name="jsConstructor()"><!-- --></a>
<h3>jsConstructor</h3>
<pre>
public void <b>jsConstructor</b>()
</pre>
<hr />
<a name="getClassName()"><!-- --></a>
<h3>getClassName</h3>
<pre>
public java.lang.String <b>getClassName</b>()
</pre>
<dl>
<dd>Type to be used for this object inside the javascript.</dd>
<dd>
<dl>
<dt><b>Specified by:</b></dt>
<dd><code>getClassName</code> in interface
<code>org.mozilla.javascript.Scriptable</code></dd>
<dt><b>Specified by:</b></dt>
<dd><code>getClassName</code> in class
<code>org.mozilla.javascript.ScriptableObject</code></dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_wait(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_wait</h3>
<pre>
public static void <b>jsFunction_wait</b>(org.mozilla.javascript.Context cx,
                                   org.mozilla.javascript.Scriptable thisObj,
                                   java.lang.Object[] arguments,
                                   org.mozilla.javascript.Function funObj)
                            throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>Waits the execution of the script for the given time in
miliseconds or waits for 10 miliseconds when the time is not given.
<pre>
 system.wait();
 system.wait(1000);
 
</pre></dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name="jsGet_localHostName()"><!-- --></a>
<h3>jsGet_localHostName</h3>
<pre>
public java.lang.String <b>jsGet_localHostName</b>()
                                     throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>Get the string defining the hostname of the system.
<pre>
 var hostname = system.localHostName;
 
</pre></dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_include(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_include</h3>
<pre>
public static void <b>jsFunction_include</b>(org.mozilla.javascript.Context cx,
                                      org.mozilla.javascript.Scriptable thisObj,
                                      java.lang.Object[] arguments,
                                      org.mozilla.javascript.Function funObj)
                               throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>Imports the external scripts given as the arguments, to the
java script run time. Paths of the scripts to be imported can be
given using a comma separated list as arguments. Imported script
files needs to be placed in the {service_file_name}.resources
directory of the mashup service. If the path represents a file it
should be given relative to the {service_file_name}.resources
directory. If a file is not found at this location, the path is
treated as an URL. The URL can be given relative to the services
context root (eg: http://127.0.0.1:7762/services) or it can also be
an absolute URL.
<pre>
 system.include("include.js");
 system.include("version?stub&amp;lang=e4x", "lib2.js");
 system.include("http://tempuri.org/js/temp.js");
 
</pre></dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_setInterval(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_setInterval</h3>
<pre>
public static java.lang.String <b>jsFunction_setInterval</b>(org.mozilla.javascript.Context cx,
                                                      org.mozilla.javascript.Scriptable thisObj,
                                                      java.lang.Object[] arguments,
                                                      org.mozilla.javascript.Function funObj)
                                               throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>This method allows the scheduling of a JavaScript function
periodically. There are 2 mandatory parameters. A javascript
function (or a javascript expression) and the time interval between
two consecutive executions. Optionally one can specify a start
time, indicating when to begin the function execution (after given
number of milliseconds in the frequency parameter by default). It
is also possible to give a start time and an end time. The method
returns a String UUID, which can be used to refer to this function
scheduling instance. Imagine you have a javascript function in your
service as follows
<pre>
 function myJavaScriptFunction(function-parameter)
 {
      print("The parameter value is " + function-parameter);
 }
 
</pre>
example 1:
<pre>
    //Setting up 'myJavaScriptFunction' to be executed in 2000 millisecond intervals, starting now and continuing forever.
    var id = system.setInterval(myJavaScriptFunction, 2000, 'I am a parameter value');
 
</pre>
example 2:
<pre>
    //Setting up 'myJavaScriptFunction' to be executed in 2000 millisecond intervals, starting now and continuing forever.
    //But passing the function as a javascript expression.
    var id = system.setInterval('myJavaScriptFunction("I am a parameter value");', 2000);
 
</pre>
example 3:
<pre>
    //Setting to start in 2 minutes from now
    var startTime = new Date();
    startTime.setMinutes(startTime.getMinutes() + 2);
 
    var id = system.setInterval(myJavaScriptFunction, 2000, 'I am a parameter value', startTime);
    or
    var id = system.setInterval('myJavaScriptFunction("I am a parameter value");', 2000, null, startTime);
 
</pre>
example 4:
<pre>
    //Setting to start in 2 minutes from now
    var startTime = new Date();
    startTime.setMinutes(startTime.getMinutes() + 2);
 
    //Setting to end in 4 minutes after starting
    var endtime = new Date();
    endtime.setMinutes(startTime.getMinutes() + 4);
 
    var id = system.setInterval(myJavaScriptFunction, 2000, 'I am a parameter value', startTime, endtime);
    or
    var id = system.setInterval('myJavaScriptFunction("I am a parameter value");', 2000, null, startTime, endtime);
 
</pre></dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_clearInterval(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_clearInterval</h3>
<pre>
public static void <b>jsFunction_clearInterval</b>(org.mozilla.javascript.Context cx,
                                            org.mozilla.javascript.Scriptable thisObj,
                                            java.lang.Object[] arguments,
                                            org.mozilla.javascript.Function funObj)
                                     throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>Removes a JavaScript function scheduled for periodic execution
using the job id
<pre>
   system.clearInterval(id);
 
</pre></dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_notifyMonitor(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_notifyMonitor</h3>
<pre>
public static void <b>jsFunction_notifyMonitor</b>(org.mozilla.javascript.Context cx,
                                            org.mozilla.javascript.Scriptable thisObj,
                                            java.lang.Object[] arguments,
                                            org.mozilla.javascript.Function funObj)
                                     throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>
<p>Sends notification to a monitoring software via JMX. A single
parameter is assumed to be the message, while if another string is
provided it is the title. A third parameter , if integer, is
assumed to be the message severity (info = 0, error = 1, warning =
2 and none = 3).</p>
<pre>
 system.notifyMonitor("Message");
 system.notifyMonitor("Title", "Message");
 system.notifyMonitor("Title", "Message", 3);
 
</pre></dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_getXML(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_getXML</h3>
<pre>
public static java.lang.Object <b>jsFunction_getXML</b>(org.mozilla.javascript.Context context,
                                                 org.mozilla.javascript.Scriptable thisObj,
                                                 java.lang.Object[] arguments,
                                                 org.mozilla.javascript.Function funObj)
                                          throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>
<p>Utility function to get an XML file over the network</p>
<pre>
 var history = system.getXML('http://wso2.org/repos/wso2/trunk/mashup/java/modules/samples/upgradeChecker/upgradeChecker.resources/history.xml');

 You can also do basic authentication by giving a username/password

 var history = system.getXML('http://wso2.org/repos/wso2/trunk/mashup/java/modules/samples/upgradeChecker/upgradeChecker.resources/history.xml', 'username', 'password');
 
</pre></dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_setTimeout(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_setTimeout</h3>
<pre>
public static java.lang.String <b>jsFunction_setTimeout</b>(org.mozilla.javascript.Context cx,
                                                     org.mozilla.javascript.Scriptable thisObj,
                                                     java.lang.Object[] arguments,
                                                     org.mozilla.javascript.Function funObj)
                                              throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>setTimeout() allows you to specify that a piece of JavaScript
code (called an expression) will be run a specified number of
milliseconds from when the setTimeout() method was called.
<pre>
    ex: setTimeout (expression, timeout);
 
</pre>
where expression is the JavaScript code to run after timeout
milliseconds have elapsed. setTimeout() also returns a numeric
timeout ID that can be used to track the timeout. This is most
commonly used with the clearTimeout() method</dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_clearTimeout(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_clearTimeout</h3>
<pre>
public static void <b>jsFunction_clearTimeout</b>(org.mozilla.javascript.Context cx,
                                           org.mozilla.javascript.Scriptable thisObj,
                                           java.lang.Object[] arguments,
                                           org.mozilla.javascript.Function funObj)
                                    throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>Sometimes it's useful to be able to cancel a timer before it
goes off. The clearTimeout() method lets us do exactly that.
<pre>
    ex: clearTimeout ( timeoutId );
 
</pre>
where timeoutId is the ID of the timeout as returned from the
setTimeout() method call.</dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<hr />
<a name=
"jsFunction_log(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], org.mozilla.javascript.Function)"><!-- --></a>
<h3>jsFunction_log</h3>
<pre>
public static void <b>jsFunction_log</b>(org.mozilla.javascript.Context cx,
                                  org.mozilla.javascript.Scriptable thisObj,
                                  java.lang.Object[] arguments,
                                  org.mozilla.javascript.Function funObj)
                           throws org.wso2.mashup.MashupFault
</pre>
<dl>
<dd>Allows printing to the system log from a Mashup.
<pre>
    ex: system.log(logmessage, loglevel);
 
</pre>
Where logmessage contains a string to be written to the system log
and (optional) loglevel indicates the logging level as 'info',
'warn', 'debug', 'error' or 'fatal'. The logging level defaults to
'info' when one is not provided.</dd>
<dd>
<dl>
<dt><b>Throws:</b></dt>
<dd><code>org.wso2.mashup.MashupFault</code> - Thrown in case any
exceptions occur</dd>
</dl>
</dd>
</dl>
<!-- ========= END OF CLASS DATA ========= -->
<hr />
<hr />
</body>
</html>
