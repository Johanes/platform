<?xml version="1.0" encoding="iso-8859-1"?>
<!--
~ Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~ WSO2 Inc. licenses this file to you under the Apache License,
~ Version 2.0 (the "License"); you may not use this file except
~ in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing,
~ software distributed under the License is distributed on an
~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~ KIND, either express or implied. See the License for the
~ specific language governing permissions and limitations
~ under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <title>WSO2 MB Samples - SQS SOAP Client Sample</title>
        <link href="../css/mb-docs.css" rel="stylesheet"/>
        <link href="../styles/dist-docs.css" rel="stylesheet" type="text/css"
              media="all"/>
    </head>

    <body>
        <p>[<a href="../docs_index.html">Documentation Index</a>]
            <h1>WSO2 MB - Samples : SQS SOAP Client Sample</h1>

            <p>This guide demonstrates how to use SQS in Message Broker with SOAP Client.
            </p>

            <h2>Contents</h2>

            <div class="toc">
                <ul>
                    <li>
                        <a href="#sqs_soap_client">SQS SOAP Client Sample</a>
                    </li>
                    <li>
                        <a href="#References">References</a>
                    </li>
                </ul>
            </div>

            <h2 id="sqs_soap_client">SQS SOAP Client Sample</h2>

            <p>
                We will create a queue and perform operations such as send,receive,delete messages
                and finally delete the queue. This way you can try out all the operations in SQS web
                service.
            </p>

            <p>You can generate code with wsdl2java tool for Amazon Simple Queue Service (API
                Version 2009-02-01) wsdl and try out following sample.
                Latest SQS WSDL can be found at [1].
            </p>

            <p>To start with SQS, you need to have two keys namely Access Key ID (for
                example: 44b59c52fc336f1d57d4) and Secret Access Key (for example:
                6f1d57d425a077b579f4440e95cc8d8b384375d8). These keys can be obtained once you log
                into Message Broker admin console and under Manage menu > MessageBoxes/SQS > Access
                keys.
            </p>

            <P>You can create a java project using wsdl2java tool generated pom.xml.
                SQSClient.java can be used to create queue, send, receive and delete messages as
                done in main method.
            </P>
            <pre xml:space="preserve">
                package org.wso2.mb.sqs.sample;

                import org.apache.axiom.om.OMAbstractFactory;
                import org.apache.axiom.om.OMElement;
                import org.apache.axiom.om.OMFactory;
                import org.apache.axiom.om.OMNamespace;
                import org.apache.xml.security.utils.Base64;

                import javax.crypto.Mac;
                import javax.crypto.spec.SecretKeySpec;
                import java.math.BigInteger;
                import java.rmi.RemoteException;
                import java.security.SignatureException;
                import java.util.ArrayList;
                import java.util.Date;
                import java.util.List;
                import java.util.UUID;

                /**
                 * Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 * http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 */
                public class SQSClient {
                    public static final String QUEUE_NAME = "MyQueue";
                    public static final String DEFAULT_VISIBILITY_TIMEOUT = "60";
                    public static final String MAX_NUMBER_OF_MESSAGES = "10";
                    private String accessKey = "40bab66dd39a783bbbc3";
                    private String secretAccessKey = "783bbbc3e26ee59202564560b6892796032ff5df";

                    public static void main(String[] args) throws RemoteException {
                        SQSClient sqsClient = new SQSClient();
                        sqsClient.sendMessages();
                        sqsClient.receiveMessages();
                        sqsClient.deleteMessages();
                        sqsClient.deleteQueue();
                    }

                    /**
                     * Create a queue, send a message
                     *
                     * @throws RemoteException
                     */
                    public void sendMessages() throws RemoteException {
                        QueueServiceStub queueServiceStub = new QueueServiceStub("http://localhost:9763/services/QueueService");
                        QueueServiceStub.CreateQueue createQueue = new QueueServiceStub.CreateQueue();
                        createQueue.setQueueName(QUEUE_NAME);
                        createQueue.setDefaultVisibilityTimeout(new BigInteger(DEFAULT_VISIBILITY_TIMEOUT));
                        // add security soap header for action CreateQueue
                        addSoapHeader(queueServiceStub, "CreateQueue");
                        QueueServiceStub.CreateQueueResponse createQueueResponse = queueServiceStub.createQueue(createQueue);
                        System.out.println("createQueueResponse.getCreateQueueResult().getQueueUrl() = " + createQueueResponse.getCreateQueueResult().getQueueUrl());

                        MessageQueueStub messageQueueStub = new MessageQueueStub(createQueueResponse.getCreateQueueResult().getQueueUrl().toString());
                        MessageQueueStub.SendMessage sendMessage = new MessageQueueStub.SendMessage();
                        sendMessage.setMessageBody(UUID.randomUUID().toString());
                        addSoapHeader(messageQueueStub, "SendMessage");
                        messageQueueStub.sendMessage(sendMessage);
                    }

                    /**
                     * Receive messages from queue
                     *
                     * @throws RemoteException
                     */
                    public void receiveMessages() throws RemoteException {
                        QueueServiceStub queueServiceStub = new QueueServiceStub("http://localhost:9763/services/QueueService");
                        QueueServiceStub.CreateQueue createQueue = new QueueServiceStub.CreateQueue();
                        createQueue.setQueueName(QUEUE_NAME);
                        createQueue.setDefaultVisibilityTimeout(new BigInteger(DEFAULT_VISIBILITY_TIMEOUT));
                        addSoapHeader(queueServiceStub, "CreateQueue");
                        QueueServiceStub.CreateQueueResponse createQueueResponse = queueServiceStub.createQueue(createQueue);
                        System.out.println("createQueueResponse.getCreateQueueResult().getQueueUrl() = " + createQueueResponse.getCreateQueueResult().getQueueUrl());

                        MessageQueueStub messageQueueStub = new MessageQueueStub(createQueueResponse.getCreateQueueResult().getQueueUrl().toString());
                        MessageQueueStub.ReceiveMessage receiveMessage = new MessageQueueStub.ReceiveMessage();
                        receiveMessage.setMaxNumberOfMessages(new BigInteger(MAX_NUMBER_OF_MESSAGES));
                        receiveMessage.setVisibilityTimeout(new BigInteger("20"));
                        addSoapHeader(messageQueueStub, "ReceiveMessage");
                        MessageQueueStub.ReceiveMessageResponse receiveMessageResponse = messageQueueStub.receiveMessage(receiveMessage);
                        MessageQueueStub.Message_type0[] message_type0s = receiveMessageResponse.getReceiveMessageResult().getMessage();
                        if (message_type0s != null) {
                            for (MessageQueueStub.Message_type0 message_type0 : message_type0s) {
                                System.out.println("message_type0.getBody() = " + message_type0.getBody());

                            }
                        }
                    }

                    /**
                     * Delete messages from queue
                     *
                     * @throws RemoteException
                     */
                    public void deleteMessages() throws RemoteException {
                        QueueServiceStub queueServiceStub = new QueueServiceStub("http://localhost:9763/services/QueueService");
                        QueueServiceStub.CreateQueue createQueue = new QueueServiceStub.CreateQueue();
                        createQueue.setQueueName(QUEUE_NAME);
                        createQueue.setDefaultVisibilityTimeout(new BigInteger(DEFAULT_VISIBILITY_TIMEOUT));
                        addSoapHeader(queueServiceStub, "CreateQueue");
                        QueueServiceStub.CreateQueueResponse createQueueResponse = queueServiceStub.createQueue(createQueue);
                        System.out.println("createQueueResponse.getCreateQueueResult().getQueueUrl() = " + createQueueResponse.getCreateQueueResult().getQueueUrl());

                        MessageQueueStub messageQueueStub = new MessageQueueStub(createQueueResponse.getCreateQueueResult().getQueueUrl().toString());
                        MessageQueueStub.ReceiveMessage receiveMessage = new MessageQueueStub.ReceiveMessage();
                        receiveMessage.setMaxNumberOfMessages(new BigInteger(MAX_NUMBER_OF_MESSAGES));
                        receiveMessage.setVisibilityTimeout(new BigInteger("20000"));
                        addSoapHeader(messageQueueStub, "ReceiveMessage");
                        MessageQueueStub.ReceiveMessageResponse receiveMessageResponse = messageQueueStub.receiveMessage(receiveMessage);
                        MessageQueueStub.Message_type0[] message_type0s = receiveMessageResponse.getReceiveMessageResult().getMessage();
                        List&lt;String> receiptHandlers = new ArrayList&lt;String>();
                        if (message_type0s != null) {
                            for (MessageQueueStub.Message_type0 message_type0 : message_type0s) {
                                receiptHandlers.add(message_type0.getReceiptHandle());
                            }
                        }
                        MessageQueueStub.DeleteMessage deleteMessage = new MessageQueueStub.DeleteMessage();
                        deleteMessage.setReceiptHandle(receiptHandlers.toArray(new String[receiptHandlers.size()]));
                        addSoapHeader(messageQueueStub, "DeleteMessage");
                        messageQueueStub.deleteMessage(deleteMessage);
                    }

                    /**
                     * Delete queue
                     *
                     * @throws RemoteException
                     */
                    public void deleteQueue() throws RemoteException {
                        QueueServiceStub queueServiceStub = new QueueServiceStub("http://localhost:9763/services/QueueService");
                        QueueServiceStub.CreateQueue createQueue = new QueueServiceStub.CreateQueue();
                        createQueue.setQueueName(QUEUE_NAME);
                        createQueue.setDefaultVisibilityTimeout(new BigInteger(DEFAULT_VISIBILITY_TIMEOUT));
                        addSoapHeader(queueServiceStub, "CreateQueue");
                        QueueServiceStub.CreateQueueResponse createQueueResponse = queueServiceStub.createQueue(createQueue);
                        System.out.println("createQueueResponse.getCreateQueueResult().getQueueUrl() = " + createQueueResponse.getCreateQueueResult().getQueueUrl());

                        MessageQueueStub messageQueueStub = new MessageQueueStub(createQueueResponse.getCreateQueueResult().getQueueUrl().toString());
                        MessageQueueStub.DeleteQueue deleteQueue = new MessageQueueStub.DeleteQueue();
                        addSoapHeader(messageQueueStub, "DeleteQueue");
                        messageQueueStub.deleteQueue(deleteQueue);
                    }

                    /**
                     * Add security headers for queue service stub
                     *
                     * @param queueServiceStub - queue service stub created with given end point
                     * @param action           - the action to be performed as CreateQueue, ListQueue
                     */
                    private void addSoapHeader(QueueServiceStub queueServiceStub, String action) {

                        OMFactory factory = OMAbstractFactory.getOMFactory();
                        OMNamespace awsNs = factory.createOMNamespace("http://security.amazonaws.com/doc/2007-01-01/", "aws");
                        OMElement accessKeyId = factory.createOMElement("AWSAccessKeyId", awsNs);
                        accessKeyId.setText(accessKey);
                        OMElement timestamp = factory.createOMElement("Timestamp", awsNs);
                        timestamp.setText(new Date().toString());
                        OMElement signature = factory.createOMElement("Signature", awsNs);

                        try {
                            signature.setText(calculateRFC2104HMAC(action + timestamp.getText(), secretAccessKey));
                        } catch (SignatureException e) {
                        }

                        queueServiceStub._getServiceClient().removeHeaders();

                        queueServiceStub._getServiceClient().addHeader(accessKeyId);
                        queueServiceStub._getServiceClient().addHeader(timestamp);
                        queueServiceStub._getServiceClient().addHeader(signature);


                    }

                    /**
                     * Add security headers for message queue service stub
                     *
                     * @param messageQueueStub - message queue service stub created with queue url
                     * @param action           - the action to be performed as SendMessage,DeleteMessage
                     */
                    private void addSoapHeader(MessageQueueStub messageQueueStub, String action) {
                        OMFactory factory = OMAbstractFactory.getSOAP11Factory();
                        OMNamespace awsNs = factory.createOMNamespace("http://security.amazonaws.com/doc/2007-01-01/", "aws");
                        OMElement header = factory.createOMElement("Header", awsNs);
                        OMElement accessKeyId = factory.createOMElement("AWSAccessKeyId", awsNs);
                        accessKeyId.setText(accessKey);
                        OMElement timestamp = factory.createOMElement("Timestamp", awsNs);
                        timestamp.setText(new Date().toString());
                        OMElement signature = factory.createOMElement("Signature", awsNs);

                        try {
                            signature.setText(calculateRFC2104HMAC(action + timestamp.getText(), secretAccessKey));
                        } catch (SignatureException e) {
                        }

                        messageQueueStub._getServiceClient().removeHeaders();

                        messageQueueStub._getServiceClient().addHeader(accessKeyId);
                        messageQueueStub._getServiceClient().addHeader(timestamp);
                        messageQueueStub._getServiceClient().addHeader(signature);
                    }

                    /**
                     * Calculate signature for given data using secret access key
                     *
                     * @param data - data to be signed, action+timestamp
                     * @param key- secret access key
                     * @return signature
                     * @throws java.security.SignatureException
                     *
                     */
                    public static String calculateRFC2104HMAC(String data, String key)
                            throws java.security.SignatureException {
                        final String HMAC_SHA1_ALGORITHM = "HmacSHA1";
                        String result;
                        try {
                            // get an hmac_sha1 key from the raw key bytes
                            SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);
                            // get an hmac_sha1 Mac instance and initialize with the signing key
                            Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
                            mac.init(signingKey);
                            // compute the hmac on input data bytes
                            byte[] rawHmac = mac.doFinal(data.getBytes());
                            // base64-encode the hmac
                            result = Base64.encode(rawHmac);
                        } catch (Exception e) {
                            throw new SignatureException("Failed to generate HMAC : " + e.getMessage());
                        }
                        return result;
                    }


                }


            </pre>
            <h2 id="References">References</h2>
            <ul>
                <li>
                    <a href="   http://queue.amazonaws.com/doc/2009-02-01/QueueService.wsdl">[1].SQS WSDL</a>
                </li>
                <li>
                    <a href="http://aws.amazon.com/articles/3586">[2].More Details on AWS SDK</a>
                </li>
            </ul>
        </p>
    </body>
</html>