<?xml version="1.0" encoding="iso-8859-1"?>
<!--
~ Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~ WSO2 Inc. licenses this file to you under the Apache License,
~ Version 2.0 (the "License"); you may not use this file except
~ in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing,
~ software distributed under the License is distributed on an
~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~ KIND, either express or implied. See the License for the
~ specific language governing permissions and limitations
~ under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <title>WSO2 MB Samples - JMS Queue Sample</title>
        <link href="../css/mb-docs.css" rel="stylesheet"/>
        <link href="../styles/dist-docs.css" rel="stylesheet" type="text/css"
              media="all"/>
    </head>

    <body>
        <p>[<a href="../docs_index.html">Documentation Index</a>]
            <h1>WSO2 MB - Samples :JMS Queue Sample</h1>

            <p>This guide demonstrates how persistent queues can be created and used in Message
                Broker using JMS API.
            </p>

            <h2>Contents</h2>

            <div class="toc">
                <ul>
                    <li>
                        <a href="#jms_queue_sample">JMS Queue Sample</a>
                    </li>
                </ul>
            </div>

            <h2 id="jms_queue_sample">JMS Queue Sample</h2>

            <p>Following code is used to create a durable queue and send messages. Queue Receiver
                can receive messages and message is printed in console.
            </p>

            <p>
                note: To run this code sample, you need to have dependencies located at
                $CARBON_HOME/client-lib in class path.
            </p>
            <pre xml:space="preserve">
                package com.org.wso2.mb.jms.sample;
                /**
                 * Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 * http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 */

                import javax.jms.JMSException;
                import javax.jms.Queue;
                import javax.jms.QueueConnection;
                import javax.jms.QueueConnectionFactory;
                import javax.jms.QueueReceiver;
                import javax.jms.QueueSession;
                import javax.jms.TextMessage;
                import javax.naming.Context;
                import javax.naming.InitialContext;
                import javax.naming.NamingException;
                import java.util.Properties;
                public class QueueSender {
                    public static final String QPID_ICF = "org.apache.qpid.jndi.PropertiesFileInitialContextFactory";
                    private static final String CF_NAME_PREFIX = "connectionfactory.";
                    private static final String CF_NAME = "qpidConnectionfactory";
                    String userName = "admin";
                    String password = "admin";

                    private static String CARBON_CLIENT_ID = "carbon";
                    private static String CARBON_VIRTUAL_HOST_NAME = "carbon";
                    private static String CARBON_DEFAULT_HOSTNAME = "localhost";
                    private static String CARBON_DEFAULT_PORT = "5672";
                    String queueName = "testQueue";


                    public static void main(String[] args) throws NamingException, JMSException {
                        QueueSender queueSender = new QueueSender();
                        queueSender.sendMessages();
                    }

                    public void sendMessages() throws NamingException, JMSException {
                        Properties properties = new Properties();
                        properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);
                        properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));

                        System.out.println("getTCPConnectionURL(userName,password) = " + getTCPConnectionURL(userName, password));

                        InitialContext ctx = new InitialContext(properties);
                        // Lookup connection factory
                        QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);
                        QueueConnection queueConnection = connFactory.createQueueConnection();
                        queueConnection.start();
                        QueueSession queueSession =
                                queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);

                        // Send message
                        Queue queue = queueSession.createQueue(queueName + ";{create:always, node:{durable: True}}");

                        // create the message to send
                        TextMessage textMessage = queueSession.createTextMessage("Test Message Content");

                        javax.jms.QueueSender queueSender = queueSession.createSender(queue);
                        queueSender.send(textMessage);

                        QueueReceiver queueReceiver = queueSession.createReceiver(queue);
                        TextMessage message = (TextMessage) queueReceiver.receiveNoWait();
                        System.out.println("message.getText() = " + message.getText());

                        queueSender.close();
                        queueSession.close();
                        queueConnection.close();

                    }

                    public String getTCPConnectionURL(String username, String password) {
                        // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'
                        return new StringBuffer()
                                .append("amqp://").append(username).append(":").append(password)
                                .append("@").append(CARBON_CLIENT_ID)
                                .append("/").append(CARBON_VIRTUAL_HOST_NAME)
                                .append("?brokerlist='tcp://").append(CARBON_DEFAULT_HOSTNAME).append(":").append(CARBON_DEFAULT_PORT).append("'")
                                .toString();
                    }


                }

            </pre>
             <p>
                 You can view created queue and its content using Message Broker management console.
             </p>

        </p>
    </body>
</html>