<?xml version="1.0" encoding="iso-8859-1"?>
<!--
~ Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~ WSO2 Inc. licenses this file to you under the Apache License,
~ Version 2.0 (the "License"); you may not use this file except
~ in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing,
~ software distributed under the License is distributed on an
~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~ KIND, either express or implied. See the License for the
~ specific language governing permissions and limitations
~ under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
        <title>WSO2 MB - User Guide</title>
        <link href="css/mb-docs.css" rel="stylesheet"/>
        <link href="styles/dist-docs.css" rel="stylesheet" type="text/css"
              media="all"/>
    </head>

    <body>
        <p>[<a href="docs_index.html">Documentation Index</a>]
        </p>
        <h1>WSO2 Message Broker(MB) User Guide</h1>

        <p>The goal of this guide is to provide guidelines to be followed
            in order to get familiar with WSO2 Message Broker and the procedure
            of using the features provided by the product.
        </p>

        <h2>Contents</h2>

        <div class="toc">
            <ul>
                <li>
                    <a href="#Introduction">Introduction to Message Broker</a>
                </li>
                <!--li><a href="#Sample">Stock Quote Sample</a> </li-->
                <li>
                    <a href="#References">References</a>
                </li>
            </ul>
        </div>

        <h2 id="Introduction">Introduction to Message Broker</h2>
        <p>This gives a brief introduction of how message broker can be used
            in publishing and receiving messages.
        </p>

        <p>
            WSO2 Message Broker is basically consist of two major features.They are:
        </p>
        <ul>
            <li>Pub/ Sub Feature</li>
            <li>Message Broker Clustering feature</li>
        </ul>

        <h3>
            Pub/Sub Feature
        </h3>

        <p>This feature of the WSO2 Message Broker provides the facility for users to route messages
            to the required users. If we are explaining deeply,
            there is a concept called 'Topic' and message routing is done on the base of that
            topic. When a particular user want to publish
            a message to a particular sector , he creates a topic with a name related to the
            messages that he is going to pulish. As an example, if a particular
            user want to publish messages related with sports news, he can create a topic with the
            name 'SportsNews' and publish the messages to that topic.
        </p>

        <p>
            When another particular user is interested on any topic in the topic tree, he can
            subscribe to that topic and receive messages which are published
            to that topic by the publisher. As in the above example, when a particular user is
            interested on sports, he can subscribed to the topic 'SportsNews'
            and get messages published to that topic.
        </p>

        <p>
            <img src="images/MessageFlowDiagram.jpg"
                 alt="Pub/Sub Message Flow"/>
        </p>
        <h3>How to use Pub/Sub Feature</h3>

        <p>In WSO2 Message Broker , Pub/Sub feature is one of the two major features. Inorder to use
            this feature , it is needed to create a Topic and subscribe to it.
        </p>
        <ul>
            <li>Step 01</li>

            <p>Login to the server</p>

            <li>Step 02</li>

            <p>Click on the 'Add' menu item under the 'Topics' menu to create a topic. To create a
                topic , the only thing needed to be provided is the name of the topic.
            </p>

            <p>
                <img src="images/topic_add.png"
                     alt="Add Topic"/>
            </p>

            <li>Step 03</li>

            <p>When you add a topic using the 'add' button , you will be directed to the 'Topic
                Browser' page and you will see the topic tree.
            </p>
            <p>
                <img src="images/topic_browser.png"
                     alt="Topic Browser"/>
            </p>

            <p>Once you click on a topic in the topic tree , it will display all the available
                operations on a topic.
                Once you click on the 'Help' link on that page you will find the information on all
                the operations available on the topic
            </p>

            <p>If you click on details link , you will find following page.</p>

            <p>
                <img src="images/topic_details.png"
                     alt="Topic Details"/>
            </p>

            <li>Step 04</li>

            <p>Once you click on the topic , you will get the following page.</p>
            <p>
                <img src="images/topic_browser_clicked.png"
                     alt="Topic Details"/>
            </p>


            <p>Once you click on 'Subscribe' link on the above page, you will be directed to Add
                subscriptions page.
            </p>

            <p>
                <img src="images/topic_addSubscription.png"
                     alt="Subscribe to topics"/>
            </p>

            <p>You can create a subscription to the topic by provide the information on subscription
            </p>
            <li>Topic</li>
            <p>User does not need to specify the topic here , since its automatically sets up.</p>

            <li>Subscription Mode</li>

            <p>This is the mode of the subscription and there are three modes.</p>

            <p>The default mode for the subscription is "Topic Only". With this mode , user creates
                the
                subscription only to the topic. In this mode subscribers only receive events which
                are published only to the that topic.
            </p>

            <p>Next mode of subscription is "Topic and Immediate child". In this mode subscribers of
                the topic
                receives events published not only the specified topic but also to the immediate
                child of that topic.
            </p>

            <p>Last mode of subscription is "Topic and Children". In this mode subscribers of the
                specified
                topic will receive events published to the specified topic and all its children
            </p>

            <li>Event Sink URL</li>
            <p>This is the URL which the subscriber should provide to receive events published. When
                events are
                published to the topic, they are sent to the specified URL here.
            </p>

            <li>Expiration Time</li>
            <p>Here user can specify the expiration time of the subscription. This is not a required
                parameter and
                if user leave it alone, subscription will never be expired.
            </p>

            <p>Note : You can create a simple axis2service and use it's URL as the EventSinkURL .
                Inorder to create an axis2service ,
            </p>
            <ul>
                <li>Browse the location : /wso2mb-1.0.0-SNAPSHOT/samples/services/EventSinkService
                </li>
                <li>Type the command : ant</li>

                <P>(This ant task will create a simple axis2service 'EventSinkService' and deploy it
                    in the location :
                    /wso2mb-1.0.0-SNAPSHOT/repository/deployment/server/axis2services/ )
                </P>
            </ul>

            <p>Now you can create a subscription by providing the Event Sink URL :
                https://localhost:9443/services/EventSinkService/getOMElement
            </p>

            <p>Click on the button 'Subscribe' and it will create the subscription and list it in
                the subscription table of that topic in topic details page.
            </p>


            <p>
                <img src="images/topic_subscriptionDetails.png"
                     alt="Topic subscription details"/>
            </p>


            <li>Step 05</li>

            <p>At the end of the subscribing process , you can test whether the topic and the
                subscriptions created are working fine.
                In order to do that what you have to do is type a XML message in the provided text
                box and under the 'Publish' section
                of Topic Details page and click on 'Publish button'
            </p>

            <p>Then check the command line and you will be able to see the XML Message that you
                types in the provided space.
            </p>

            <h3>How to enable clustering support</h3>
            <p>
                New MB version (2.0) supports clustering. Clustering makes WSO2 MB run on several machines providing
                high message delivery rate and high availability. In order to enable clustering in the binary distribution
                or extracted WSO2 MB built from the source, open repository/conf/advanced/qpid-config.xml file and enable
                clustering as follows:</p>

            <p>
                <br>&lt;  clustering   &gt;</br>
                <br>&nbsp;&nbsp;&lt;  enabled   &gt;  true  &lt;/enabled &gt;</br>
            </p>
            <p>
                You also need a Apache Zookeeper server and a Apache Cassandra server running in a separate central
                machines (or at a simple deployment it can be one of the machines running broker nodes as well) in
                order to configure the clustering.
            </p>
            <ul>
                <li>To configure Zookeeper:

                    <ol>
                        <li>
                            <a href="http://www.apache.org/dyn/closer.cgi/zookeeper/">Download</a> Apache Zookeeper 3.X.X
                        </li>
                        <li>
                            Extract the zip folder to a directory of choice.
                        </li>
                        <li>
                            Create a zoo.config file as instructed in Zookeeper installation  guide <a href="http://zookeeper.apache.org/doc/r3.3.5/zookeeperStarted.html">here</a>.
                        </li>
                        <li>
                            Navigate to bin folder and start Zookeeper server by issuing the command ?zkServer.sh start?
                        </li>
                        <li>
                            Default port for Zookeeper will be ?2181?. You can change that using ?clientPort? in zoo.config file.
                        </li>
                    </ol>
                    <p>
                        At each client MB instance, configure Zookeeper host and port by editing repository/conf/advanced/qpid-config.xml file.
                    </p>
                    <img src="images/zookeeperConfig.png"
                         alt="editing Zookeeper configurations"/>
                    <p>
                        In a actual deployment Zookeeper host will be a separate central machine to which all clients running
                        MB would connect. Thus Zookeeper host should be the IP of that central machine.
                    </p>
                </li>

                <li>To configure Cassandra:
                    <ol>
                        <li>
                            Download Apache Cassandra <a href="http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.0.9/apache-cassandra-1.0.9-bin.tar.gz ">apache-cassandra-1.0.9 </a>
                            or <a href="http://www.apache.org/dyn/closer.cgi?path=/cassandra/0.8.10/apache-cassandra-0.8.10-bin.tar.gz">apache-cassandra-0.8.10</a> release from <a
                                href="http://cassandra.apache.org/download/">here</a>
                        </li>
                        <li>
                            As instructed in Apache Cassandra installation guide configure and start Cassandra server. Default port would be 9160.
                        </li>
                        <li>
                            At each MB instance you want to have in the distributed cluster, configure Cassandra by editing &lt;MB Home &lt;/repository/conf/advanced/qpid-virtualhosts.xml file.
                        </li>
                    </ol>
                    <img src="images/storeConfig.png"
                         alt="editing store configurations"/>
                    <p>
                        Note that &lt;username&gt; and &lt;password&gt; are credentials for connecting Cassandra, &lt;host&gt;
                        is the IP address of Cassandra server you have started and &lt;cluster&gt;  should be same for all the
                        MB nodes in the same cluster.
                    </p>
                    <p>
                        Now message sender and receivers can send messages to that cluster and consume messages from that cluster
                        as if it was a single message broker running in a machine. Following is a sample client for queue scenario.
                    </p>
                </li>

                <li>   Sample Scenario:
                    <ul>
                        <li>
                            In your local machine setup two WSO2 MB instances running with Cassandra server and Zookeeper server as described above
                            (note that you can setup Cassandra and Zookeeper to run on the same machine). In order to do that in the second WSO2 MB
                            define a port offset changing &lt;MB Home&gt;/repository/conf/carbon.xml (eg: set port offset to 1).
                        </li>
                        <li>
                            We will call first broker instance MB1 (runs on port 5672) and the other MB2 (runs on port 5673).
                        </li>
                        <li>
                            Using following JMS client make subscriptions to a queue "myQueue" at MB1.
                            <pre xml:space="preserve">

                            import org.apache.qpid.configuration.ClientProperties;
                            import javax.jms.*;
                            import javax.naming.InitialContext;
                            import javax.naming.NamingException;
                            import java.util.Properties;

                            public class ConsumeClient {


                                public void consumeMessage() {

                                    System.setProperty(ClientProperties.AMQP_VERSION, "0-91");
                                    Properties initialContextProperties = new Properties();
                                    initialContextProperties.put("java.naming.factory.initial",
                                            "org.apache.qpid.jndi.PropertiesFileInitialContextFactory");
                                    String connectionString = "amqp://admin:admin@clientID/cassandra?brokerlist='tcp://localhost:5673'";
                                    initialContextProperties.put("connectionfactory.qpidConnectionfactory", connectionString);
                                    initialContextProperties.put("queue.myQueue", "myQueue");

                                    try {
                                        InitialContext initialContext = new InitialContext(initialContextProperties);
                                        QueueConnectionFactory queueConnectionFactory
                                                  = (QueueConnectionFactory) initialContext.lookup("qpidConnectionfactory");
                                        QueueConnection queueConnection = queueConnectionFactory.createQueueConnection();
                                        queueConnection.start();

                                        QueueSession queueSession = queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
                                          Destination destination = (Destination) initialContext.lookup("myQueue");

                                        MessageConsumer messageConsumer = queueSession.createConsumer(destination);

                                        TextMessage textMessage = (TextMessage) messageConsumer.receive();
                                        System.out.println("Got message ==> " + textMessage.getText());

                                        try {
                                            Thread.sleep(90000*1000);
                                        } catch (Exception e) {
                                            System.out.println(e);
                                        }

                                        messageConsumer.close();

                                        queueSession.close();
                                        queueConnection.stop();
                                        queueConnection.close();

                                    } catch (NamingException e) {
                                        e.printStackTrace();
                                    } catch (JMSException e) {
                                        e.printStackTrace();
                                    }


                                }

                                public static void main(String[] args) {
                                        ConsumeClient sendConsumeClient = new ConsumeClient();
                                        sendConsumeClient.consumeMessage();
                                }
                            }
                            </pre>

                        </li>
                        <li>
                            Now using Message Sender described below, send a message to "myQueue" at MB2.

                            <pre xml:space="preserve">

                                import org.apache.qpid.configuration.ClientProperties;
                                import javax.jms.*;
                                import javax.naming.InitialContext;
                                import javax.naming.NamingException;
                                import java.io.*;
                                import java.util.Properties;

                                public class SendClient {


                                    public static void main(String[] args) {
                                        SendClient sendClient = new SendClient();
                                        sendClient.sendMessage();
                                    }

                                     public void sendMessage() {

                                        System.setProperty(ClientProperties.AMQP_VERSION, "0-91");
                                          Properties initialContextProperties = new Properties();
                                        initialContextProperties.put("java.naming.factory.initial",
                                                "org.apache.qpid.jndi.PropertiesFileInitialContextFactory");
                                        String connectionString = "amqp://admin:admin@clientID/cassandra?brokerlist='tcp://localhost:5673'";
                                        initialContextProperties.put("connectionfactory.qpidConnectionfactory", connectionString);
                                        initialContextProperties.put("queue.myQueue", "myQueue");


                                        try {
                                            InitialContext initialContext = new InitialContext(initialContextProperties);
                                            QueueConnectionFactory queueConnectionFactory
                                                    = (QueueConnectionFactory) initialContext.lookup("qpidConnectionfactory");

                                            QueueConnection queueConnection = queueConnectionFactory.createQueueConnection();
                                            queueConnection.start();

                                            QueueSession queueSession = queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);

                                            TextMessage textMessage = queueSession.createTextMessage();
                                            textMessage.setText("Test message");
                                            System.out.println("Sending Message : " + textMessage.getText().length());

                                            // Send message
                                            Queue queue = (Queue) initialContext.lookup("myQueue");

                                           // Queue queue = queueSession.createQueue("testQueue;{create:always, node:{durable: true}}");
                                            QueueSender queueSender = queueSession.createSender(queue);
                                            queueSender.send(textMessage);

                                            // Housekeeping
                                            queueSender.close();
                                            queueSession.close();
                                            queueConnection.stop();
                                            queueConnection.close();

                                        } catch (NamingException e) {
                                            e.printStackTrace();
                                        } catch (JMSException e) {
                                            e.printStackTrace();
                                        }

                                     }
                                }
                            </pre>
                        </li>
                        <li>
                            Now you can run the consumer to receive messages from MB1. You will notice that the message you have
                            sent to MB2 can be received by MB1. Even if MB2 instance was destroyed message will be consumed to the consumer.
                        </li>
                    </ul>
                </li>
                <li>
                    <p>Following is a typical deployment diagram for a Message Broker cluster setup.</p>

                    <img src="images/Deployment_Diagram.jpg"
                         alt="A typical cluster deployment"/>
                </li>
            </ul>
        </ul>
        <h2 id="References">References</h2>
        <ul>
            <li>
                <a href="http://qpid.apache.org/">Apache Qpid</a>
            </li>
            <li>
                <a href="http://aws.amazon.com/sqs/">Amazon SQS</a>
            </li>
            <li>
                <a href="http://queue.amazonaws.com/doc/2009-02-01/QueueService.wsdl">Amazon SQS
                    WSDL
                </a>
            </li>
        </ul>

    </body>
</html>
