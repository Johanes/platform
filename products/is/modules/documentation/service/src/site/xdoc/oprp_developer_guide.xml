<!--
  ~ Copyright 2005-2007 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
       "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
    <title>Welcome to WSO2 Identity Server v2.0.0!</title>
    <link href="css/is-docs.css" rel="stylesheet"/>
   </head>
<body>
<h1>WSO2 Identity Solution, v@wso2is_version@ : Java Servlet Filter Developer Guide : Part II</h1>

<h2>Introduction</h2>
This servlet filter org.wso2.solutions.identity.relyingparty.servletfilter.RelyingPartyFilter
can be used with a servlet based web application to provide information card and OpenID 
login to that application.The Part II of this guide explains how you can add OpenID with Simple Registration and OpenID Information Card support to 
a relying party web application. The developer should follow the steps described below
in intgrating this servlet filter:

<h2>Adding OpenID Information Card Support</h2>

<p></p>
<h3>Step 1 : Add the servlet filter to your application</h3>

<p>Include the following entry in the web.xml file of the application:</p>

<pre><![CDATA[

    <filter>
        <filter-name>TokenValidator</filter-name>
        <filter-class>org.wso2.solutions.identity.relyingparty.servletfilter.RelyingPartyFilter</filter-class>
        	<init-param>
	    	    <param-name> ................ </param-name>
		    <param-value> ............... </param-value>
  		</init-param>
		<init-param>
			......................
  		</init-param>
			......................
			......................
    </filter>
	
    <filter-mapping>
        <filter-name>TokenValidator</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
]]></pre>

<p>Add the following as init-params to the web.xml</p>

<table>
	<tr>
		<th>ParameterName</th>
		<th>Required</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>Keystore</td>
		<td>Yes</td>
		<td>Relative path to the keystore holding private key</td>
	</tr>
	<tr>
		<td>StorePass</td>
		<td>Yes</td>
		<td>Password to the keystore holding private key</td>
	</tr>
	<tr>
		<td>KeyAlias</td>
		<td>Yes</td>
		<td>Private key alias</td>
	</tr>
	<tr>
		<td>KeyPass</td>
		<td>Yes</td>
		<td>Private key pass</td>
	</tr>
	<tr>
		<td>StoreType</td>
		<td>Yes</td>
		<td>Store type of the keystore holding private key - e.g. JDK</td>
	</tr>
	<tr>
		<td>TrustedIdP.KeyStore</td>
		<td></td>
		<td>Relative path to the trusted keystore</td>
	</tr>
	<tr>
		<td>TrustedIdP.StorePass</td>
		<td>If TokenValidationPolicy is NOT Promiscuous</td>
		<td>Trust store password</td>
	</tr>
	<tr>
		<td>TrustedIdP.StoreType</td>
		<td>If TokenValidationPolicy is NOT Promiscuous</td>
		<td>Trust store type</td>
	</tr>
	<tr>
		<td>MultiValueClaimsPolicy</td>
		<td>No - default applied</td>
		<td>Must be either MultiValueClaimsAllowed or MultiValueClaimsNotAllowed. Default is MultiValueClaimsNotAllowed</td>
	</tr>
	<tr>
		<td>IssuerPolicy</td>
		<td>No - default applied</td>
		<td>Must be one of SelfAndManaged, Self, Managed. Default is self and managed</td>
	</tr>
	<tr>
		<td>TokenValidationPolicy</td>
		<td>No - default applied</td>
		<td>Must be one of Promiscuous, WhiteList, BlackList, CertValidate. Default is CertValidate. Please read more about this below.</td>
	</tr>
	<tr>
		<td>WhiteList</td>
		<td>Yes, if TokenValidationPolicy is WhiteList</td>
		<td>This is required to indicate the list of allowed DNs. If not specified in WhiteList mode none of the users can login</td>
	</tr>
	<tr>
		<td>BlackList</td>
		<td>Yes, if TokenValidationPolicy is BlackList</td>
		<td>This is required to indicate the list of rejected DNs. If not specified in BlackList mode all users who pass CertValidity can login</td>
	</tr>
</table>

<br/>
<strong>TokenValidationPolicy</strong>
<p>There are 4 modes of token validations.</p>
<ul>
	<li>Promiscuous - In this mode, all tokens that has a valid signature are allowed</li>
	<li>CertValidate - In this mode, all tokens that has a valid signarue by an IDP who has a trusted certificate are allowed</li>
	<li>WhiteList - First CertValidity checked and after that if the issuer DN is in the white list, the token is allowed</li>
	<li>BlackList - First CertValidity checked and after that if the issuer DN is not listed in the BlackList, the token is allowed</li>
</ul>

<h3>Step 2 : Add the OpenID Information Card login page</h3>

<p>The user loging page must contain a form with an <strong>object</strong> tag as shown below:</p>

<pre><![CDATA[

   <form name="frm" id="frm" method="post" action="openidinfocardloggedin.jsp">  
		    <input type="hidden" name="InfoCardSignin" value="Log in" />

	       <OBJECT type="application/x-informationCard" name="xmlToken">
                    <PARAM Name="tokenType" Value="http://specs.openid.net/auth/2.0">
                    <PARAM Name="requiredClaims" Value="http://schema.openid.net/2007/05/claims/identifier">
                    <PARAM name="optionalClaims" Value="http://axschema.org/contact/email http://axschema.org/namePerson/first 
                                                        http://axschema.org/namePerson/last http://axschema.org/contact/phone/default 
                                                        http://axschema.org/contact/postalAddress/home http://axschema.org/contact/city/home 
                                                        http://axschema.org/contact/postalCode/home 
                                                        http://axschema.org/contact/country/home 
                                                        http://axschema.org/contact/web/blog">
               </OBJECT>               

  </form>

]]></pre>

<p>The <strong>object</strong> tag here is the standard information card object as
defined <a href="http://www.identityblog.com/wp-content/resources/profile/InfoCard-Profile-v1-Web-Integration.pdf">
here</a>.</p>

<p><i>It is important that you include the hidden field called "InfoCardSignin" with
the value "Log in". The filter will process the HTTP POST request to extract 
the token sent when this request parameter is available.</i></p>

<h3>Step 3 : Add the following jars to your classpath</h3>
<ul>
<li>axiom-api-1.2.4.jar</li>
<li>axiom-dom-1.2.4.jar</li>
<li>axiom-impl-1.2.4.jar</li>
<li>wstx-asl-3.2.1.jar</li>
<li>bcprov-jdk15-132.jar</li>
<li>core-3.1.1.jar</li>
<li>dom4j-1.6.1.jar</li>
<li>opensaml-1.1.406.jar</li>
<li>opensaml-2.0-rc1.jar</li>
<li>openws-2.0-rc1.jar</li>
<li>stax-api-1.0.1.jar</li>
<li>wss4j-SNAPSHOT.jar</li>
<li>xmlsec-534045-patched.jar</li>
<li>wso2is-token-verifier-core-1.0.jar</li>
<li>wso2is-base-1.0.jar</li>
<li>openid4java-nodeps-0.9.3.1.jar</li>
<li>icu4j-3.4.4.jar</li>
<li>openxri-client-1.0.1.jar</li>
<li>openxri-syntax-1.0.1.jar</li>
<li>commons-pool-1.3.jar</li>
<li>commons-dbcp-1.2.2.jar</li>
<li>htmlparser-1.6.jar</li>
</ul>

<h3>Step 4 : Obtain the information in the verified token and process</h3>

<p>The results of token processing will be available as attributes in the 
ServletRequest object.</p>  

<p>To indicate whether token verification was successful or not there will be an 
attribute by the name "<strong>org.wso2.solutions.identity.rp.State</strong>". 
On successful verification value of this attribute will be 
"<strong>success</strong>". Otherwise it will be "<strong>failure</strong>".</p>  

<p>The ServletRequest will also contain a set of attributes by the names of 
the claims (the part of claim URI after the final "/")</p> with their values.

<p>These values can be used by the developer to initiate a user session in a web 
application.</p>

<h2>Adding OpenID Support with Simple Registration</h2>

<p></p>
<h3>Step 1 : Add the servlet filter to your application</h3>

<p>Include the following entry in the web.xml file of the application:</p>

<pre><![CDATA[

    <filter>
        <filter-name>TokenValidator</filter-name>
        <filter-class>org.wso2.solutions.identity.relyingparty.servletfilter.RelyingPartyFilter</filter-class>
        	<init-param>
	    	    <param-name> ................ </param-name>
		    <param-value> ............... </param-value>
  		</init-param>
		<init-param>
			......................
  		</init-param>
			......................
			......................
    </filter>
	
    <filter-mapping>
        <filter-name>TokenValidator</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
]]></pre>

<h3>Step 2 : Add signin page</h3>

<pre><![CDATA[
<form name="openidsignin" id="openidsignin" method="post" action="openidsubmit.jsp">
    Enter Your OpenID Url:<input type="text" name="openIdUrl"/>
    <input type="submit" name="submit" value="Login" />
</form>
]]></pre>

<p>As per above scenario <b>openidsubmit.jsp</b> page will accept the OpenID url and will do authentication using Identity Solution's 
relying parting components.</p>

<h3>Step 3 : Create OpenID authentication request[openidsubmit.jsp]</h3>
<pre><![CDATA[
// imports
<%@page import="org.wso2.solutions.identity.openid.relyingparty.OpenIDAuthenticationRequest"%>
<%@page import="org.wso2.solutions.identity.openid.relyingparty.OpenIDConsumer"%>
<%@page import="org.wso2.solutions.identity.relyingparty.openid.OpenIDRequestType"%>
<%@page import="org.wso2.solutions.identity.relyingparty.RelyingPartyException"%>
<%@page import="org.wso2.solutions.identity.IdentityConstants"%>

<%

try
{
   OpenIDAuthenticationRequest openIDAuthRequest = null;

   openIDAuthRequest = new OpenIDAuthenticationRequest(request,response);

   openIDAuthRequest.setOpenIDUrl((String)request.getParameter("openIdUrl"));

   // you need to set an absolute url as the return url.
   // once the user authenticated successfully or failed at the OpenID
   // Provider, the browser will be redirected to this url

   openIDAuthRequest.setReturnUrl("http://myapp.com/openidcallback.jsp");

   // Use Simple Attribute Registration 1.1
   openIDAuthRequest.addRequestType(OpenIDRequestType.SIMPLE_REGISTRATION);

   // Set the required claims - I need these claims from the OpenID
   // Provider.
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.NICK_NAME);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.FULL_NAME);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.EMAIL);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.DOB);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.GENDER);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.POSTAL_CODE);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.COUNTRY);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.LANGUAGE);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.SimpleRegAttributes.TIMEZONE);

   // Performs authentication : this will redirect you to OpenID Provider for authentication
   OpenIDConsumer.getInstance().doOpenIDAuthentication(openIDAuthRequest);

}
catch(RelyingPartyException e)
{
   // handle exceptions
   out.println(e.getMessage());
}

%> 
]]></pre>

<h3>Step 4 : Add OpenID callback page[openidcallback.jsp]</h3>

<p>After being authenticated at the OpenID Provider, user will be redirected to this page.</p>
<pre><![CDATA[
// imports
<%@page import="org.wso2.solutions.identity.IdentityConstants"%>
<%@page import="org.wso2.solutions.identity.relyingparty.TokenVerifierConstants"%>
<%@page import="org.wso2.solutions.identity.openid.relyingparty.OpenIDConsumer "%>

<%

String nickname = null;
String auth = (String)request.getAttribute(TokenVerifierConstants.SERVLET_ATTR_STATE);

 if(auth != null && TokenVerifierConstants.STATE_SUCCESS.equals(auth)) {

    //user authenticated successfully at his OpenID Provider
    //let me get his nick name - which I requested.

    if (request.getAttribute(IdentityConstants.OpenId.SimpleRegAttributes.NICK_NAME) != null)
    {
           nickname = request.getAttribute(IdentityConstants.OpenId.SimpleRegAttributes.NICK_NAME);

    }else {

       // there can be OpenID Providers, who do not maintain a list of user
       // attributes. In such case you won't receive any value here -
       // though you requested.
    }
 }
 else
 {
  //user authentication failed at his OpenID Provider
 }
%> 
]]></pre>

<h3>Step 5 : Add the following jars to your classpath</h3>
<ul>
<li>axiom-api-1.2.4.jar</li>
<li>axiom-dom-1.2.4.jar</li>
<li>axiom-impl-1.2.4.jar</li>
<li>wstx-asl-3.2.1.jar</li>
<li>bcprov-jdk15-132.jar</li>
<li>core-3.1.1.jar</li>
<li>dom4j-1.6.1.jar</li>
<li>opensaml-1.1.406.jar</li>
<li>opensaml-2.0-rc1.jar</li>
<li>openws-2.0-rc1.jar</li>
<li>stax-api-1.0.1.jar</li>
<li>wss4j-SNAPSHOT.jar</li>
<li>xmlsec-534045-patched.jar</li>
<li>wso2is-token-verifier-core-1.5.jar</li>
<li>wso2is-base-1.5.jar</li>
<li>openid4java-nodeps-0.9.3.1.jar</li>
<li>icu4j-3.4.4.jar</li>
<li>openxri-client-1.0.1.jar</li>
<li>openxri-syntax-1.0.1.jar</li>
<li>commons-pool-1.3.jar</li>
<li>commons-dbcp-1.2.2.jar</li>
<li>htmlparser-1.6.jar</li>
</ul>


</body>
</html>
