<!--
  ~ Copyright 2005-2007 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
       "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
    <title>Welcome to WSO2 Identity Server v2.0.0!</title>
    <link href="css/is-docs.css" rel="stylesheet"/>
   </head>
<body>
<h1>WSO2 Identity Solution, v@wso2is_version@ : Java Servlet Filter Developer Guide : Part III</h1>

<h2>Introduction</h2>
This servlet filter org.wso2.solutions.identity.relyingparty.servletfilter.RelyingPartyFilter
can be used with a servlet based web application to provide information card and OpenID 
login to that application.The Part III of this guide explains how you can add OpenID support to 
a relying party web application, with OpenID Attribute Exchange and OpenID Provider Authentication Policy Extension. 
The developer should follow the steps described below
in intgrating this servlet filter:

<h2>Adding OpenID Attribute Exchange support</h2>

<p></p><h3>Step 1 : Add the servlet filter to your application</h3>

<p>Include the following entry in the web.xml file of the application:</p>

<pre><![CDATA[

    <filter>
        <filter-name>TokenValidator</filter-name>
        <filter-class>org.wso2.solutions.identity.relyingparty.servletfilter.RelyingPartyFilter</filter-class>
        	<init-param>
	    	    <param-name> ................ </param-name>
		    <param-value> ............... </param-value>
  		</init-param>
		<init-param>
			......................
  		</init-param>
			......................
			......................
    </filter>
	
    <filter-mapping>
        <filter-name>TokenValidator</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
]]></pre>

<h3>Step 2 : Add signin page</h3>

<pre><![CDATA[
<form name="openidsignin" id="openidsignin" method="post" action="openidsubmit.jsp">
    Enter Your OpenID Url:<input type="text" name="openIdUrl"/>
    <input type="submit" name="submit" value="Login" />
</form>
]]></pre>

<p>As per above scenario <b>openidsubmit.jsp</b> page will accept the OpenID url and will do authentication using Identity Solution's 
relying parting components.</p>

<h3>Step 3 : Create OpenID authentication request[openidsubmit.jsp]</h3>
<pre><![CDATA[
// imports
<%@page import="org.wso2.solutions.identity.openid.relyingparty.OpenIDAuthenticationRequest"%>
<%@page import="org.wso2.solutions.identity.openid.relyingparty.OpenIDConsumer"%>
<%@page import="org.wso2.solutions.identity.relyingparty.openid.OpenIDRequestType"%>
<%@page import="org.wso2.solutions.identity.relyingparty.RelyingPartyException"%>
<%@page import="org.wso2.solutions.identity.IdentityConstants"%>

<%

try
{
   OpenIDAuthenticationRequest openIDAuthRequest = null;

   openIDAuthRequest = new OpenIDAuthenticationRequest(request,response);

   openIDAuthRequest.setOpenIDUrl((String)request.getParameter("openIdUrl"));

   // you need to set an absolute url as the return url.
   // once the user authenticated successfully or failed at the OpenID
   // Provider, the browser will be redirected to this url

   openIDAuthRequest.setReturnUrl("http://myapp.com/openidcallback.jsp");

   // Use OpenID Attribute Exchange
   openIDAuthRequest.addRequestType(OpenIDRequestType.ATTRIBUTE_EXCHANGE);

   // Set the required claims - I need these claims from the OpenID
   // Provider.
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.NICK_NAME,IdentityConstants.OpenId.ExchangeAttributes.NICK_NAME_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.FULL_NAME,IdentityConstants.OpenId.ExchangeAttributes.FULL_NAME_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.EMAIL,IdentityConstants.OpenId.ExchangeAttributes.EMAIL_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.DOB,IdentityConstants.OpenId.ExchangeAttributes.DOB_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.GENDER,IdentityConstants.OpenId.ExchangeAttributes.GENDER_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.POSTAL_CODE,IdentityConstants.OpenId.ExchangeAttributes.POSTAL_CODE_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.COUNTRY,IdentityConstants.OpenId.ExchangeAttributes.COUNTRY_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.LANGUAGE,IdentityConstants.OpenId.ExchangeAttributes.LANGUAGE_NS);
   openIDAuthRequest.addRequiredClaims(IdentityConstants.OpenId.ExchangeAttributes.TIMEZONE,IdentityConstants.OpenId.ExchangeAttributes.TIMEZONE_NS);


   // Performs authentication : this will redirect you to OpenID Provider for authentication
   OpenIDConsumer.getInstance().doOpenIDAuthentication(openIDAuthRequest);

}
catch(RelyingPartyException e)
{
   // handle exceptions
   out.println(e.getMessage());
}

%> 
]]></pre>

<h3>Step 4 : Add OpenID callback page[openidcallback.jsp]</h3>

<p>After being authenticated at the OpenID Provider, user will be redirected to this page.</p>
<pre><![CDATA[
// imports
<%@page import="org.wso2.solutions.identity.IdentityConstants"%>
<%@page import="org.wso2.solutions.identity.relyingparty.TokenVerifierConstants"%>
<%@page import="org.wso2.solutions.identity.openid.relyingparty.OpenIDConsumer "%>

<%

String nickname = null;
String auth = (String)request.getAttribute(TokenVerifierConstants.SERVLET_ATTR_STATE);

 if(auth != null && TokenVerifierConstants.STATE_SUCCESS.equals(auth)) {

    //user authenticated successfully at his OpenID Provider
    //let me get his nick name - which I requested.

    if (request.getAttribute(IdentityConstants.OpenId.ExchangeAttributes.NICK_NAME) != null)
    {
           nickname = request.getAttribute(IdentityConstants.OpenId.ExchangeAttributes.NICK_NAME);

    }else {

       // there can be OpenID Providers, who do not maintain a list of user
       // attributes. In such case you won't receive any value here -
       // though you requested.
    }
 }
 else
 {
  //user authentication failed at his OpenID Provider
 }
%> 
]]></pre>

<h3>Step 5 : Add the following jars to your classpath</h3>
<ul>
<li>axiom-api-1.2.4.jar</li>
<li>axiom-dom-1.2.4.jar</li>
<li>axiom-impl-1.2.4.jar</li>
<li>wstx-asl-3.2.1.jar</li>
<li>bcprov-jdk15-132.jar</li>
<li>core-3.1.1.jar</li>
<li>dom4j-1.6.1.jar</li>
<li>opensaml-1.1.406.jar</li>
<li>opensaml-2.0-rc1.jar</li>
<li>openws-2.0-rc1.jar</li>
<li>stax-api-1.0.1.jar</li>
<li>wss4j-SNAPSHOT.jar</li>
<li>xmlsec-534045-patched.jar</li>
<li>wso2is-token-verifier-core-1.5.jar</li>
<li>wso2is-base-1.5.jar</li>
<li>openid4java-nodeps-0.9.3.1.jar</li>
<li>icu4j-3.4.4.jar</li>
<li>openxri-client-1.0.1.jar</li>
<li>openxri-syntax-1.0.1.jar</li>
<li>commons-pool-1.3.jar</li>
<li>commons-dbcp-1.2.2.jar</li>
<li>htmlparser-1.6.jar</li>
</ul>

<h2>Adding OpenID Provider Authentication Policy Extension support</h2>

<p></p><h3>Step 1 : Add the servlet filter to your application</h3>

<p>Include the following entry in the web.xml file of the application:</p>

<pre><![CDATA[

    <filter>
        <filter-name>TokenValidator</filter-name>
        <filter-class>org.wso2.solutions.identity.relyingparty.servletfilter.RelyingPartyFilter</filter-class>
        	<init-param>
	    	    <param-name> ................ </param-name>
		    <param-value> ............... </param-value>
  		</init-param>
		<init-param>
			......................
  		</init-param>
			......................
			......................
    </filter>
	
    <filter-mapping>
        <filter-name>TokenValidator</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
]]></pre>

<h3>Step 2 : Add signin page</h3>

<pre><![CDATA[
<form name="openidsignin" id="openidsignin" method="post" action="openidsubmit.jsp">
    Enter Your OpenID Url:<input type="text" name="openIdUrl"/>
    <input type="submit" name="submit" value="Login" />
</form>
]]></pre>

<p>As per above scenario <b>openidsubmit.jsp</b> page will accept the OpenID url and will do authentication using Identity Solution's 
relying parting components.</p>

<h3>Step 3 : Create OpenID authentication request[openidsubmit.jsp]</h3>
<pre><![CDATA[
// imports
<%@page import="org.wso2.solutions.identity.IdentityConstants"%>
<%@page import="org.wso2.solutions.identity.relyingparty.openid.OpenIDAuthenticationRequest"%>
<%@page import="org.wso2.solutions.identity.relyingparty.openid.OpenIDConsumer"%>
<%@page import="org.wso2.solutions.identity.relyingparty.openid.AuthPolicyType"%>
<%@page import="org.wso2.solutions.identity.relyingparty.openid.OpenIDRequestType"%>
<%@page import="org.wso2.solutions.identity.relyingparty.RelyingPartyException"%>

<%

try
{
   OpenIDAuthenticationRequest openIDAuthRequest = null;

   openIDAuthRequest = new OpenIDAuthenticationRequest(request,response);

   openIDAuthRequest.setOpenIDUrl((String)request.getParameter("openIdUrl"));

   // you need to set an absolute url as the return url.
   // once the user authenticated successfully or failed at the OpenID
   // Provider, the browser will be redirected to this url

   openIDAuthRequest.setReturnUrl("http://myapp.com/openidcallback.jsp");

   // Use PAPE
   openIDAuthRequest.addRequestType(OpenIDRequestType.PAPE);

   String phishing= "true"; //In real implementation accept this from the user : (String)request.getParameter("phishing");
   String multifactor = null;//In real implementation accept this from the user : (String)request.getParameter("multifactor");
   String multifactorphysical= null; //In real implementation accept this from the user : (String)request.getParameter("multifactorphysical");


   if (phishing!= null && phishing.equalsIgnoreCase("true")) {
	  openIDAuthRequest.addAuthPolicy(AuthPolicyType.PAPE_POLICY_PHISHING_RESISTANT);
   }

   if (multifactor!= null && multifactor.equalsIgnoreCase("true")) {
	  openIDAuthRequest.addAuthPolicy(AuthPolicyType.PAPE_POLICY_MULTI_FACTOR);
   }

   if (multifactorphysical!= null && multifactorphysical.equalsIgnoreCase("true")) {
	  openIDAuthRequest.addAuthPolicy(AuthPolicyType.PAPE_POLICY_MULTI_FACTOR_PHYSICAL);
   }

   openIDAuthRequest.setMaxAuthAge(10);


   // Performs authentication : this will redirect you to OpenID Provider for authentication
   OpenIDConsumer.getInstance().doOpenIDAuthentication(openIDAuthRequest);

}
catch(RelyingPartyException e)
{
   // handle exceptions
   out.println(e.getMessage());
}

%> 
]]></pre>

<h3>Step 4 : Add OpenID callback page[openidcallback.jsp]</h3>

<p>After being authenticated at the OpenID Provider, user will be redirected to this page.</p>
<pre><![CDATA[
// imports
<%@page import="org.wso2.solutions.identity.IdentityConstants"%>
<%@page import="org.wso2.solutions.identity.relyingparty.TokenVerifierConstants"%>
<%@page import="org.wso2.solutions.identity.openid.relyingparty.OpenIDConsumer "%>

<%

String authPolcies = null;
String authLevel = null;
String authAge = null;

String auth = (String)request.getAttribute(TokenVerifierConstants.SERVLET_ATTR_STATE);

 if(auth != null && TokenVerifierConstants.STATE_SUCCESS.equals(auth)) {

    //user authenticated successfully at his OpenID Provider
    //let me get PAPE related attributes.

    if (request.getAttribute("auth_policies") != null) {	
	 authPolcies = request.getAttribute("auth_policies");
    }
	
    if (request.getAttribute("nist_auth_level") != null) {
	  authLevel = request.getAttribute("nist_auth_level");
    }

    if (request.getAttribute("auth_age") != null) { 
	  authAge = request.getAttribute("auth_age")%>
    }
 }
 else
 {
  //user authentication failed at his OpenID Provider
 }
%> 
]]></pre>

<h3>Step 5 : Add the following jars to your classpath</h3>
<ul>
<li>axiom-api-1.2.4.jar</li>
<li>axiom-dom-1.2.4.jar</li>
<li>axiom-impl-1.2.4.jar</li>
<li>wstx-asl-3.2.1.jar</li>
<li>bcprov-jdk15-132.jar</li>
<li>core-3.1.1.jar</li>
<li>dom4j-1.6.1.jar</li>
<li>opensaml-1.1.406.jar</li>
<li>opensaml-2.0-rc1.jar</li>
<li>openws-2.0-rc1.jar</li>
<li>stax-api-1.0.1.jar</li>
<li>wss4j-SNAPSHOT.jar</li>
<li>xmlsec-534045-patched.jar</li>
<li>wso2is-token-verifier-core-1.5.jar</li>
<li>wso2is-base-1.5.jar</li>
<li>openid4java-nodeps-0.9.3.1.jar</li>
<li>icu4j-3.4.4.jar</li>
<li>openxri-client-1.0.1.jar</li>
<li>openxri-syntax-1.0.1.jar</li>
<li>commons-pool-1.3.jar</li>
<li>commons-dbcp-1.2.2.jar</li>
<li>htmlparser-1.6.jar</li>
</ul>


</body>
</html>
