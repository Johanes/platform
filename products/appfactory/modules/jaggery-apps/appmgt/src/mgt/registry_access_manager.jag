<%
    var log = new Log();
    include('../constants.jag');
    include('../process/registry_dao.jag');
      include('../process/web_service_util.jag');

    //check whether the key given for the new application already exist
    function isApplicationKeyAlreadyTaken(newKey) {
        var path = APPLICATIONS + newKey;
        try {
            return resourceExists(path);
        } catch (e) {
            log.error("Error while accessing registry resource \n"+e.message);
            throw "Error while accessing registry resource";
        }
    }

    //add application details to registry
     function addApplicationToApp(applicationKey, applicationName, applicationDescription) {
          try {
          var key='application';
          var content=   '<![CDATA[<metadata xmlns="http://www.wso2.org/governance/metadata">'+
                            '<application>'+
                             	'<description>'+applicationDescription+'</description>'+
                             	'<name>'+applicationName+'</name>'+
                                '<key>'+applicationKey+'</key>'+
                            '</application>'+
                            '<serviceLifecycle><lifecycleName>'+LIFE_CYCLE_NAME+'</lifecycleName></serviceLifecycle>'+
                         '</metadata>]]>';
          var lifecycleAttribute='serviceLifecycle_lifecycleName';
               addGenericArtifact(key,content,lifecycleAttribute);

            } catch (e) {
                log.error("Error while storing resource \n"+e.message);
                throw new Error("Error while storing registry resource");
            }
        }

    
    //get all app versions
    function getUniqueAppVersions(applicationKey){
        var appInfos = new Array();
        var stages = getProperties('ApplicationDeployment.DeploymentStage');
		for(var i=0; i<stages.length;i++){
		    var stage = stages[i];
		    appInfos = appInfos.concat(getAppVersionsInStage(stage, applicationKey));
		}
		
		var uniqueVersions = new Array();
		for (var i = 0; i<appInfos.length; i++ ) {
		    var versions = appInfos[i].versions;
		    for (var j = 0; j<versions.length; j++ ) {
		        var version = versions[j];
		    	if (uniqueVersions.indexOf(version) == -1) {
		        	uniqueVersions.push(version);
		    	}
		    }
		}
		return uniqueVersions;
    }
    
    //add stage & version details to registry
    function initAppVersion(applicationKey){
    var versionNo=0;

    var stages = getProperties('ApplicationDeployment.DeploymentStage');
    for(var i=0; i<stages.length;i++){
        var stage = stages[i];
          for(var j=0; j<3;j++){
          try {
                     var resource = createResource();
                 } catch (e) {
                     log.error("Error while creating registry resource \n"+e.message);
                     throw new Error("Error while creating registry resource");
                 }
                 var version='Version '+versionNo;
                 var path = APPLICATIONS+APPLICATION_STAGES +stage+'/'+ applicationKey+'/'+version;
                         try {

                         if( resourceExists(path)!='true'){
                             putResource(path, resource);
                             versionNo=versionNo+1;
                             }
                         } catch (e) {
                             log.error("Error while storing resource \n"+e.message);
                             throw new Error("Error while storing registry resource");
                         }
                         }
       }
    }
    // add the application key to the users' applications list in registry
    function addApplicationToUser(newUser, applicationKey) {

        var path = USER_APPLICATIONS_MAPPING + newUser;
            var result = resourceExists(path);
        if(log.isDebugEnabled()){
             log.debug("in addApplicationToUser, user mapping exists "+result);
        }

        if(result =="true") {
            if(log.isDebugEnabled()){
                log.debug("create application- user already exist");
                log.debug("add application to User "+ resourceExists(path));
            }
            var resource = getResource(path);
            var existingApplicationsList = resource.getProperty(APPLICATION_LIST);
            if(log.isDebugEnabled()){
                log.debug("applications list "+existingApplicationsList);
            }

            if(!containsApplication(existingApplicationsList, applicationKey)) {
                var newApplicationsList = existingApplicationsList + "," + applicationKey;
                if(log.isDebugEnabled()){
                    log.debug("new application list "+newApplicationsList);
                }
                resource.setProperty(APPLICATION_LIST, newApplicationsList);
                putResource(path, resource);
            }

        }
        // add the new application to user to user-applications mapping in registry
        else {
            if(log.isDebugEnabled()){
                log.debug("create application- user doesn't exist");
            }
            var resource = createResource();
            var applicationsList = applicationKey;
            resource.setProperty(APPLICATION_LIST, applicationsList);
            putResource(path, resource);
        }
    }

    function containsApplication(existingApplications, newApplication){
        var applicationAlreadyExist = false;
        var applicationArray = existingApplications.split(",");
        for (var i = 0; i <= applicationArray.length - 1; ++i) {
            log.debug("existing application : new application "+ applicationArray[i] +" "+newApplication)
            if(applicationArray[i] == newApplication) {
                applicationAlreadyExist = true;
                log.debu("new application already exist in existing application list");
                break;
            }
        }
        return applicationAlreadyExist;
    }

    function getApplicationsOfUser(userName) {
        log.debug("USER EXISTS " + resourceExists(USER_APPLICATIONS_MAPPING + userName));
        var applicationList = [];

        var result = resourceExists(USER_APPLICATIONS_MAPPING + userName);
        log.debug("get user applications "+result);
        if(result == "true") {
            log.debug("get applications of user - resource exists "+ resourceExists(USER_APPLICATIONS_MAPPING + userName));
            //get the comma separated application keys that the user can access
            var mapResource = getResource(USER_APPLICATIONS_MAPPING + userName);

            if (mapResource != null) {
                var applicationArray = mapResource.getProperty(APPLICATION_LIST).split(",");
                log.debug("getting user applications "+applicationArray);

                // read the application details from applications/ collection and display link to application
                for (var i = 0; i <= applicationArray.length - 1; ++i) {
                    var resource = {};
                    var key = applicationArray[i];
                    var path = APPLICATIONS + key;

                    //if (registry.resourceExists(path)) {
                    if (resourceExists(path)) {
                        var application = getResource(path);
                        log.debug("resource exist for key "+key+" : "+application);
                        resource.props = {};
                        resource.props.applicationKey = key;
                        resource.props.applicationName = application.getProperty(APPLICATION_NAME);
                    }
                    applicationList.push(resource)
                }
            }
        }
        return applicationList;
    }

    function getRepositoryPath(applicationKey){
        path = APPLICATIONS + applicationKey;
        if(resourceExists(path)) {
            return getResource(path).getProperty(APPLICATION_REPO_LINK);
        }
    }
    
   	function getAppInfo(applicationKey){
       path = APPLICATIONS + applicationKey;
       if(resourceExists(path)) {
           var resource= getResource(path);
           if(resource.getProperty(APPLICATION_KEY) != undefined) {
           	   var application={};
	           application.key= resource.getProperty(APPLICATION_KEY);
	           application.name= resource.getProperty(APPLICATION_NAME);
	           application.description= resource.getProperty(APPLICATION_DESC);
	           application.repoLink= resource.getProperty(APPLICATION_REPO_LINK);
	           
	           return application;
           }
       }
       
       return null;
	}

	function getAllAppVersionsInStage(stageName) {
		getAppVersionsInStage(stageName, null);
	}
	
	function getAppVersionsInStage(stageName, applicationKey) {
		
	    var path = APPLICATIONS + APPLICATION_STAGES + stageName;
	    var appVersions = new Array();
	    
	    if(resourceExists(path)) {
	    	var resource = getResource(path);
			
			if(resource instanceof Collection){
				for(var i = 0; i < resource.childCount; i++) {				
					var versionPath = resource.getChildren()[i];

					if(resourceExists(versionPath)) {
						var applicationInfo = getAppInfo(versionPath.replace('/' + path + '/', ''));
						if(applicationInfo != undefined && applicationInfo != null) {
							
							if(applicationKey != null) {
								if(applicationInfo.key != applicationKey) {
									continue;
								}
							}

							var versions = getResource(versionPath);						
							var arrVersions = new Array();
							
							if(versions instanceof Collection) {
								for(var j = 0; j < versions.childCount; j++) {		
									arrVersions[j] = versions.getChildren()[j].replace('/' + path 
										+ '/' + applicationInfo.key + '/', '');
								}
							}
							
							applicationInfo.stage = stageName;
							applicationInfo.versions = arrVersions;
							
							appVersions[i] = applicationInfo;
						}
					}
				}
			}
		}
		
		//log.error("appVersions >>>>>>>>>>>>> "+ appVersions.toSource());
		return appVersions;
	}
	
	function getAllStages() {
		
		var path = APPLICATIONS + APPLICATION_STAGES;
		var stageArray = new Array();
		if(resourceExists(path)) {
			var resource = getResource(path);
			
			if(resource instanceof Collection){
				for(var i = 0; i < resource.childCount; i++) {				
					var versionPath = resource.getChildren()[i];
					stageArray[i] = versionPath.replace('/' + path, '');
				}
			}
		}

		return stageArray;
	}
	
	function getAllAppVersionsInStages() {
		var allAppVersionArray = new Array();
		var allStages = getAllStages();
		
		for(var i = 0; i < allStages.length; i++) {				
			var stage = allStages[i];
			allAppVersionArray = allAppVersionArray.concat(getAppVersionsInStage(stage));
		}
		
		return allAppVersionArray;
	}
	
	function getAppVersionsInStages(applicationKey) {
		
		var allAppVersionArray = new Array();
		var allStages = getAllStages();
		
		for(var i = 0; i < allStages.length; i++) {				
			var stage = allStages[i];
			allAppVersionArray = allAppVersionArray.concat(getAppVersionsInStage(stage, applicationKey));
		}
		
		return allAppVersionArray;
	}
	
	function getAppCountInStage(applicationKey) {
		var versionArray = new Array();
		var allStages = getAllStages();
		
		for(var i = 0; i < allStages.length; i++) {				
			var stage = allStages[i];
			var versionEntry = {};
			versionEntry.stage = stage;
			var applicationList = getAppVersionsInStage(stage, applicationKey);
			
			var versionCount = 0;
			for (var j = 0; j < applicationList.length; j++) {
		    	var applicationInfo = applicationList[j];
		    	if(applicationInfo == undefined) {
		    		continue;	
		    	}
		    	versionCount += applicationInfo.versions.length;
	    	}
			
			versionEntry.count = versionCount;
			versionArray[i] = versionEntry;
		}
		
		return versionArray;
	}


%>





