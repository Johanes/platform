<%
    include('../process/web_service_util.jag');
    include('../constants.jag');

    //function createNewApplication(applicationKey, applicationName, applicationDescription, userName) {
    function createNewApplication(applicationName, userName) {
        try {
            //var result = createApplication(applicationKey, applicationName, applicationDescription);
            var result = createApplication(applicationName, userName);
            if( result != null) {
                return result;
            } else {
                throw "Error while creating the application";
            }
        } catch(e) {
            throw "Error while creating the application";
        }
    }

    function createApplicationRepository(applicationKey){
        try {
            var result = createRepository(applicationKey);
            if( result != null) {
                var repoLink = null;
                repoLink = result.split("<ns:return>")[1].split("</ns:return>")[0];
                return repoLink;
            } else {
                throw "Error while creating repository";
            }
        } catch(e) {
            throw "Error while creating repository";
        }
    }

    function inviteUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole) {
        try {
            var result = addUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole);
            /*
            var rolesOfUser = newUserRole.split(",");
            var result = addUserToApplicationWS(applicationKey, requestersUsername, newUsername, rolesOfUser);
            */
            if( result != null) {
                return result;
            } else {
                throw "Error while adding user as developer";
            }
        } catch(e) {
            throw "Error while adding user as developer";
        }
    }

    function getUserRolesForApplication(applicationKey, userName) {
        try {
            var result = getRoles(applicationKey, userName);
            if( result != null) {
                var roleArray = result.*::["return"].text();
                return roleArray;
            } else {
                throw "Error while retrieving roles";
            }
        } catch(e) {
            throw "Error while retrieving roles";
        }
    }

    function getUsersOfApplication(applicationKey) {
        try {
            var result = getUsers(applicationKey);
            if( result != null) {
                var userNameArray = result.*::["return"].text();
                return userNameArray;
            } else {
                throw "Error while retrieving users of application";
            }
        } catch(e) {
            throw "Error while retrieving users of application";
        }
    }

    function getUserInfo(applicationKey) {
        try {
            var result = getUsersInfoOfApplication(applicationKey);
            if( result != null) {
                return result;
            } else {
                throw "Error while retrieving user infomation";
            }
        } catch(e) {
        throw "Error while retrieving users infomation";
        }
    }

    //create the user when user registers
    function createUserAccount(newUserName, password, email, firstName, lastName) {
        try {
            var result = createUser(newUserName, password, email, firstName, lastName);
            if( result != null) {
                return result;
            } else {
                throw "Error while creating the user account";
            }
        } catch(e) {
            throw "Error while creating the user account";
        }
    }

    // check whether the logged in user plays any role in the given application
    function isUserInApplication(applicationKey, userName, roleArray) {
        try {
            if(roleArray.length() > 0) {
                return true;
            } else {
                return false;
            }
        } catch(e) {
            throw "Error while checking user access to application";
        }
    }

    // checks whether the logged in user is the owner of the given application
    function isOwner(applicationKey, userName, roleArray) {
        try {
            var isOwner = false;
            for(var i =0; i < roleArray.length(); ++i) {
                if(roleArray[i] == ROLE_APP_OWNER) {
                    isOwner = true;
                    break;
                }
            }
            return isOwner;
        } catch(e) {
            throw "Error while checking ownership of application";
        }
    }

    function isDevOps(applicationKey, userName, roleArray) {
        try {
            var isDevOps = false;
            for(var i =0; i < roleArray.length(); ++i) {
                if(roleArray[i] == ROLE_DEVOPS) {
                	isDevOp = true;
                    break;
                }
            }
            return isDevOps;
        } catch(e) {
            throw "Error while checking ownership of application";
        }
    }
    
    function isAdmin(applicationKey, userName, roleArray) {
        try {
            var isAdmin = false;
            for(var i =0; i < roleArray.length(); ++i) {
                if(roleArray[i] == ROLE_ADMIN) {
                	isAdmin = true;
                    break;
                }
            }
            return isAdmin;
        } catch(e) {
            throw "Error while checking ownership of application";
        }
    }

    //TODO move the logic here
    function getAllAppsOfUser(userName) {
        try {
            var result = getAllApps(userName);
            var ns=new Namespace("http://service.mgt.application.appfactory.carbon.wso2.org");
            return result.ns::["return"].text();
        } catch(e) {
            throw "Error while getting application of user";
        }
    }

    function getUserConfirmationObject(secreteKey) {
        try {
            var result = getConfirmationObject(secreteKey);
            var ax2342=new Namespace("http://util.verification.email.carbon.wso2.org/xsd");
            var ns=new Namespace("http://services.verification.email.carbon.wso2.org");
            var data=new XML(result.ns::["return"].ax2342::data+"");

            var confirmationObject=new Array();
            confirmationObject.admin=(data.admin.text());
            confirmationObject.email=data.email.text();
            confirmationObject.confirmationKey=data.confirmationKey.text();
            return confirmationObject;
        } catch(e) {
            throw "Error while getting confirmation object";
        }
    }

    function activateUser(userName,email,confirmationKey) {
        try {
            var result = invokeUserActivationProcess(userName,email,confirmationKey);
            var wso2=new Namespace("http://wso2.org");
            return result.wso2::success;
        } catch(e) {
            throw "Error while activating user";
        }

    }

    function deployToStage(applicationSvnLocation,applicationName,stageName) {
        var result =  invokeDeployToStage(applicationSvnLocation,applicationName,stageName);
        var resultNS=new Namespace("http://wso2.org/carbon/appfactory/applicaiton/deployment");
        return deployedArtifact=result.resultNS::["result"].text();
    }
%>