<%
    include('../process/webServiceUtil.jag');

    function createNewApplication(applicationKey, applicationName, applicationDescription, userName) {
        try {
            var result = createApplication(applicationKey, applicationName, applicationDescription);
            if( result != null) {
                return result;
            } else {
                throw "Error while creating the application";
            }
        } catch(e) {
            throw "Error while creating the application";
        }
    }

    function createApplicationRepository(applicationKey){
        try {
            var result = createRepository(applicationKey);
            if( result != null) {
                var repoLink = null;
                repoLink = result.split("<ns:return>")[1].split("</ns:return>")[0];
                return repoLink;
            } else {
                throw "Error while creating repository";
            }
        } catch(e) {
            throw "Error while creating repository";
        }
    }

    function inviteUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole) {
        try {
            var result = addUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole);
            if( result != null) {
                return result;
            } else {
                throw "Error while adding user as developer";
            }
        } catch(e) {
            throw "Error while adding user as developer";
        }
    }

    function getUserRolesForApplication(applicationKey, userName,address) {
        try {
            var result = getRoles(applicationKey, userName,address);
            if( result != null) {
                var roleArray = result.*::["return"].text();
                return roleArray;
            } else {
                throw "Error while retrieving roles";
            }
        } catch(e) {
            throw "Error while retrieving roles";
        }
    }

    function getUsersOfApplication(applicationKey) {
        try {
            var result = getUsers(applicationKey);
            if( result != null) {
                return result;
            } else {
                throw "Error while retrieving users of application";
            }
        } catch(e) {
            throw "Error while retrieving users of application";
        }
    }

    //create the user when user registers
    function createUserAccount(newUserName, password, email, firstName, lastName) {
        try {
            var result = createUser(newUserName, password, email, firstName, lastName);
            if( result != null) {
                return result;
            } else {
                throw "Error while creating the user account";
            }
        } catch(e) {
            throw "Error while creating the user account";
        }
    }

    // check whether the logged in user plays any role in the given application
    function isUserInApplication(applicationKey, userName,address) {
        try {
            var roleArray = getUserRolesForApplication(applicationKey, userName,address);
            if(roleArray.length() > 0) {
                return true;
            } else {
                return false;
            }
        } catch(e) {
            throw "Error while checking user access to application";
        }
    }

    // checks whether the logged in user is the owner of the given application
    function isOwner(applicationKey, userName,address) {
        try {
            var roleArray = getUserRolesForApplication(applicationKey, userName,address);
            log("roleArray :"+roleArray);
            log("roleArray length : "+roleArray.length());
            var isOwner = false;
            for(var i =0; i < roleArray.length(); ++i) {
                print(roleArray[i]);
                if(roleArray[i] == "Owner") {
                    isOwner = true;
                }
            }
            return isOwner;
        } catch(e) {
            throw "Error while checking ownership of application";
        }
    }

    function isUserADevOp(applicationKey, userName,address) {
        try {
            var roleArray = getUserRolesForApplication(applicationKey, userName,address);
            log("roleArray :"+roleArray);
            log("roleArray length : "+roleArray.length());
            var isADevOp = false;
            for(var i =0; i < roleArray.length(); ++i) {
                if(roleArray[i] == "devOp") {
                    isADevOp = true;
                }
            }
            return isADevOp;
        } catch(e) {
            throw "Error while checking ownership of application";
        }
    }

%>