<%
    include('../config_reader.jag');
    include('../constants.jag');

    // used for logging
    var log = new Log();

    // creates application in stratos and return svn repository path to application.
    function createApplication(applicationName,userName) {

        //// temp hard coded value. change bpel to get this
        var emailAddress = "ashansa@wso2.com";
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:CreateApplicationRequest xmlns:p="http://wso2.org"><applicationName xmlns="http://wso2.org">'+applicationName+'</applicationName><userName xmlns="http://wso2.org">'+userName+'</userName></p:CreateApplicationRequest>';

        var result;
        try {
            var endPoint = getProperty(WS_CREATE_APP);
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            var resultNS=new Namespace("http://wso2.org");
            var repositoryPath=result.resultNS::["result"].text()
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while creating application \n"+e.message);
            throw "Error while creating application";
        }
        return repositoryPath;
    }

    // creates an svn repository for the created application
    function createRepository(applicationKey) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:createRepository xmlns:p="http://SCMClient.ws.scm.sonia"><applicationName xmlns="http://SCMClient.ws.scm.sonia">' + applicationName + '</applicationName></p:createRepository>';
        var result;
        try {
            var endPoint = getProperty(WS_CREATE_REPO);
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseText;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while creating repository \n"+e.message);
            throw "Error while creating repository";
        }
        return result;
    }

    // add the user to the application in LDAP
    function addUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole) {

        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:AddUserToApplicationRequest xmlns:p="http://wso2.org"><applicationId xmlns="http://wso2.org">' + applicationKey + '</applicationId><userName xmlns="http://wso2.org">' + newUsername + '</userName><roles xmlns="http://wso2.org">' + newUserRole + '</roles></p:AddUserToApplicationRequest>';
        var result;

        try {
            var endPoint = getProperty(WS_ADD_USER_TO_APP);
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while adding user to application \n"+e.message);
            throw "Error while adding user to application";
        }
        return result;
    }

    // get the roles of the logged in user for the given application
    function getRoles(applicationKey, userName) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:getRolesOfUserPerApplication";
        options["HTTPHeaders"] = [ { name : "Cookie", value :getAdminCookie() }];
        var payload =  '<p:getRolesOfUserPerApplication xmlns:p="http://service.mgt.application.appfactory.carbon.wso2.org"><xs:appId xmlns:xs="http://service.mgt.application.appfactory.carbon.wso2.org">'+applicationKey+'</xs:appId><xs:userName xmlns:xs="http://service.mgt.application.appfactory.carbon.wso2.org">'+userName+'</xs:userName></p:getRolesOfUserPerApplication>';
        var result;

        try {
            var endPoint = getProperty(WS_GET_ROLE_OF_USER_FOR_APP);
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while retrieving roles \n"+e.message);
            throw "Error while retrieving roles";
        }
        return result;
    }

    //getUsers of the application
    function getUsers(applicationKey) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:getUserListForApplication xmlns:p="http://services.mgt.tenant.carbon.wso2.org"><applicationKey xmlns="http://services.mgt.tenant.carbon.wso2.org">' + applicationKey + '</applicationKey></p:getUserListForApplication>';
        var result;
        try {
            var endPoint = getProperty(WS_USER_OF_APP);
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while retrieving users of application \n"+e.message);
            throw "Error while retrieving users of application";
        }
        return result;
    }

    // creating a user
    function createUser(newUserName, password, email, firstName, lastName) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:UserCreationProcessRequest xmlns:p="http://wso2.org"><userName xmlns="http://wso2.org">' + newUserName + '</userName><password xmlns="http://wso2.org">' + password + '</password><email xmlns="http://wso2.org">' + email + '</email><firstName xmlns="http://wso2.org">' + firstName + '</firstName><lastName xmlns="http://wso2.org">' + lastName + '</lastName></p:UserCreationProcessRequest>';
        var result;
        try {
            var endPoint = getProperty(WS_CREATE_USER);
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while creating the user account \n"+e.message);
            throw "Error while creating the user account";
        }
        return result;
    }

    //
    function getConfirmationObject(secreteKey) {
        var ws = require("ws");
        var EmailVerificationService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:ConfirmationBean";
        options.username=getProperty(ADMIN_USERNAME);
        options.password=getProperty(ADMIN_PASSWORD);

        var payload =<ser:confirmUser xmlns:ser="http://services.verification.email.carbon.wso2.org"></ser:confirmUser>;
        var ser=new Namespace("http://services.verification.email.carbon.wso2.org");
        payload.ser::secretKey=secreteKey;
        var result;
        try {
            var endPoint = getProperty(WS_EMAIL_VERIFICATION);
            EmailVerificationService.open(options, endPoint, false);
            EmailVerificationService.send(payload);
            result = EmailVerificationService.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
            return result;
        } catch (e) {
            log.error("Email varification failed \n"+e.message);
            throw "Email varification failed";
        }
    }

    function invokeUserActivationProcess(userName,email,confirmationKey){
        var ws = require('ws');
        var UserActivationProcess = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.action = "urn:process";
        var payload = '<UserActivationProcessRequest xmlns="http://wso2.org"><userName xmlns="http://wso2.org">'+userName+'</userName><email xmlns="http://wso2.org">'+email+'</email><confirmationKey xmlns="http://wso2.org">'+confirmationKey+'</confirmationKey></UserActivationProcessRequest>';
        var result;

        try {
            var endPoint = getProperty(WS_ACTIVATE_USER);
            UserActivationProcess.open(options,endPoint, false);
            UserActivationProcess.send(payload);
            result = UserActivationProcess.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
            return result;
        } catch (e) {
            log.error("Error while activating user \n"+e.message);
            throw "Error while activating user";
        }
    }

    function getAllApps(userName){
        var ws = require("ws");
        var applicationMgtService = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:getAllApplications";
        options["HTTPHeaders"] = [ { name : "Cookie", value :getAdminCookie() }];
        var payload='<p:getAllApplications xmlns:p="http://service.mgt.application.appfactory.carbon.wso2.org"><p:userName>'+userName+'</p:userName></p:getAllApplications>';
        var result;

        try {
            var endPoint = getProperty(WS_GET_ALL_APPS);
            applicationMgtService.open(options, endPoint, false);
            applicationMgtService.send(payload);
            result = applicationMgtService.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
            return result;
        } catch (e) {
            log.error("Error while getting application of user \n"+e.message);
            throw "Error while getting application of user";
        }
    }

    function invokeDeployToStage(applicationSvnLocation,applicationName,stageName){
        var ws = require('ws');
        var deployApplicationToStageProcess = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.action = "urn:process";
        var payload = '<p:DeployApplicationTo'+stageName+'Request xmlns:p="http://wso2.org/carbon/appfactory/applicaiton/deployment"><p:applicationSvnLocation>'+applicationSvnLocation+'</p:applicationSvnLocation><p:applicationName>'+applicationName+'</p:applicationName></p:DeployApplicationTo'+stageName+'Request>';
        var result;

        try {
            var endPoint =getProperty('ApplicationDeployment.DeploymentStage.'+stageName+'.ProcesEndPoint');
            deployApplicationToStageProcess.open(options,endPoint, false);
            deployApplicationToStageProcess.send(payload);
            result = deployApplicationToStageProcess.responseE4X;

            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
            return result;
        } catch (e) {
            log.error("Error while deploying to "+stageName + "\n"+e.message);
            throw "Error while deploying to "+stageName;
        }
    }

    function getAdminCookie(){
        var xhr = new XMLHttpRequest();
        var endPoint = getProperty(WS_GET_AUTH_COOKIE);
        xhr.open("POST", endPoint);
        var payload='<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>'+getProperty(ADMIN_USERNAME)+'</aut:username><aut:password>'+getProperty(ADMIN_PASSWORD)+'</aut:password><aut:remoteAddress>localhost</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';
        xhr.send(payload);
        var cookie=(xhr.getAllResponseHeaders());
        return cookie.split(";")[0].split(":")[1];
    }
%>