<%
    include('../config_reader.jag');

    // used for logging
    var log = new Log();

    // creates application in stratos
    function createApplication(applicationName,userName) {

        //// temp hard coded value. change bpel to get this
        var emailAddress = "ashansa@wso2.com";
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:CreateApplicationRequest xmlns:p="http://wso2.org"><applicationName xmlns="http://wso2.org">'+applicationName+'</applicationName><userName xmlns="http://wso2.org">'+userName+'</userName></p:CreateApplicationRequest>';

        var result;
        try {
            var endPoint = getProperty('webService.createApplication');
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while creating application \n"+e.message);
            throw "Error while creating application";
        }
        return result;
    }

    // creates an svn repository for the created application
    function createRepository(applicationKey) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:createRepository xmlns:p="http://SCMClient.ws.scm.sonia"><applicationName xmlns="http://SCMClient.ws.scm.sonia">' + applicationName + '</applicationName></p:createRepository>';
        var result;
        try {
            var endPoint = getProperty('webService.createRepo');
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseText;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while creating repository \n"+e.message);
            throw "Error while creating repository";
        }
        return result;
    }

    // add the user to the application in LDAP
    function addUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole) {

        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:AddUserToApplicationRequest xmlns:p="http://wso2.org/addusertoapplication"><applicationKey xmlns="http://wso2.org/addusertoapplication">' + applicationKey + '</applicationKey><requestersUsername xmlns="http://wso2.org/addusertoapplication">' + requestersUsername + '</requestersUsername><newUsername xmlns="http://wso2.org/addusertoapplication">' + newUsername + '</newUsername><newUserRole xmlns="http://wso2.org/addusertoapplication">' + newUserRole + '</newUserRole></p:AddUserToApplicationRequest>';
        var result;

        try {
            var endPoint = getProperty('webService.addUserToApplication');
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while adding user to application \n"+e.message);
            throw "Error while adding user to application";
        }
        return result;
    }

    // get the roles of the logged in user for the given application
    function getRoles(applicationKey, userName,address) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:getRolesOfUserPerApplication";
         options["HTTPHeaders"] = [ { name : "Cookie", value :getAdminCookie(address) }];

        var payload =  '<p:getRolesOfUserPerApplication xmlns:p="http://service.mgt.application.appfactory.carbon.wso2.org"><xs:appId xmlns:xs="http://service.mgt.application.appfactory.carbon.wso2.org">'+applicationKey+'</xs:appId><xs:userName xmlns:xs="http://service.mgt.application.appfactory.carbon.wso2.org">'+userName+'</xs:userName></p:getRolesOfUserPerApplication>';
        var result;

        try {
            var endPoint = getProperty('webService.getRolesOfUserForApplication');
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while retrieving roles \n"+e.message);
            throw "Error while retrieving roles";
        }
        return result;
    }

    //getUsers of the application
    function getUsers(applicationKey) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:getUserListForApplication xmlns:p="http://services.mgt.tenant.carbon.wso2.org"><applicationKey xmlns="http://services.mgt.tenant.carbon.wso2.org">' + applicationKey + '</applicationKey></p:getUserListForApplication>';
        var result;
        try {
            var endPoint = getProperty('webService.getUsersOfApplication');
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while retrieving users of application \n"+e.message);
            throw "Error while retrieving users of application";
        }
        return result;
    }

    // creating a user
    function createUser(newUserName, password, email, firstName, lastName) {
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:process";

        var payload = '<p:UserCreationProcessRequest xmlns:p="http://wso2.org"><userName xmlns="http://wso2.org">' + newUserName + '</userName><password xmlns="http://wso2.org">' + password + '</password><email xmlns="http://wso2.org">' + email + '</email><firstName xmlns="http://wso2.org">' + firstName + '</firstName><lastName xmlns="http://wso2.org">' + lastName + '</lastName></p:UserCreationProcessRequest>';
        var result;
        try {
            var endPoint = getProperty('bpel.createUser');
            request.open(options, endPoint, false);
            request.send(payload);
            result = request.responseE4X;
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
        } catch (e) {
            log.error("Error while creating the user account \n"+e.message);
            throw "Error while creating the user account";
        }
        return result;
    }
      function getConfirmationObject(secreteKey){
      var ws = require("ws");

      var EmailVerificationService = new ws.WSRequest();
      var options = new Array();
      options.useSOAP = 1.2;
      options.action = "urn:ConfirmationBean";
      options.username=getProperty('adminUserName');
      options.password=getProperty('adminPassword');
      var payload =<ser:confirmUser xmlns:ser="http://services.verification.email.carbon.wso2.org"></ser:confirmUser>;
      var ser=new Namespace("http://services.verification.email.carbon.wso2.org");
      payload.ser::secretKey=secreteKey;
      var result;

      try {
          var endPoint = getProperty('webService.emailVarificationService');
          EmailVerificationService.open(options, endPoint, false);
          EmailVerificationService.send(payload);
          result = EmailVerificationService.responseE4X;
          if(log.isDebugEnabled()){
              log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
          }
      } catch (e) {
      log.error("Email varification failed");
      return null;
      }

     var ax2342=new Namespace("http://util.verification.email.carbon.wso2.org/xsd");
     var ns=new Namespace("http://services.verification.email.carbon.wso2.org");
     var data=new XML(result.ns::["return"].ax2342::data+"");

     var confirmationObject=new Array();
     confirmationObject.admin=(data.admin.text());
     confirmationObject.email=data.email.text();
     confirmationObject.confirmationKey=data.confirmationKey.text();


     return confirmationObject;
    }

       function invokeUserActivationProcess(userName,email,confirmationKey){
       var ws = require('ws');

       var UserActivationProcess = new ws.WSRequest();
       var options = new Array();
       options.useSOAP = 1.1;      
       options.action = "urn:process";
       var payload = '<UserActivationProcessRequest xmlns="http://wso2.org"><userName xmlns="http://wso2.org">'+userName+'</userName><email xmlns="http://wso2.org">'+email+'</email><confirmationKey xmlns="http://wso2.org">'+confirmationKey+'</confirmationKey></UserActivationProcessRequest>';
       var result;

       try {
        var endPoint = getProperty('bpel.activateUser');
        UserActivationProcess.open(options,endPoint, false);
        UserActivationProcess.send(payload);
        result = UserActivationProcess.responseE4X;
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }
       } catch (e) {
        log.error(e.toString());
        return result;

       }
       var wso2=new Namespace("http://wso2.org");
       return result.wso2::success;
       }

       function getAllApps(address){
             var ws = require("ws");

             var applicationMgtService = new ws.WSRequest();
             var options = new Array();

              options.useSOAP = 1.2;
              options.action = "urn:getAllApplications";
              options["HTTPHeaders"] = [ { name : "Cookie", value :getAdminCookie(address) }];
              var payload=null;
              var result;

             try {
             var endPoint = getProperty('webService.getAllApps');

             applicationMgtService.open(options, endPoint, false);
             applicationMgtService.send(payload);
             result = applicationMgtService.responseE4X;
             var ns=new Namespace("http://service.mgt.application.appfactory.carbon.wso2.org");
             var a=result.ns::["return"].text()
            if(log.isDebugEnabled()){
                log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
            }
             return a;
             } catch (e) {
             log.error(e.toString());
             throw new Error(e.message)
             }
             }
       function getAdminCookie(address){
             var xhr = new XMLHttpRequest();
             var endPoint = getProperty('webService.getAuthCookie');
             xhr.open("POST", endPoint);
	         var payload='<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>'+getProperty('adminUserName')+'</aut:username><aut:password>'+getProperty('adminPassword')+'</aut:password><aut:remoteAddress>'+address+'</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';

             xhr.send(payload);
             var cookie=(xhr.getAllResponseHeaders());
             return cookie.split(";")[0].split(":")[1];
             }
%>