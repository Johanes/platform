<%

var gregUrl = "https://192.168.4.26:9443/";
var log = new Log();
function loginFunc(username, password, remoteAddress) {
    var url = gregUrl + "services/AuthenticationAdmin";
    var payload =
        <aut:login xmlns:aut="http://authentication.services.core.carbon.wso2.org">
            <aut:username>{username}</aut:username>
            <aut:password>{password}</aut:password>
            <aut:remoteAddress>{remoteAddress}</aut:remoteAddress>
        </aut:login>;
    var result = invokeService(url, payload, "urn:login");
	
    if (result.error) {
        log.error("Error authenticating user : " + username + " at " + remoteAddress, "error");
        return {
            error:result.error,
            cookie:null
        };
    }

	var responseText = result.client.responseText;
	var loginSuccess = responseText.split("<ns:return>")[1].split("</ns:return>")[0];
	log.debug("========"+loginSuccess+"=========");
	
	var cookie = result.client.getResponseHeader("Set-Cookie");
	cookie = cookie.split(';')[0];
	if(loginSuccess == "true")
	{
		session.put("username", username);
		session.put("cookie", cookie);
		session.put("loginInvalid", "false");
		return {
		    error:false,
			loginStatus:true,
		    cookie:cookie
		};
	} else {
		session.put("username", null);
		session.put("cookie", cookie);
		session.put("loginInvalid", "true");
		return {
		    error:false,
			loginStatus:false,
		    cookie:cookie
		};
	}
}

function logoutFunc() {
    session.put("username", null);
    session.put("cookie", null);

    return {
        error:false
    };
}

function getUserFunc() {
    return {
        username:session.get("username"),
        cookie:session.get("cookie"),
		loginInvalid:session.get("loginInvalid")
    };
}

function getServicesFunc() {
    var url = gregUrl + "services/ListMetadataService.ListMetadataServiceHttpsSoap11Endpoint/";
    var payload = <ser:listservices xmlns:ser="http://services.list.governance.carbon.wso2.org"></ser:listservices>;
    var result = invokeService(url, payload, "urn:listservices", null);
    if (result.error) {
        log.error("Error getting services");
        return {
            error:result.error,
            services:null
        };
    }

    var getPath = function (pathString) {
        var fullPath = "/";
        var pathA = pathString.split('/');
        for (var i = 1; i < pathA.length - 2; i++) {
            fullPath += pathString.split('/')[i] + '/';
        }
        return fullPath;
    };

    var xml = result.client.responseE4X;
    var ns = "http://services.list.governance.carbon.wso2.org";
    var ax2211 = "http://beans.list.governance.carbon.wso2.org/xsd";
    var services = [];
    var names = xml.ns::["return"].ax2211::names;
    var canDeletes = xml.ns::["return"].ax2211::canDelete;
    var paths = xml.ns::["return"].ax2211::path;
    var namespaces = xml.ns::["return"].ax2211::namespace;
    for (var i = 0; i < names.length(); i++) {
        var path = getPath(paths[i].text().toString());
        var rs = getRatingFunc(path);
        var rating;
        if (rs.error) {
            rating = 0;
        } else {
            rating = rs.rating;
            var content = getResourceContentFunc('/_system/governance' + getPath(paths[i].text().toString()));
            log.debug('the path :: /_system/governance' + getPath(paths[i].text().toString()));
            var elem = {
                name:names[i].text().toString(),
                canDelete:canDeletes[i].text().toString(),
                namespace:namespaces[i].text().toString(),
                path:getPath(paths[i].text().toString()),
                rating:rating,
                purchased:isPurchased(names[i].text().toString()),
                thumbURL:content.ThumbURL,
                supportForumURL:content.supportForumURL
            };
            services.push(elem);
        }
    }
    return {
        error:false,
        services:services
    };
}

function getTopRatedServicesFunc() {
    var result = getServicesFunc();
    if (result.error) {
        return {
            error:result.error,
            topRated:null
        };
    }
    var topRated = [];
    var services = result.services;
    for (var i = 0; i < services.length; i++) {
        var service = services[i];
        if (service.rating > 4) {
            topRated.push(service);
        }
    }
    return {
        error:false,
        topRated:topRated
    };
}

function getRecentlyAddedServicesFunc() {
    var result = getServicesFunc();
    if (result.error) {
        return {
            error:result.error,
            recentlyAdded:null
        };
    }
    var recentlyAdded = [];
    var addedTime = [];
    var servicesObj = {};
    var services = result.services;
    for (var i = 0; i < services.length; i++) {
        var service = services[i];
        var dr = getDescriptionFunc(service.path, "all");
        if (dr.error) {
            continue;
        } else {
            var description = dr.description;
            addedTime.push(description.createdTime);
            servicesObj[description.createdTime] = service;
        }
    }
    addedTime = addedTime.sort(function (a, b) {
        return b - a;
    });
    for (i = 0; i < addedTime.length; i++) {
        recentlyAdded.push(servicesObj[addedTime[i]]);
    }
    return {
        error:false,
        recentlyAdded:recentlyAdded
    };
}

function getRatingFunc(path) {
    var url = gregUrl + "services/WSRegistryService.WSRegistryServiceHttpsSoap11Endpoint/";
    var payload =
        <api:getRating xmlns:api="http://api.ws.registry.carbon.wso2.org">
            <api:path>/_system/governance{path}</api:path>
            <api:userName>{getUserFunc().username}</api:userName>
        </api:getRating>;
    var result = invokeService(url, payload, "urn:getRating", null);
    if (result.error) {
        log.error("Error getting rating for the resource at " + path);
        return {
            error:result.error,
            rating:null
        };
    }
    var xml = result.client.responseE4X;
    var ns = "http://api.ws.registry.carbon.wso2.org";
    return {
        error:false,
        rating:xml.ns::["return"].text().toString()
    };
}

function getDescriptionFunc(path, type) {
    var url = gregUrl + "services/WSRegistryService.WSRegistryServiceHttpsSoap11Endpoint/";
    var payload =
        <api:WSgetMetaData xmlns:api="http://api.ws.registry.carbon.wso2.org">
            <api:path>/_system/governance{path}</api:path>
        </api:WSgetMetaData>;
    var result = invokeService(url, payload, "urn:WSgetMetaData", null);
    if (result.error) {
        log.error("Error getting description for resource at " + path);
        return {
            error:result.error,
            description:null
        };
    }
    var xml = result.client.responseE4X;
    var ns = "http://api.ws.registry.carbon.wso2.org";
    var ax2430 = "http://api.ws.registry.carbon.wso2.org/xsd";
    if (type == "all") {
        var description = {
            versionNumber:xml.ns::["return"].ax2430::versionNumber.text().toString(),
            description:xml.ns::["return"].ax2430::description.text().toString(),
            parentPath:xml.ns::["return"].ax2430::parentPath.text().toString(),
            createdTime:xml.ns::["return"].ax2430::createdTime.text().toString(),
            authorUserName:xml.ns::["return"].ax2430::authorUserName.text().toString(),
            lastModified:xml.ns::["return"].ax2430::lastModified.text().toString(),
            lastUpdaterUserName:xml.ns::["return"].ax2430::lastUpdaterUserName.text().toString(),
            mediaType:xml.ns::["return"].ax2430::mediaType.text().toString()
        };
        return {
            error:false,
            description:description
        };
    } else if (type == "author") {
        var author =
            xml.ns::["return"].ax2430::authorUserName.text().toString();
        return {
            error:false,
            author:author
        };
    }

}

function getTagsFunc(path) {
    var url = gregUrl + "services/WSRegistryService.WSRegistryServiceHttpsSoap11Endpoint/";
    var payload =
        <api:WSgetTags xmlns:api="http://api.ws.registry.carbon.wso2.org">
            <api:resourcePath>/_system/governance{path}</api:resourcePath>
        </api:WSgetTags>;
    var result = invokeService(url, payload, "urn:WSgetTags", null);
    if (result.error) {
        log.error("Error getting tags for the resource at " + path);
        return {
            error:result.error,
            tags:null
        };
    }

    var xml = result.client.responseE4X;
    var ns = "http://api.ws.registry.carbon.wso2.org";
    var ax2430 = "http://api.ws.registry.carbon.wso2.org/xsd";
    var tagEl = xml.ns::["return"].ax2430::tagName;
    var tags = [];
    for (var i = 0; i < tagEl.length(); i++) {
        tags[i] = tagEl[i].text().toString();
    }
    return {
        error:false,
        tags:tags
    };
}

function getTagCloudFunc() {
    var result = getServicesFunc();
    if (result.error) {
        return {
            error:result.error,
            topCloud:null
        };
    }
    var tagCloud = [];
    var tagCount = {};
    var services = result.services;
    for (var i = 0; i < services.length; i++) {
        var service = services[i];
        var tr = getTagsFunc(service.path);
        if (tr.error) {
            continue;
        } else {
            var tags = tr.tags;
            for (var j = 0; j < tags.length; j++) {
                var tag = tags[j];
                if (tagCount[tag]) tagCount[tag] = tagCount[tag] + 1;
                else tagCount[tag] = 1;
            }
        }
    }
    for (var tag in tagCount) {
        tagCloud.push({
            name:tag,
            count:tagCount[tag]
        });
    }
    return {
        error:false,
        tagCloud:tagCloud
    };
}

function purchaseServiceFunc(serviceName, servicePath, username) {
    var assocPath = '/application/service_store/consumer/' + username + '/purchase/' + serviceName;
    var msg = "Error purchasing service " + serviceName + " at " + servicePath + " for user : " + username;
    var result = createResourceFunc(assocPath);
    if (result.error) {
        log(msg, "error");
        return {
            error:result.error,
            purchased:false
        };
    }
    result = createAssociationFunc(assocPath, servicePath);
    if (result.error) {
        log.error(msg);
        return {
            error:result.error,
            purchased:false
        };
    }
    return {
        error:false,
        purchased:true
    };
}

function createResourceFunc(path) {

    var url = gregUrl + "services/ResourceAdminService.ResourceAdminServiceHttpsSoap11Endpoint/";
    var payload =
        <ser:addResource xmlns:ser="http://services.resource.registry.carbon.wso2.org">
            <ser:path>{path}</ser:path>
        </ser:addResource>;
    var result = invokeService(url, payload, "urn:addResource", null);
    if (result.error) {
        log.error("Error while creating resource at " + path);
        return {
            error:true
        };
    }
    var xml = result.client.responseE4X;
    var services = new Array();
    var ns = "http://services.resource.registry.carbon.wso2.org";
    var created = xml.ns::["return"][0].text().toString();
    return {
        error:false,
        created:created
    };
}

function createAssociationFunc(source, target) {
    var url = gregUrl + "services/WSRegistryService.WSRegistryServiceHttpsSoap11Endpoint/";
    var payload =
        <api:addAssociation  xmlns:api="http://api.ws.registry.carbon.wso2.org">
            <api:sourcePath>{source}</api:sourcePath>
            <api:targetPath>/_system/governance{target}</api:targetPath>
            <api:associationType>purch</api:associationType>
        </api:addAssociation>;

    var options = {
        mep:'in-only'
    };
    invokeService(url, payload, "urn:addAssociation", options);
    return {
        error:false,
        associated:true
    };
}

function getPurchasesFunc(username) {
    var url = gregUrl + "services/WSRegistryService.WSRegistryServiceHttpsSoap11Endpoint/";
    var payload =
        <api:getCollectionContent xmlns:api="http://api.ws.registry.carbon.wso2.org">
            <api:path>/application/service_store/consumer/{username}/purchase</api:path>
        </api:getCollectionContent>;
    var result = invokeService(url, payload, "urn:getCollectionContent", null);
    if (result.error) {
        log.error("Error getting purchases for user : " + username);
        return {
            error:result.error,
            purchases:null
        };
    }
    var purchases = [];
    var xml = result.client.responseE4X;
    var ns = "http://api.ws.registry.carbon.wso2.org";
    var names = xml.ns::["return"];
    for (var i = 0; i < names.length(); i++) {
        purchases.push(names[i].text().toString().split('purchase/')[1]);
    }
    return {
        error:false,
        purchases:purchases
    };
}

function searchServiceFunc(key, name) {
    var url = gregUrl + "services/SearchAdminService.SearchAdminServiceHttpsSoap11Endpoint/";
    var payload =
        <ser:getAdvancedSearchResults
        xmlns:ser="http://services.search.registry.carbon.wso2.org"
        xmlns:xsd="http://beans.search.registry.carbon.wso2.org/xsd">
            <ser:parameters>
                <xsd:parameterValues>
                    <xsd:array>{key}</xsd:array>
                    <xsd:array>{name}</xsd:array>
                </xsd:parameterValues>
                <xsd:parameterValues>
                    <xsd:array>mediaType</xsd:array>
                    <xsd:array>application/vnd.wso2-service+xml</xsd:array>
                </xsd:parameterValues>
            </ser:parameters>
        </ser:getAdvancedSearchResults>;

    var result = invokeService(url, payload, "urn:getAdvancedSearchResults", null);
    if (result.error) {
        log.error("Error searching services key : " + key + ", name : " + name);
        return {
            error:result.error,
            services:null
        }
    }
    var services = [];
    var xml = result.client.responseE4X;
    var ns = "http://services.search.registry.carbon.wso2.org";
    var ax2427 = "http://common.registry.carbon.wso2.org/xsd";
    var ax2425 = "http://beans.search.registry.carbon.wso2.org/xsd";
    var rdl = xml.ns::["return"].ax2425::["resourceDataList"];
    for (var i = 0; i < rdl.length(); i++) {
        var content = getResourceContentFunc(rdl[i].ax2427::['resourcePath'].text().toString());
        services.push({
            name:rdl[i].ax2427::['name'].text().toString(),
            canDelete:rdl[i].ax2427::['deleteAllowed'].text().toString(),
            namespace:null,
            path:rdl[i].ax2427::['resourcePath'].text().toString(),
            rating:rdl[i].ax2427::['averageRating'].text().toString(),
            purchased:isPurchased(rdl[i].ax2427::['name'].text().toString()),
            thumbURL:content.ThumbURL,
            supportForumURL:content.supportForumURL
        });
    }

    if (key == "resourcePath" && services.length != 0) {
        saveSearchTerm(name);
    }

    return {
        error:false,
        services:services
    }
}

function saveSearchTerm(name) {
    var path = '/application/service_store/metadata/search_terms/' + name;
    createResourceFunc(path);
}

function getSearchKeysFunc() {
    var result = getResourceNamesInCollectionFunc("/application/service_store/metadata/search_terms/");
    if(result.error == "true"){
        return result;
    }
    return {
        error:false,
        source:result.resourceNames
    }
}

function getResourceNamesInCollectionFunc(path) {
    var url = gregUrl + "services/ResourceAdminService.ResourceAdminServiceHttpsSoap11Endpoint/";
    log.debug(path);

    if (path.charAt(path.length - 1) == "/") {
        path = path.substring(0, path.length - 1);
    }

    var payload =
        <ser:getCollectionContent xmlns:ser="http://services.resource.registry.carbon.wso2.org">
            <ser:path>{path}</ser:path>
        </ser:getCollectionContent>

    var result = invokeService(url, payload, "urn:getCollectionContent", null);
    if (result.error) {
        log.debug("Error while getting resources at " + path);
        return {
            error:true
        };
    }
    var xml = result.client.responseE4X;
    var services = new Array();
    var ns = "http://services.resource.registry.carbon.wso2.org";
    var ax2414 = "http://beans.resource.registry.carbon.wso2.org/xsd";
    var paths = xml.ns::["return"].ax2414::["childPaths"];

    var resNames = [];

    for (var id in paths) {
        resNames.push(paths[id].split("/application/service_store/metadata/search_terms/")[1]);
    }

    return {
        error:false,
        resourceNames:resNames
    };
}


function invokeService(url, payload, action, opts) {
	var ws = require('ws');
	var client = new ws.WSRequest();
    //var client = new WSRequest();
    var options = [];
    options.useSOAP = 1.2;
    options.userWSA = 1.0;
    options.action = action;
    var user = getUserFunc();
    if (user.cookie) {
        options.HTTPHeaders = [
            { name:"Cookie", value:user.cookie }
        ];
    }
    if (opts) {
        for (var key in opts) {
            options[key] = opts[key];
        }
    }
    try {
        client.open(options, url, false);
        client.send(payload);
        return {
            client:client,
            error:false
        };
    } catch (e) {
        log.debug("Error invoking service " + url + ", action : " + options.action + ", " + e.toString());
        return {
            client:client,
            error:e
        };
    }
}

function isPurchased(servicen) {
    var allservices = getPurchases(getUserFunc().username);
    if (!allservices.error) {
        for (var s in allservices.data.purchases) {
            if (allservices.data.purchases[s].search(servicen) > -1) {
                return true;
            }
        }
    }
    return false;
}

function rateResourceFunc(path, rating) {
    var url = gregUrl + "services/WSRegistryService";
    var payload =
        <api:rateResource xmlns:api="http://api.ws.registry.carbon.wso2.org">
            <api:resourcePath>/_system/governance{path}</api:resourcePath>
            <api:rating>{rating}</api:rating>
        </api:rateResource>;
    var options = {
        mep:'in-only'
    };
    var result = invokeService(url, payload, "urn:rateResource", options);
    if (result.error) {
        log.debug("Error rating the resource " + path);
        return {
            error:result.error,
            services:null
        };
    }
    return {
        error:false
    };
}

function addCommentFunc(path, comment) {
    var url = gregUrl + "services/WSRegistryService";
    var username = getUserFunc().username;
    if (username) {
        var payload =
            <api:WSaddComment xmlns:api="http://api.ws.registry.carbon.wso2.org" xmlns:xsd="http://api.ws.registry.carbon.wso2.org/xsd">
                <api:resourcePath>/_system/governance{path}</api:resourcePath>
                <api:comment>
                    <xsd:text>{comment}</xsd:text>
                    <xsd:user>{username}</xsd:user>
                </api:comment>
            </api:WSaddComment>;
        var result = invokeService(url, payload, "urn:WSaddComment", null);
        if (result.error) {
            log.error("Error adding the comment for resource " + path);
            return {
                error:result.error,
                comment:null
            };
        }
        var xml = result.client.responseE4X;
        var ns = "http://api.ws.registry.carbon.wso2.org";
        return {
            error:false,
            comment:xml.ns::["return"].text().toString()
        };
    } else {
        log.debug("Logged in user cannot be found");
        return {
            error:true,
            comment:null
        };
    }
}

function getCommentsFunc(path) {
    var url = gregUrl + "services/WSRegistryService";
    var payload =
        <api:WSgetComments xmlns:api="http://api.ws.registry.carbon.wso2.org">
            <api:resourcePath>/_system/governance{path}</api:resourcePath>
        </api:WSgetComments>;
    var result = invokeService(url, payload, "urn:WSgetComments", null);
    if (result.error) {
        log.error("Error getting the comments for resource " + path);
        return {
            error:result.error,
            comments:null
        };
    }
    var xml = result.client.responseE4X;
    var ns = "http://api.ws.registry.carbon.wso2.org";
    var ax2427 = "http://api.ws.registry.carbon.wso2.org/xsd";
    var comments = [];
    var paths = xml.ns::["return"].ax2427::path;
    var times = xml.ns::["return"].ax2427::time;
    var users = xml.ns::["return"].ax2427::user;
    var texts = xml.ns::["return"].ax2427::text;
    for (var i = 0; i < paths.length(); i++) {
        comments.push({
            path:paths[i].text().toString(),
            time:times[i].text().toString(),
            user:users[i].text().toString(),
            text:texts[i].text().toString()
        });
    }
    comments.sort(function (c1, c2) {
        return parseInt(c2.time, "10") - parseInt(c1.time, "10");
    });
    return {
        error:false,
        comments:comments
    };
}

function getReviewsFunc(path) {
    var reviews = [];
    var comments = getCommentsFunc(path);
    if (comments.error) {
        return {
            error:true,
            reviews:null
        };
    }
    comments = comments.comments;
    for (var i = 0; i < comments.length; i++) {
        var comment = comments[i];
        var rating = getRatingFunc(path, comment.user);
        reviews.push({
            path:comment.path,
            time:comment.time,
            user:comment.user,
            text:comment.text,
            rating:rating
        });
    }
    return {
        error:false,
        reviews:reviews
    };
}

function getResourceContentFunc(path) {
    var url = gregUrl + "services/ResourceAdminService.ResourceAdminServiceHttpsSoap11Endpoint/";
    log.debug(path);

    if (path.charAt(path.length - 1) == "/") {
        path = path.substring(0, path.length - 1);
    }

    var payload =
        <ser:getTextContent xmlns:ser="http://services.resource.registry.carbon.wso2.org">
            <ser:path>{path}</ser:path>
        </ser:getTextContent>

    var result = invokeService(url, payload, "urn:getTextContent", null);
    if (result.error) {
        log.error("Error while creating resource at " + path);
        return {
            error:true
        };
    }
    var xml = result.client.responseE4X;
    var services = new Array();
    var ns = "http://services.resource.registry.carbon.wso2.org";
    var content = xml.ns::["return"][0].text().toString();

    var thumbURL = content.slice(content.indexOf('<thumbURL>'), content.indexOf('</thumbURL>')).replace('<thumbURL>', '');
    var supportForumURL = content.slice(content.indexOf('<supportForumURL>'), content.indexOf('</supportForumURL>')).replace('<supportForumURL>', '');

    return {
        error:false,
        ThumbURL:thumbURL,
        supportForumURL:supportForumURL
    };
}

function getDataJSON(result, successMsg, errorMsg) {
    if (result.error) {
        return {
            error:true,
            message:errorMsg,
            data:null
        };
    }
    var data = {};
    for (var key in result) {
        if (result.hasOwnProperty(key)) {
            if (key == "error") {
                continue;
            }
            data[key] = result[key];
        }
    }
    return {
        error:false,
        message:successMsg,
        data:data
    };
}

%>
