<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  ~  Copyright (c) 2005-2008, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~  WSO2 Inc. licenses this file to you under the Apache License,
  ~  Version 2.0 (the "License"); you may not use this file except
  ~  in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  ~
  -->

<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" >

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title> WSO2 Governance Registry - Developer Guide </title>
<link href="../css/greg-docs.css" rel="stylesheet"/>
<link href="../styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
</head>
<body>
[ <a href="../docs_index.html"> Documentation Index </a> ]
<h1> WSO2 Governance Registry - Developer User Guide </h1>

<h2 id="osgi">OSGi Support</h2>
<p>
WSO2 Governance Registry is based on WSO2 Carbon, which is a fully OSGi compliant component
framework. To make the best out of the OSGi infrastructure, two main OSGi Services have been
exposed for the exclusive use of dependent components.
</p>
<ol>
    <li>
        <p>
            The Registry Service:
        </p>
        <p>
            This service exposes the Registry in two main perspectives, namely, <strong>User
            Registry</strong> and <strong>System Registry</strong>. The user model of the Governance
            Registry treats both the system and a user in a similar manner. Therefore, a System
            Registry is made available for system-level operations such as start-up, shut-down and
            managing subscriptions to notifications. And, a User Registry is made available for
            user operations such as tagging, rating, creating and deleting resources.
        </p>
        <p>
            Both the embedded and remote registry instances implement this service and developers
            are provided with a uniform interface, despite the differences in the underlying
            implementation.
        </p>
    </li>
    <li>
        <p>
            The Registry Eventing (and Notifications) Service:
        </p>
        <p>
            This service exposes the WS-Eventing and Notification capabilities of the Governance
            Registry. This service contains a number of WS-Eventing operations such as subscribing,
            unsubscribing, querying subscription status, and obtaining an instance of the underlying
            subscription manager. It also contains Notification related functionality such as
            notify, register (and query) event types, and register (and query) exclusion patterns
            for a given event type.
        </p>
        <p>
            It is required to register an event type so that front-end users can subscribe to a
            particular event type. If you want to allow restrict subscription to API level, you
            don't require registering the event type. Also, if you want to disallow subscription to
            a particular event type for a particular path or a set of paths, you can simply register
            one or more exclusion pattern for that event type.
        </p>
    </li>
</ol>

<h3 id="registry_service">The Registry Service Interface</h3>

<pre>
/**
 * This interface can be used to implement an OSGi Service of the Registry. By doing so, the
 * registry would become accessible beyond the Registry Kernel. The OSGi service also can be used as
 * means to make sure that no registry related logic executes before the registry has been fully
 * initialized, and made operational. Also, when the registry is no longer in service, all external
 * entities that use the registry would also become automatically suspended.
 */
public interface RegistryService {

    /**
     * This will return a realm specific to the tenant.
     *
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return UserRealm instance associated with the tenant id.
     * @throws RegistryException if an error occurs
     */
    UserRealm getUserRealm(int tenantId) throws RegistryException;

    ////////////////////////////////////////////////////////
    // According to the registry separation concept, there are 3 different registries..
    // 1. Local data repository - to store per instance data
    // 2. Configuration registry - to store data which should be shared among all nodes in a
    // cluster
    // 3. Governance registry - to store data which should be shared through the platform
    //
    // Following methods can be used to access the above 3 registries separately
    ////////////////////////////////////////////////////////

    /**
     * Creates a Registry instance for anonymous user which contains the entire registry tree
     * starting from '/'. Permissions set for anonymous user will be applied for all operations
     * performed using this instance.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @return Complete Registry for the anonymous user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getRegistry() throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user which contains the entire registry tree
     * starting from '/'. User name and the password will be authenticated by the EmbeddedRegistry
     * before creating the requested Registry instance.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @param userName User name of the user.
     * @param password Password of the user.
     *
     * @return Complete Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getRegistry(String userName, String password) throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user which contains the entire registry tree
     * starting from '/'. This method will NOT authenticate the user before creating the Registry
     * instance. It assumes that the user is authenticated outside the EmbeddedRegistry.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @param userName User name of the user.
     *
     * @return Complete Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getRegistry(String userName) throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user which contains the entire registry tree
     * starting from '/'. User name and the password will be authenticated by the EmbeddedRegistry
     * before creating the requested Registry instance. This method can be used to obtain instances
     * of Registry belonging to users of multiple tenants.
     *
     * @param userName User name of the user.
     * @param password Password of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return Complete Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getRegistry(String userName, String password, int tenantId)
            throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user which contains the entire registry tree
     * starting from '/'. User name and the password will be authenticated by the EmbeddedRegistry
     * before creating the requested Registry instance. This method can be used to obtain instances
     * of Registry belonging to users of multiple tenants. The returned Registry will be chrooted to
     * the given path, making it possible to use relative paths.
     *
     * @param userName User name of the user.
     * @param password Password of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     * @param chroot   to return a chrooted registry. The whole registry can be accessed by using
     *                 the chroot, '/', and a subset of the registry can be accessed by using a
     *                 chroot, '/x/y/z'. For example, the repository of the configuration local
     *                 registry can be obtained from '/_system/config/repository'.
     *
     * @return Complete Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getRegistry(String userName, String password,
                             int tenantId, String chroot) throws RegistryException;


    /**
     * Creates a Registry instance for anonymous user which contains the entire registry tree
     * starting from '/'. This method will NOT authenticate the user before creating the Registry
     * instance. It assumes that the user is authenticated outside the EmbeddedRegistry. This method
     * can be used to obtain instances of Registry belonging to users of multiple tenants.
     *
     * @param userName User name of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return Complete Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getRegistry(String userName, int tenantId) throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user which contains the entire registry tree
     * starting from '/'. This method will NOT authenticate the user before creating the Registry
     * instance. It assumes that the user is authenticated outside the EmbeddedRegistry. This method
     * can be used to obtain instances of Registry belonging to users of multiple tenants. The
     * returned Registry will be chrooted to the given path, making it possible to use relative
     * paths.
     *
     * @param userName User name of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     * @param chroot   to return a chrooted registry. The whole registry can be accessed by using
     *                 the chroot, '/', and a subset of the registry can be accessed by using a
     *                 chroot, '/x/y/z'. For example, the repository of the configuration local
     *                 registry can be obtained from '/_system/config/repository'.
     *
     * @return Complete Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getRegistry(String userName, int tenantId, String chroot) throws RegistryException;

    /**
     * Returns a registry to be used for node-specific system operations. Human users should not be
     * allowed to log in to this registry. This is the Local Repository which can only be used by
     * the system.
     *
     * This registry instance belongs to the super tenant of the system. Other tenants don't require
     * a local repository since human users are not offered an instance.
     *
     *
     * @return Local Repository for system user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getLocalRepository() throws RegistryException;

    /**
     * Returns a registry to be used for system operations. Human users should not be allowed log in
     * using this registry. This is the Configuration registry space which is used by the system.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @return Config Registry for system user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getConfigSystemRegistry() throws RegistryException;

    /**
     * Returns a registry to be used for system operations. Human users should not be allowed log in
     * using this registry. This is the Configuration registry space which is used by the system.
     *
     * @param tenantId the tenant id of the system. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return User registry for system user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getConfigSystemRegistry(int tenantId) throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user from the configuration registry space.
     * Permissions set for anonymous user will be applied for all operations performed using this
     * instance.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @return Config Registry for the anonymous user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getConfigUserRegistry() throws RegistryException;

    /**
     * Creates Registry instances for normal users from the configuration registry space.
     * Applications should use this method to create Registry instances, unless there is a specific
     * need documented in other methods. User name and the password will be authenticated by the
     * EmbeddedRegistry before creating the requested Registry instance.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @param userName User name of the user.
     * @param password Password of the user.
     *
     * @return Config Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getConfigUserRegistry(String userName, String password) throws RegistryException;

    /**
     * Creates a Registry instance for the given user from the configuration registry space. This
     * method will NOT authenticate the user before creating the Registry instance. It assumes that
     * the user is authenticated outside the EmbeddedRegistry.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @param userName User name of the user.
     *
     * @return Config Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getConfigUserRegistry(String userName) throws RegistryException;

    /**
     * Creates a Registry instance for the given user from the configuration registry space with the
     * tenant id. This method will NOT authenticate the user before creating the Registry instance.
     * It assumes that the user is authenticated outside the registry service.
     *
     * @param userName User name of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return Config Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getConfigUserRegistry(String userName, int tenantId) throws RegistryException;

    /**
     * Creates Registry instances for normal users from the configuration registry space.
     * Applications should use this method to create Registry instances, unless there is a specific
     * need documented in other methods. User name and the password will be authenticated by the
     * EmbeddedRegistry before creating the requested Registry instance.
     *
     * @param userName User name of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     * @param password Password of the user.
     *
     * @return Config Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getConfigUserRegistry(String userName, String password, int tenantId)
            throws RegistryException;

    /**
     * Creates a Registry instance for the Governance space. This is the Governance registry space
     * which is used by the system.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @return Governance Registry for system user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getGovernanceSystemRegistry() throws RegistryException;

    /**
     * Creates a Registry instance for the Governance space. This is the Governance registry space
     * which is used by the system.
     *
     * @param tenantId the tenant id of the system. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return Governance registry for system user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getGovernanceSystemRegistry(int tenantId) throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user from the Governance space. Permissions set for
     * anonymous user will be applied for all operations performed using this instance.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @return Governance Registry for the anonymous user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getGovernanceUserRegistry() throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user from the Governance space. User name and the
     * password will be authenticated by the EmbeddedRegistry before creating the requested Registry
     * instance.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @param userName User name of the user.
     * @param password Password of the user.
     *
     * @return Governance Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getGovernanceUserRegistry(String userName, String password)
            throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user from the Governance space. This method will
     * NOT authenticate the user before creating the Registry instance. It assumes that the user is
     * authenticated outside the EmbeddedRegistry.
     *
     * This registry instance belongs to the super tenant of the system.
     *
     *
     * @param userName User name of the user.
     *
     * @return Governance Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getGovernanceUserRegistry(String userName) throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user from the Governance space. User name and the
     * password will be authenticated by the EmbeddedRegistry before creating the requested Registry
     * instance. This method can be used to obtain instances of Registry belonging to users of
     * multiple tenants.
     *
     * @param userName User name of the user.
     * @param password Password of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return Governance Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getGovernanceUserRegistry(String userName, String password, int tenantId)
            throws RegistryException;

    /**
     * Creates a Registry instance for anonymous user from the Governance space. This method will
     * NOT authenticate the user before creating the Registry instance. It assumes that the user is
     * authenticated outside the EmbeddedRegistry. This method can be used to obtain instances of
     * Registry belonging to users of multiple tenants.
     *
     * @param userName User name of the user.
     * @param tenantId tenant id of the user tenant. The tenant id '0', corresponds to the super
     *                 tenant of the system, whereas identifiers greater than '0' correspond to
     *                 valid tenants.
     *
     * @return Governance Registry instance for the given user.
     * @throws RegistryException if an error occurs
     */
    UserRegistry getGovernanceUserRegistry(String userName, int tenantId) throws RegistryException;
}
</pre>

<h3 id="registry_eventing_service">The Registry Eventing Service Interface</h3>

<pre>
public interface EventingService extends NotificationService {

    /**
     * Retrieves subscription manager.
     *
     * @return an instance of the subscription manager associated with the internal event source.
     */
    public SubscriptionManager getSubscriptionManager() throws EventException;

    /**
     * Retrieves remote subscription manager.
     *
     * @param userName the user name used to connect to the remote registry.
     * @param remoteURL the URL of the remote registry.
     * @return an instance of the subscription manager associated with the remote event source.
     */
    public SubscriptionManager getSubscriptionManager(String userName, String remoteURL)throws EventException;

    /**
     * Retrieves the URL of the associated subscription manager.
     *
     * @return URL of the associated subscription manager.
     */
    public String getSubscriptionManagerUrl();

    /**
     * Creates a subscription.
     *
     * @param subscription subscription object to add.
     * @return unique identifier corresponding to the subscription made.
     */
    public String subscribe(Subscription subscription);

    /**
     * Creates a remote subscription.
     *
     * @param subscription subscription object to add.
     * @param userName the user name used to connect to the remote registry.
     * @param remoteURL the URL of the remote registry.
     * @return unique identifier corresponding to the subscription made.
     */
    public String subscribe(Subscription subscription, String userName, String remoteURL);

    /**
     * Retrieves the subscription corresponding to the given unique identifier.
     *
     * @param id unique identifier.
     * @return the corresponding subscription.
     */
    public Subscription getSubscription(String id);

    /**
     * Retrieves the remote subscription corresponding to the given unique identifier.
     *
     * @param id unique identifier.
     * @param userName the user name used to connect to the remote registry.
     * @param remoteURL the URL of the remote registry.
     * @return the corresponding subscription.
     */
    public Subscription getSubscription(String id, String userName, String remoteURL);

    /**
     * Remove subscription corresponding to the given unique identifier.
     *
     * @param id unique identifier.
     * @return the status of the operation.
     */
    public boolean unsubscribe(String id);

    /**
     * Remove subscription corresponding to the given unique identifier.
     *
     * @param id unique identifier.
     * @param userName the user name used to connect to the remote registry.
     * @param remoteURL the URL of the remote registry.
     * @return the status of the operation.
     */
    public boolean unsubscribe(String id, String userName, String remoteURL);
}
</pre>
    
</body>
</html>
