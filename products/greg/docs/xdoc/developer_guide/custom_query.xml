<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  ~  Copyright (c) 2005-2008, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~  WSO2 Inc. licenses this file to you under the Apache License,
  ~  Version 2.0 (the "License"); you may not use this file except
  ~  in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  ~
  -->

<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" >

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title> WSO2 Governance Registry - Developer Guide - Custom Query</title>
<link href="../css/greg-docs.css" rel="stylesheet"/>
<link href="../styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
</head>
<body>
[ <a href="../docs_index.html"> Documentation Index </a> ]
<h1> WSO2 Governance Registry - Developer User Guide - Custom Query</h1>

<h2 id="overview">Overview</h2>

<p>

Custom Queries interface allows you to search the registry using a custom sql queries. In a custom query you

are expected to return one of following items.

</p>



<ul>

<li>

Resources

</li>

<li>

Comments

</li>

<li>

Ratings

</li>

<li>

Tags

</li>

</ul>



<h2 id="query_resource">Querying for Resources</h2>

<p>

In Querying resources you will be working on the 'REG_RESOURCE' table. 'REG_RESOURCE' table contains the following fields.

</p>



<table border="1px">

<tr class="title"><td>REG_RESOURCE</td></tr>

<tr><td>REG_PATH_ID</td></tr>

<tr><td>REG_NAME</td></tr>

<tr><td>REG_VERSION</td></tr>

<tr><td>REG_MEDIA_TYPE</td></tr>

<tr><td>REG_CREATOR</td></tr>

<tr><td>REG_CREATED_TIME</td></tr>

<tr><td>REG_LAST_UPDATOR</td></tr>

<tr><td>REG_LAST_UPDATED_TIME</td></tr>

<tr><td>REG_DESCRIPTION</td></tr>

<tr><td>REG_CONTENT_ID</td></tr>

</table>



<p>

In order to return a resource, you always need to return the REG_PATH_ID, REG_NAME in your custom query. This is because (REG_PATH_ID, REG_NAME) fields together act as an

id for the resource.

</p>



<p>

Example1: Following query will returns one or more resources that has a given pattern in the description

</p>

<pre>

<em>SELECT REG_PATH_ID, REG_NAME FROM REG_RESOURCE WHERE REG_DESCRIPTION LIKE ?</em>

</pre>



<p>

Example2: A code snippet that do a custom query.

</p>



<pre>

    // first you should put a resource with the content as the query 

        String sql1 = "SELECT REG_PATH_ID, REG_NAME FROM REG_RESOURCE WHERE REG_DESCRIPTION LIKE ?";

        Resource q1 = registry.newResource();

        q1.setContent(sql1);

        q1.setMediaType(RegistryConstants.SQL_QUERY_MEDIA_TYPE);

        q1.addProperty(RegistryConstants.RESULT_TYPE_PROPERTY_NAME,

                RegistryConstants.RESOURCES_RESULT_TYPE);

        registry.put(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", q1);



    // then you should give the parameters and the query location you just put

        Map parameters = new HashMap();

        parameters.put("1", "%service%");

        Resource result = registry.executeQuery(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", parameters);

    String[] paths = (String[])result.getContent();

</pre>





<h3 id="#query_resource_properties">Querying for Resources By Properties</h3>

<p>

You can query for resources by a special property values. Before that we we will check the schema of the properties tables.

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="3">REG_PROPERTY</td>

</tr>

<tr>

<td>REG_ID</td>

<td>REG_NAME</td>

<td>REG_VALUE</td>

</tr>

</table>

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_RESOURCE_PROPERTY</td>

</tr>

<tr>

<td>REG_PROPERTY_ID</td>

<td>REG_VERSION</td>

<td>REG_PATH_ID</td>

<td>REG_RESOURCE_NAME</td>

</tr>

</table>

</p>



<p>

There are two modes that properties are stored. If the properties versioning is set 'true' (which is the default), the foreign key relationship

happens in the following way.

</p>



<p><img src="../images/properties-tables.png"/></p>

<p> Figure 1 : Foreign key structure for properties table - (Versioning properties set to 'true')</p>



<p>

Example3: Following query will returns one or more resources that has a given property.

</p>

<pre>

<em>SELECT R.REG_PATH_ID, R.REG_NAME FROM REG_RESOURCE R, REG_PROPERTY PP, REG_RESOURCE_PROPERTY RP WHERE 

R.REG_VERSION=RP.REG_VERSION AND RP.REG_PROPERTY_ID=PP.REG_ID AND PP.REG_NAME=? AND PP.REG_VALUE=?

</em>

</pre>



<p>

If the versioning properties is set to 'false', then the foreign key in focus are

</p>



<p><img src="../images/properties-tables-no-versioned.png"/></p>

<p> Figure 2 : Foreign key structure for properties table - (Versioning properties set to 'false')</p>



<p>

In this mode you should write separate queries to retrieve collections and non-collections.

</p>

<p>

Example4: Following query will returns one or more non-collections that has a given property.

</p>

<pre>

<em>SELECT R.REG_PATH_ID, R.REG_NAME FROM REG_RESOURCE R, REG_PROPERTY PP, REG_RESOURCE_PROPERTY RP WHERE 

R.REG_PATH_ID=RP.REG_PATH_ID AND R.REG_NAME=RP.REG_RESOURCE_NAME AND RP.REG_PROPERTY_ID=PP.REG_ID AND PP.REG_NAME=? AND PP.REG_VALUE=?

</em>

</pre>



<p>

Example5: Following query will returns one or collections that has a given property.

</p>

<pre>

<em>SELECT R.REG_PATH_ID, R.REG_NAME FROM REG_RESOURCE R, REG_PROPERTY PP, REG_RESOURCE_PROPERTY RP WHERE 

R.REG_PATH_ID=RP.REG_PATH_ID AND R.REG_NAME IS NULL AND RP.REG_RESOURCE_NAME IS NULL AND 

RP.REG_PROPERTY_ID=PP.REG_ID AND PP.REG_NAME=? AND PP.REG_VALUE=?

</em>

</pre>





<h3 id="query_resource_tag">Querying for Resources By Tag</h3>

<p>

The Table structure to store tags is in the same pattern as the tables for store properties. Here is the table structure

for tags.

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_TAG</td>

</tr>

<tr>

<td>REG_ID</td>

<td>REG_TAG_NAME</td>

<td>REG_USER_ID</td>

<td>REG_TAGGED_TIME</td>

</tr>

</table>

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_RESOURCE_TAG</td>

</tr>

<tr>

<td>REG_TAG_ID</td>

<td>REG_VERSION</td>

<td>REG_PATH_ID</td>

<td>REG_RESOURCE_NAME</td>

</tr>

</table>

</p>



<p>

Similar to properties, tags are also stored in two modes. Here is when versioning tags are set to 'true'.

</p>



<p><img src="../images/tags-table.png"/></p>

<p> Figure 1 : Foreign key structure for tags table - (Versioning properties set to 'true')</p>



<p>

Example6: Following query will returns one or more resources that has a given tag.

</p>

<pre>

<em>

SELECT R.REG_PATH_ID, R.REG_NAME FROM REG_RESOURCE R, REG_TAG T, REG_RESOURCE_TAG RT WHERE R.REG_VERSION=RT.REG_VERSION 

AND RT.REG_TAG_ID=T.REG_ID AND T.REG_TAG_NAME=?

</em>

</pre>



<p>

If the versioning tags is set to 'false', then the foreign key in focus is

</p>



<p><img src="../images/tags-tables-no-versioned.png"/></p>

<p> Figure 2 : Foreign key structure for tags table - (Versioning tags set to 'false')</p>



<p>

In this mode you should write separate queries to retrieve collections and non-collections.

</p>

<p>

Example7: Following query will returns one or more non-collections that has a given tag.

</p>

<pre>

<em>

SELECT R.REG_PATH_ID, R.REG_NAME FROM REG_RESOURCE R, REG_TAG T, REG_RESOURCE_TAG RT WHERE R.REG_NAME=RT.REG_RESOURCE_NAME AND

R.REG_PATH_ID=RT.REG_PATH_ID AND RT.REG_TAG_ID=T.REG_ID AND T.REG_TAG_NAME=?

</em>

</pre>



<p>

Example8: Following query will returns one or collections that has a given tag.

</p>

<pre>

<em>

SELECT R.REG_PATH_ID, R.REG_NAME FROM REG_RESOURCE R, REG_TAG T, REG_RESOURCE_TAG RT WHERE 

R.REG_PATH_ID=RT.REG_PATH_ID AND R.REG_NAME IS NULL AND RT.REG_RESOURCE_NAME IS NULL AND RT.REG_TAG_ID=T.REG_ID AND T.REG_TAG_NAME=?

</em>

</pre>





<h2 id="query_rating">Querying for Ratings</h2>

<p>

In Querying rating you will be working on the 'REG_RATING' and 'REG_RESOURCE_RATING' tables. Here are the table structure related to ratings.

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_RATING</td>

</tr>

<tr>

<td>REG_ID</td>

<td>REG_RATING</td>

<td>REG_USER_ID</td>

<td>REG_RATED_TIME</td>

</tr>

</table>

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_RESOURCE_RATING</td>

</tr>

<tr>

<td>REG_RATING_ID</td>

<td>REG_VERSION</td>

<td>REG_PATH_ID</td>

<td>REG_RESOURCE_NAME</td>

</tr>

</table>

</p>



<p>

Example9:

Here is an example of query to return ratings of a resource(non-collections) which is authored by a given name. 

</p>



<pre>

<em>

SELECT RT.REG_RATING_ID FROM REG_RESOURCE_RATING RT, REG_RESOURCE R

WHERE (R.REG_VERSION=RT.REG_VERSION OR

(R.REG_PATH_ID=RT.REG_PATH_ID AND R.REG_NAME=RT.REG_RESOURCE_NAME))

AND R.REG_CREATOR=?

</em>

</pre>



<p>

Example10:

A code snippet that execute this query and print the result rating values.

</p>



<pre>

        String sql1 = "SELECT RT.REG_RATING_ID FROM REG_RESOURCE_RATING RT, REG_RESOURCE R " +

                "WHERE (R.REG_VERSION=RT.REG_VERSION OR " +

                "(R.REG_PATH_ID=RT.REG_PATH_ID AND R.REG_NAME=RT.REG_RESOURCE_NAME)) " +

                "AND R.REG_AUTHOR=?";

        Resource q1 = registry.newResource();

        q1.setContent(sql1);

        q1.setMediaType(RegistryConstants.SQL_QUERY_MEDIA_TYPE);

        q1.addProperty(RegistryConstants.RESULT_TYPE_PROPERTY_NAME,

                RegistryConstants.RATINGS_RESULT_TYPE);

        registry.put(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", q1);



        Map parameters = new HashMap();

        parameters.put("1", "admin");

        Collection result = registry.executeQuery(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", parameters);



    for (String ratingPath: result.getChildren()) {

        String ratingResource = registry.get(ratingPath);

        System.out.println(ratingResource.getContent());

    }

</pre>

<p>

Note that when you are putting the query as a resource you should set the property "RESULT_TYPE_PROPERTY_NAME" to

"RATINGS_RESULT_TYPE".

</p>



<h2 id="query_comments">Querying for Comments</h2>



<p>

Here is the table structure related to comments.

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_COMMENT</td>

</tr>

<tr>

<td>REG_ID</td>

<td>REG_COMMENT_TEXT</td>

<td>REG_USER_ID</td>

<td>REG_COMMENT_TIME</td>

</tr>

</table>

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_RESOURCE_COMMENT</td>

</tr>

<tr>

<td>REG_COMMENT_ID</td>

<td>REG_VERSION</td>

<td>REG_PATH_ID</td>

<td>REG_RESOURCE_NAME</td>

</tr>

</table>

</p>



<p>

Example11:

Here is an example query to search comments on resources (non-collections) that has a description with a given pattern.

</p>



<pre>

<em>

SELECT RC.REG_COMMENT_ID FROM REG_RESOURCE_COMMENT RC, REG_RESOURCE R

WHERE (R.REG_VERSION=RC.REG_VERSION OR

(R.REG_PATH_ID=RC.REG_PATH_ID AND R.REG_NAME=RC.REG_RESOURCE_NAME))

AND R.REG_DESCRIPTION LIKE ?

</em>

</pre>



<p>

Example12:

The code to execute this query. Note that you have to set RESULT_TYPE_PROPERTY_NAME to COMMENTS_RESULT_TYPE.

</p>



<pre>

        String sql1 = "SELECT RC.REG_COMMENT_ID FROM REG_RESOURCE_COMMENT RC, REG_RESOURCE R " +

                        "WHERE (R.REG_VERSION=RC.REG_VERSION OR " +

                        "(R.REG_PATH_ID=RC.REG_PATH_ID AND R.REG_NAME=RC.REG_RESOURCE_NAME)) " +

                        "AND R.REG_DESCRIPTION LIKE ?";

               

        Resource q1 = registry.newResource();

        q1.setContent(sql1);

        q1.setMediaType(RegistryConstants.SQL_QUERY_MEDIA_TYPE);

        q1.addProperty(RegistryConstants.RESULT_TYPE_PROPERTY_NAME,

                RegistryConstants.COMMENTS_RESULT_TYPE);

        registry.put(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", q1);



        Map parameters = new HashMap();

        parameters.put("1", "%production%");

        Collection result = registry.executeQuery(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", parameters);



    for (String commentPath: result.getChildren()) {

        String commentResource = registry.get(commentPath);

        System.out.println(commentResource.getContent()));

    }

</pre>





<h2 id="query_tags">Querying for Tags</h2>



<p>

Here is the table structure related to Tags.

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_TAG</td>

</tr>

<tr>

<td>REG_ID</td>

<td>REG_TAG_NAME</td>

<td>REG_USER_ID</td>

<td>REG_TAGGED_TIME</td>

</tr>

</table>

</p>



<p>

<table border="1px">

<tr class="title">

<td colspan="4">REG_RESOURCE_TAG</td>

</tr>

<tr>

<td>REG_TAG_ID</td>

<td>REG_VERSION</td>

<td>REG_PATH_ID</td>

<td>REG_RESOURCE_NAME</td>

</tr>

</table>

</p>



<p>

Example13:

Here is an example query to search tags on resources (non-collections) that has a description with a given pattern.

</p>



<pre>

<em>

SELECT RT.REG_TAG_ID FROM REG_RESOURCE_TAG RT, REG_RESOURCE R 

WHERE (R.REG_VERSION=RT.REG_VERSION OR 

(R.REG_PATH_ID=RT.REG_PATH_ID AND R.REG_NAME=RT.REG_RESOURCE_NAME))

AND R.REG_DESCRIPTION LIKE ?

</em>

</pre>



<p>

Example14:

The code to execute this query. Note that you have to set RESULT_TYPE_PROPERTY_NAME to TAG_RESULT_TYPE.

</p>



<pre>



        String sql1 = "SELECT RT.REG_TAG_ID FROM REG_RESOURCE_TAG RT, REG_RESOURCE R " +

                "WHERE (R.REG_VERSION=RT.REG_VERSION OR " +

                "(R.REG_PATH_ID=RT.REG_PATH_ID AND R.REG_NAME=RT.REG_RESOURCE_NAME)) " +

                "AND R.REG_DESCRIPTION LIKE ?";

               

        Resource q1 = registry.newResource();

        q1.setContent(sql1);

        q1.setMediaType(RegistryConstants.SQL_QUERY_MEDIA_TYPE);

        q1.addProperty(RegistryConstants.RESULT_TYPE_PROPERTY_NAME,

                RegistryConstants.TAGS_RESULT_TYPE);

        registry.put(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", q1);



        Map parameters = new HashMap();

        parameters.put("1", "%production%");

        Collection result = registry.executeQuery(RegistryConstants.CONFIG_REGISTRY_BASE_PATH + RegistryConstants.QUERIES_COLLECTION_PATH + "/custom-queries", parameters);



        for (String tagPath: result.getChildren()) {

        String tagResource = registry.get(tagPath);

        System.out.println(tagResource.getContent()));

    }

</pre>


</body>

</html>
