<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  ~  Copyright (c) 2005-2008, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~  WSO2 Inc. licenses this file to you under the Apache License,
  ~  Version 2.0 (the "License"); you may not use this file except
  ~  in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  ~
  -->

<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" >

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
    <title>
      WSO2 Governance Registry - WS API
    </title>
    <link href="../css/greg-docs.css" rel="stylesheet"/>
    <link href="../styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body xml:lang="en">
    [ <a href="../docs_index.html"> Documentation Index </a> ]
    <h1>
      Web Services API of the WSO2 Governance Registry
    </h1>
    <p>
        The operations of the WSO2 Governance Registry can now be accessed through Web Service calls using the Web Service API (WS-API). The WS-API supports almost all operations exposed through the main Registry API. A WS client is provided for the WS-API which allows you to access the Registry just as you would through the main Registry API.        
     </p>

    <h2>
      Setting up the WS API Registry Client
    </h2>  

    <p>
     The following code shows how to set up the WS Client and authenticate it against an instance of the Governance Registry. <b>NOTE: It is assumed that default configurations of the Registry have not been changed.</b> 
      <br/>
      <br/>
     First, we have to set the system properties to enable the https connection. 
      <br/>
      <br/>
        
      <pre>String GREG_HOME = /path/to/Governance_Registry</pre>
      <pre>System.setProperty("javax.net.ssl.trustStore", "GREG_HOME/repository/resources/security/client-truststore.jks");</pre>
       <pre>System.setProperty("javax.net.ssl.trustStorePassword", "wso2carbon");</pre>
        <pre>System.setProperty("javax.net.ssl.trustStoreType","JKS");</pre>
          
     
    </p>
    <br/>
    <p>
	A number of parameters are required to initialize the client. These are initialized in the following code:
	<br/>
      <br/>
      <pre>String axis2Repo = GREG_HOME + "/repository/deployment/client";</pre>
      <pre>String axis2Conf = GREG_HOME + "/repository/conf/axis2/axis2_client.xml";</pre>
      <pre>ConfigurationContext configContext = ConfigurationContextFactory.createConfigurationContextFromFileSystem(axis2Repo, axis2Conf);</pre>
    </p>
    <br/>
    <p> The final steps of the initialization is done in the following code segment:
    <br/>
    <br/>
      <pre>String username = "admin";</pre>
      <pre>String password = "admin";</pre>
      <pre>String serverURL = "https://localhost:9443/services/";</pre>
      <br/>

            <pre>WSRegistryServiceClient registry = new WSRegistryServiceClient(serverURL, username, password, configContext);</pre>
        <br/>
	</p>
	
	<p>Please run an "ant" command at GREG_HOME/bin and add all the jars created in GREG_HOME/repository/lib to the class path prior to running the examples in this guide.</p>
	<p>Now, if you now run this example, an output similar to the following output will be generated at the server side console
	<br/>
		<img src="../images/ws-api-admin-login.png" alt="Console output for Admin login through WS-API" width="50%"/>
		
	</p>
	<br/>
	<br/>
	<p>This client instance can now be used just as using the Registry API. Some of the possible operations are illustrated below:</p> 
	
	<h3>Adding a resource to the registry</h3>
        <pre>Resource r1 = registry.newResource();</pre>
       <pre>String path = "/dev_guide/r1";</pre>
       <pre>String r1content =  "R1 content";</pre>
        <pre>r1.setContent(r1content);</pre>
        <pre>registry.put(path, r1);</pre>
	<br/>
	<img src="../images/ws-api-resource-added.png" alt="View of added resource displayed in web browser" width="50%"/>
	<br/>
	
	<h3>Commenting, tagging and rating a resource</h3>
	
	<pre>registry.addComment(path, new Comment("This is a WS-API comment"));</pre>
    <pre>registry.rateResource(path, 5);</pre>
    <pre>registry.applyTag(path, "WS tag");</pre>
	<br/>
	<img src="../images/ws-api-comment.png" alt="Added comment, rating and tag displayed in web browser" width="50%"/>
	<br/>
	
	<h3>Moving and renaming a resource</h3>
	
	<pre>String newPath = "/dev_guide_new/r1_move";</pre>
	<pre>registry.move(path, newPath);</pre>
    <pre>registry.rename(newPath, "r2_renamed");</pre>
	<br/>
	<img src="../images/ws-api-move.png" alt="View of moved resource displayed in web browser" width="50%"/>
	<br/>
	<br/>

	<h3>Retrieving the resource's content</h3>
	<pre>Resource resource = registry.get("/dev_guide_new/r2_renamed");</pre>
	<pre>System.out.println(new String((byte[])resource.getContent()));</pre>
	<p>This will output the original content to the console, i.e. <b>"R1 content"</b></p>

	<h2>Setting up WS-Security for the WS-API</h2>
    <p>To add WS-Security for the WS-API, just name the relevant policy file as <b><i>"ws-api-sec-policy.xml"</i></b> and place it into GREG_HOME/repository/conf. WS-Security will now be engaged!</p>
    
    
  </body>
</html>
