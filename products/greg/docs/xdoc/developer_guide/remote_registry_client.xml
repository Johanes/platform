<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  ~  Copyright (c) 2005-2008, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~  WSO2 Inc. licenses this file to you under the Apache License,
  ~  Version 2.0 (the "License"); you may not use this file except
  ~  in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  ~
  -->

<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" >

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title> WSO2 Governance Registry - Developer Guide </title>
<link href="../css/greg-docs.css" rel="stylesheet"/>
<link href="../styles/dist-docs.css" rel="stylesheet" type="text/css" media="all"/>
</head>
<body>
[ <a href="../docs_index.html"> Documentation Index </a> ]
<h1> WSO2 Governance Registry - Developer User Guide </h1>
    <h1>

      Accessing Registry Remotely through an API - RemoteRegistry

    </h1>

    <p>

        In simple words, the RemoteRegistry is a Java API for interacting with a Registry instance. Regardless of where a given Registry instance is located, either locally or remotely, we can still talk to it using RemoteRegistry. 

        The RemoteRegistry is yet another implementation of org.wso2.registry.Registry interface. However, the difference between the RemoteRegistry and a standard Registry is that, the RemoteRegistry is not an actual registry 

        but a client for interacting with a registry instance.

        <br/>

        <br/>  

        Communication between the Registry and the RemoteRegistry takes place using the Atom Publishing Protocol (APP). When we start the registry server, an atom feed is generated . 

        Thereafter, if you browse https://localhost:9443/registry/atom/ (this address changes depending on your application server settings), you'd be able to see the atom feed from the registry. The structure and format

        of the feed is described in the following location: http://www.wso2.org/wiki/display/registry/Registry+Protocol.

     </p>



    <h2>

      How to Create an Instance of the RemoteRegistry

    </h2>  



    <p>

      To create an instance of the RemoteRegistry, what we need first is the URL of a registry. If the root of the registry is http://foo.com/, the URL for the RemoteRegistry instance would be http://foo.com/registry/atom. 

      Once we have the URL figured out, we can create an instance of the RemoteRegistry using the following code:

      <br/>

      <br/>

      <pre>System.setProperty("javax.net.ssl.trustStore", "GREG_HOME/repository/resources/security/client-truststore.jks");</pre>

       <pre>System.setProperty("javax.net.ssl.trustStorePassword", "wso2carbon");</pre>

        <pre>System.setProperty("javax.net.ssl.trustStoreType","JKS");</pre>

          

        <pre>RemoteRegistry remote_registry = new RemoteRegistry(new URL("https://localhost:9443/registry"));</pre>

    </p>

    <p>

      Creating an instance of the RemoteRegistry in this manner, is similar to accessing a registry without login into it with communication taking place as an anonymous user.

    </p>

    <p>

      If you have a user name and password for the registry, you can pass them along when creating the remote_registry instance. At that point, all permissions granted for the particular username/password pair 

     will apply to the owner of the remote_registry instance. Creating the remote_registry with user name and the password can be done using:

    <br/>

    <br/>

      <pre>RemoteRegistry remote_registry = new RemoteRegistry(new URL("https://localhost:9443/registry"), "admin", "admin");
      </pre> 

      In this example, we have created the remote_registry instance with username="admin" and the password as also "admin".

    </p>  

<h2>
Using the Registry API
</h2>
<p>
You can learn how to use Registry API from the <a href="registry_api.html">Registry API guide</a>.
</p>
 
    <h2>

      Importing the Local File System to the Registry

    </h2>

    <p>

      We can use the RemoteRegistry to export our entire local file system into the Registry. What we need to do is to give the location of the file system and the location where we want to put them in the Registry. 

      Once we do that, inside the registry it will create the same structure as the file system and upload all files into the Registry. We can consider this as any check-in operation on any kind of version management 

      system. Following code demonstrates how to import a local file system into the Registry:

      <br/>

      <pre>File file = new File("Path of the file");

RemoteRegistry remote_registry = new RemoteRegistry(new URL("http://localhost:9443/registry"), "admin", "admin");

RegistryClientUtils.importToRegistry(file ,"/myFile/filesystem" ,remote_registry);</pre>

    </p>

    <h2>

      Exporting the Registry to a File System

    </h2>

    <p>

      In the previous section, we discussed how to import a local file system into the Registry. There is another way round of this and it is to check-out the Registry to a local file system. To export, we can select 

      either the entire Registry or a selected node. Depending on the node we select, the remote_registry instance will create the same structure within the file system. Even if we have the resource with binary data, 

      then it will create all of the necessary files in the file system.

      <br/>

      <br/>

      Let's say we want to export "/myFile/filesystem" into my local file system then we can use the following code:

      <pre>File toFile = new File("Path of the new file");

RemoteRegistry remote_registry = new RemoteRegistry(new URL("http://localhost:9443/registry"), "admin", "admin");

RegistryClientUtils.exportFromRegistry( toFile, "/myFile/filesystem" ,remote_registry);</pre>



    </p>
</body>
</html>
