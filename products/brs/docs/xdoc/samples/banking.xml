<?xml version="1.0" encoding="iso-8859-1"?>
<!--
~ Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~ WSO2 Inc. licenses this file to you under the Apache License,
~ Version 2.0 (the "License"); you may not use this file except
~ in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing,
~ software distributed under the License is distributed on an
~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~ KIND, either express or implied. See the License for the
~ specific language governing permissions and limitations
~ under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  <title>WSO2 BRS - Samples Banking Service</title>
  <link href="../css/brs-docs.css" rel="stylesheet" />
  <link href="../styles/dist-docs.css" rel="stylesheet" type="text/css"
  media="all" />
</head>

<body>
<p>[<a href="../docs_index.html">Documentation Index</a>] 
<h1>WSO2 BRS - Samples : Banking Service</h1>

<p>This guide demonstrates a simple banking application which uses business
rules.</p>

<p>Please follow the <a href="../user_guide.html">User Guide</a> before proceeding with this sample, if you have
not already followed the <a href="../user_guide.html">User Guide</a>. </p>

<h2>Contents</h2>

<div class="toc">
<ul>
  <li><a href="#BankingSample">Banking Service</a> </li>
  <li><a href="#References">References</a> </li>
</ul>
</div>

<h2 id="BankingSample">Banking Sample</h2>
This sample should be deployed in a stateful axis2 session - i.e. session scope
or transport scope. This demonstrates the stateful behavior of a rule session . 
<h3>Rules</h3>

<p>Rule 1: Withdrawing is only allowed if the account balance is higher than
the requested amount</p>

<p>Rule 2: 5% credits is given if the deposit is higher than 1000 </p>

<h3>Facts</h3>

<p>There are two facts - <i>A customer made a deposit request</i> and <i>A
customer made a withdraw request</i>.</p>
</p>

<p>Because, this is a stateful session, we have to remove any object that
should not be in the working memory after a one-rule execution. In order to do
that, you have to annotate the classes that should be removed after each rule
execution, with <strong>@TransientObject()</strong>. This requires you to have
<strong>org.wso2.carbon.rule.core-3.0.0.jar</strong> in the class path. From
the next release, we may introduce other ways to specifying transient behavior
of an object in the working memory. </p>

<p><pre xml:space="preserve">              </pre>
<pre xml:space="preserve">package samples.banking;

/**
 * Account
 */
public class Account {

    private String accountNumber;

    private int balance;

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public int getBalance() {
        return balance;
    }

    public void setBalance(int balance) {
        this.balance = balance;
    }

    public void increment(int value) {
        balance += value;
    }

    public void decrement(int value) {
        balance -= value;
    }
}

package samples.banking;

import org.wso2.carbon.rule.core.TransientObject;

/**
 * Deposit fact
 */
@TransientObject()
public class Deposit {

    private String accountNumber;
    private int amount;

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }
}

package samples.banking;

import org.wso2.carbon.rule.core.TransientObject;

/**
 * DepositAccept facts
 */
@TransientObject()
public class DepositAccept {

    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}

package samples.banking;

import org.wso2.carbon.rule.core.TransientObject;

/**
 * Withdraw fact
 */
@TransientObject()
public class Withdraw {

    private String accountNumber;

    private int amount;

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }
}

package samples.banking;

import org.wso2.carbon.rule.core.TransientObject;

/**
 * WithdrawAccept fact
 */
@TransientObject()
public class WithdrawAccept {

    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}

package samples.banking;

import org.wso2.carbon.rule.core.TransientObject;

/**
 * WithdrawReject fact
 */
@TransientObject()
public class WithdrawReject {

    private String reason;

    public String getReason() {
        return reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }
}

            </pre>

<h3>Drools Rule File - banking.drl</h3>
<pre xml:space="preserve">package Banking;

import samples.banking.Account;
import samples.banking.Deposit;
import samples.banking.DepositAccept;
import samples.banking.WithdrawAccept;
import samples.banking.WithdrawReject;
import samples.banking.Withdraw;

rule "Deposit with amount higher than 1000 in an Existing Account" dialect "mvel" no-loop true salience 6

when
$deposit : Deposit( amount &gt; 1000 )
$account : Account( accountNumber == $deposit.accountNumber )
then
$account.increment($deposit.amount * 1.05);
DepositAccept depositAccept = new DepositAccept();
depositAccept.setMessage("Deposit was successfully done. 5 percentage credits is given because the deposit amount is higher than 1000. Amount was : " + $deposit.amount + ". Your account balance is now : "+ $account.balance);

insertLogical(depositAccept);
end

rule "Deposit with amount higher than 1000 in a new Account" dialect "mvel" no-loop true salience 5

when
$deposit : Deposit( amount &gt; 1000)
not( Account( accountNumber == $deposit.accountNumber ) )
then
Account account = new Account();
account.setAccountNumber($deposit.accountNumber);
account.increment($deposit.amount * 1.05);
DepositAccept depositAccept = new DepositAccept();
depositAccept.setMessage("Deposit was successfully done.5 percentage credits is given because the deposit amount is higher than 1000. Amount was : " + $deposit.amount + ". Your account balance is now : "+ account.balance);
retract($deposit);
insert(account);
insertLogical(depositAccept);
end

rule "Deposit in an Existing Account" dialect "mvel" no-loop true salience 4

when
$deposit : Deposit( amount &lt;= 1000 )
$account : Account( accountNumber == $deposit.accountNumber )
then
$account.increment($deposit.amount);
DepositAccept depositAccept = new DepositAccept();
depositAccept.setMessage("Deposit was successfully done. 5 percentage credits would be given if the deposit amount was higher than 1000. Amount was : " + $deposit.amount + ". Your account balance is now : "+ $account.balance);

insertLogical(depositAccept);
end

rule "Deposit in a new Account" dialect "mvel" no-loop true salience 3

when
$deposit : Deposit( amount &lt;= 1000)
not( Account( accountNumber == $deposit.accountNumber) )
then
Account account = new Account();
account.setAccountNumber($deposit.accountNumber);
account.increment($deposit.amount);
DepositAccept depositAccept = new DepositAccept();
depositAccept.setMessage("Deposit was successfully done.5 percentage credits would be given if the deposit amount was higher than 1000. Amount was : " + $deposit.amount + ". Your account balance is now : "+ account.balance);

retract($deposit);
insert(account);
insertLogical(depositAccept);

end

rule "Withdrawing Allow" dialect "mvel" no-loop true salience 2

when
$withdraw : Withdraw()
$account : Account( accountNumber == $withdraw.accountNumber )
eval($account.balance &gt; $withdraw.amount)
then
$account.decrement($withdraw.amount);
WithdrawAccept withdrawAccept = new WithdrawAccept();
withdrawAccept.setMessage("Withdraw was successfully done. Amount was : " + $withdraw.amount + ". Your new account balance is : "+ $account.balance);
insertLogical(withdrawAccept);
end

rule "Withdrawing Deny" dialect "mvel" no-loop true salience 1

when
$withdraw : Withdraw()
$account : Account( accountNumber == $withdraw.accountNumber )
eval($account.balance &lt; $withdraw.amount)
then

WithdrawReject withdrawReject = new WithdrawReject();
withdrawReject.setReason("Withdrawing is only allowed if the account balance is higher than the requested amount. Your account balance is : "+ $account.balance);
insertLogical(withdrawReject);
end
                  </pre>

<h3>Rule Service Configuration - BankingService.rsl</h3>
<pre xml:space="preserve">&lt;ruleService name="BankingService"&gt;
    &lt;description&gt;BankingService&lt;/description&gt;
    &lt;ruleset path="banking.drl"/&gt;
    &lt;operation name="withDraw"&gt;
        &lt;with-param type="samples.banking.Withdraw"/&gt;
        &lt;result name="withDrawResult"&gt;
            &lt;element type="samples.banking.WithdrawAccept"/&gt;
            &lt;element type="samples.banking.WithdrawReject"/&gt;
        &lt;/result&gt;
    &lt;/operation&gt;
    &lt;operation name="deposit"&gt;
        &lt;with-param type="samples.banking.Deposit"/&gt;
        &lt;result name="depositResult"&gt;            
            &lt;element type="samples.banking.DepositAccept"/&gt;
        &lt;/result&gt;
    &lt;/operation&gt;
&lt;/ruleService&gt;</pre>
</p>

<h3>Axis2 Service Configuration - services.xml </h3>
<pre>&lt;service name="BankingService" scope="transportsession"&gt;   
    &lt;operation name="withDraw"/&gt;
    &lt;operation name="deposit"/&gt;
&lt;/service&gt;</pre>

<h3>Deploying Service </h3>

<p>You can either create an .aar file and upload or create a rule service using
rule service wizard UI. Please refer User Guide for more information.</p>

<p><h3>Testing Sample</h3>
You can use Try-it tool with the requests similar to the following. Please as
the first step do a deposit. Then after you can do withdrawing. </p>

<p>Make a Deposit </p>

<p><pre xml:space="preserve">&lt;amount&gt;2432&lt;/amount&gt;
&lt;accountNumber&gt;330021vc&lt;/accountNumber&gt;</pre>
</p>

<p>Make a withdraw </p>
<pre>&lt;amount&gt;200&lt;/amount&gt;
&lt;accountNumber&gt;330021vc&lt;/accountNumber&gt;</pre>

<p>You can also use the code generation. There is an option for code generation
in the services management page. A client using generated stub codes is shown
bellow. Codes was generated with option - Unpacks the databinding classes.</p>
<pre>import org.apache.axis2.AxisFault;
import org.wso2.carbon.brs.*;
import samples.banking.xsd.*;

import java.rmi.RemoteException;

/**
 * A client for testing  BankingService
 */
public class TestBankingService {

    public static void main(String arg[]) {

        try {

            BankingServiceStub bankingServiceStub =
                    new BankingServiceStub("http://localhost:9763/services/BankingService");
            bankingServiceStub._getServiceClient().getOptions().setManageSession(true);
            // Making a deposit
            DepositRequest depositRequest = new DepositRequest();
            Deposit deposit = new Deposit();
            deposit.setAccountNumber("330021vc");
            deposit.setAmount(100000);
            depositRequest.setDeposit(deposit);

            DepositResponse response =
                    bankingServiceStub.deposit(depositRequest);
            DepositResult result = response.getDepositResult();
            DepositAccept depositAccept = result.getDepositAccept();
            if (depositAccept != null) {
                System.out.println(depositAccept.getMessage());
            }

            // Making a withdraw
            WithDrawRequest withDrawRequest = new WithDrawRequest();
            Withdraw withdraw = new Withdraw();
            withdraw.setAccountNumber("330021vc");
            withdraw.setAmount(3000);
            withDrawRequest.setWithdraw(withdraw);

            WithDrawResponse withDrawResponse = bankingServiceStub.withDraw(withDrawRequest);
            WithDrawResult withDrawResult = withDrawResponse.getWithDrawResult();

            WithdrawReject withdrawReject = withDrawResult.getWithdrawReject();
            if (withdrawReject == null) {
                WithdrawAccept withdrawAccept = withDrawResult.getWithdrawAccept();
                if (withdrawAccept != null) {
                    System.out.println(withdrawAccept.getMessage());
                }
            } else {
                System.out.println(withdrawReject.getReason());
            }
        } catch (AxisFault axisFault) {
            axisFault.printStackTrace();
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }
}</pre>

<p><h2 id="References">References</h2>
</p>
</body>
</html>
