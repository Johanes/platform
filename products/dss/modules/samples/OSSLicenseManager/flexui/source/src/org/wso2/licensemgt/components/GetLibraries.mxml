<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" height="0" includeInLayout="false">
    <mx:Metadata>
        [Event(name="arrayFiled",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
        [Event(name="arrayFiledWithOne",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.soap.mxml.Operation;
        import mx.collections.XMLListCollection;
        import mx.controls.Alert;
        import mx.rpc.events.ResultEvent;
        import mx.collections.ArrayCollection;
        import mx.events.ListEvent;

        import mx.utils.ObjectUtil;

        import org.wso2.licensemgt.events.ArrayFiledEvent;
        import org.wso2.licensemgt.model.ModelLocator;

        import mx.validators.Validator;
        import mx.events.ValidationResultEvent;
        import mx.core.Application;

        import org.wso2.licensemgt.model.Utils;

        private var modelLocator:ModelLocator = ModelLocator.getInstance();
        public var utils:Utils = new Utils();
        public var myDP:ArrayCollection = new ArrayCollection();
        [Bindable]
        public var libraryName:String = "";
        [Bindable]
        public var selectedCopyrightDelete:String;

        private function onResult(oEvent:ResultEvent):void
        {
            var compData:XML = XML(oEvent.result);
            myDP = resultXMLtoArray(compData);

            var e:ArrayFiledEvent = new ArrayFiledEvent("arrayFiled", myDP);
            dispatchEvent(e);

        }

        private function onResultGetComponentLibraries(oEvent:ResultEvent):void
        {
            var compData:XML = XML(oEvent.result);
            myDP = resultXMLtoArray(compData);

            var e:ArrayFiledEvent = new ArrayFiledEvent("arrayFiledWithOne", myDP);
            dispatchEvent(e);


        }

        private function onResultGetLibrariesByName(oEvent:ResultEvent):void
        {
            var compData:XML = XML(oEvent.result);
            var testNS:Namespace = compData.namespace();
            var compDetails:XMLList = compData.testNS::Library;
            var tmpXMLList:XMLList;

            tmpXMLList = compDetails[0].testNS::Id;
            this.key = tmpXMLList[0].text();

            for (var i:int = 0; i < selectedCopyrights.length; i++) {
                this.copyright = selectedCopyrights[i];
                if (i == (selectedCopyrights.length - 1)) {
                    this.newLibAddingDone = true;
                }
                licenseService.addCopyright.send();
            }
            for (i = 0; i < selectedLicenses.length; i++) {
                this.selectedLicenseKey = selectedLicenses[i].key;
                
                if (i == (selectedLicenses.length - 1)) {
                    this.newLicenseAddingDone = true;
                }
                licenseService.addLicenseToLibrary.send();
            }
            if(selectedLicenses.length == 0 ){
                this.newLicenseAddingDone = true;
            }

        }

        private function resultXMLtoArray(result:XML):ArrayCollection {
            var testNS:Namespace = result.namespace();
            var compDetails:XMLList = result.testNS::Library;
            var tmpXMLList:XMLList;

            var Id:String = "";
            var Name:String = "";
            var Version:String = "";
            var Type:String = "";
            var Vendor:String = "";
            var Url:String = "";
            var Description:String = "";
            var Filename:String = "";

            myDP = new ArrayCollection();

            for (var i:int; i < compDetails.length(); i++) {

                tmpXMLList = compDetails[i].testNS::Id;
                Id = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Name;
                Name = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Version;
                Version = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Type;
                Type = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Vendor;
                Vendor = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Url;
                Url = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Description;
                Description = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Filename;
                Filename = tmpXMLList[0].text();


                myDP.addItem({id:Id,name:Name,version:Version,type:Type,vendor:Vendor,url:Url,description:Description,filename:Filename,what:"library"});

            }
            return myDP;
        }


        public function getArray():void {
            licenseService.getAllLibraries.send();
        }

        [Bindable] var comps = new ArrayCollection();

        [Bindable] var selectedLicenseKey:String = "";
        [Bindable] var copyright:Object;

        var selectedLicenses = new ArrayCollection();
        var selectedCopyrights = new ArrayCollection();
        var newLibDataGot:Boolean = true;
        var newLibAddingDone:Boolean = false;
        var newLicenseAddingDone:Boolean = false;

        public function insertComponent(comps:ArrayCollection, selectedLicenses:ArrayCollection, selectedCopyrights:ArrayCollection):void {
            this.comps = comps;
            this.selectedLicenses = selectedLicenses;
            this.selectedCopyrights = selectedCopyrights;
            this.libraryName = comps[0].name;

            this.key = comps[0].id;

            if (modelLocator.selectedComponentState == "new") {
                this.newLibDataGot = false;
                licenseService.addLibrary.send();
            }
            if (modelLocator.selectedComponentState == "edit") {
                licenseService.editLibrary.send();
                licenseService.removeLicenseFromLibrary.send();
                licenseService.removeCopyright.send();
            }
            if (modelLocator.selectedComponentState == "edit") {
                for (var i:int = 0; i < selectedCopyrights.length; i++) {
                    this.copyright = selectedCopyrights[i];
                    if (i == (selectedCopyrights.length - 1)) {
                        this.newLibAddingDone = true;
                    }
                    licenseService.addCopyright.send();
                }
                for each(var item in selectedLicenses) {
                    this.selectedLicenseKey = item.key;
                    licenseService.addLicenseToLibrary.send();
                }
            }
        }
        private function onFaultRemoveCopyright(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                libDelState++;
                if(libDelState == 3){
                     deleteLibrary();
                }
            } else {
                Alert.show(event.fault.faultString);
            }

        }
        private function onFaultRemoveLicenseFromLibrary(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                libDelState++;
                if(libDelState == 3){
                     deleteLibrary();
                }
            } else {
                Alert.show(event.fault.faultString);
            }

        }
        private function onFaultRemoveLibraryComponents(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                libDelState++;
                if(libDelState == 3){
                     deleteLibrary();
                }
            } else {
                Alert.show(event.fault.faultString);
            }

        }
        private function onFaultRemoveLibrary(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                Application.application.getAllLibraries();
            } else {
                Alert.show(event.fault.faultString);
            }

        }
        var libDelState:int = 0 //when set to 3 it's ok to delete the lib
        public function deleteCopyrights(key:String):void{
            this.key = key;
            licenseService.removeCopyright.send();
        }
        public function deleteLicenses(key:String):void{
            this.key = key;
            licenseService.removeLicenseFromLibrary.send();
        }
        public function deleteComponents(key:String):void{
            this.key = key;
            licenseService.removeLibraryComponents.send();
        }
        [Bindable] var key:String = "";

        public function getCompLibs(key:String):void {
            this.key = key;
            licenseService.getComponentLibraries.send();
        }

        public function sendSearchRequest(libraryName:String):void
        {
            this.libraryName = libraryName;
            licenseService.getLibraries.send();
        }

        /* Shows the web service call fault string */
        private function handleFault(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                if (modelLocator.selectedComponentState == "new" && newLibDataGot == false) {
                    newLibDataGot = true;
                    licenseService.getLibrariesByName.send();
                } else if (newLibAddingDone && newLicenseAddingDone) {
                    Application.application.getAllLibraries();
                }
            } else {
                Alert.show(event.fault.faultString);
            }
        }

        public function deleteLibrary():void {
            licenseService.removeLibrary.send();
        }

        public function getLibraryDetails(key:String):void {
            this.key = key;
            licenseService.getLibraryById.send();
        }
        [Bindable] var licenseKey:String = "";
         public function getArrayLicenseLibs(licenseKey:String):void {
             this.licenseKey = licenseKey;
            licenseService.getLicenseLibraries.send();
        }
        ]]></mx:Script>
    <mx:WebService id="licenseService"
                   service="OSSLicenseService"
                   port="SOAP11Endpoint"
                   useProxy="true"
                   fault="handleFault(event)"
                   destination="license">
        <mx:operation result="onResult(event)" name="getAllLibraries" resultFormat="e4x">
            <mx:request>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResultGetComponentLibraries(event)" name="getComponentLibraries" resultFormat="e4x">
            <mx:request>
                <componentKey>{key}</componentKey>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResult(event)" name="getLibraries" resultFormat="e4x">
            <mx:request>
                <libraryName>{libraryName}</libraryName>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResultGetLibrariesByName(event)" name="getLibrariesByName" resultFormat="e4x">
            <mx:request>
                <libraryName>{libraryName}</libraryName>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResult(event)" name="getLibraryById" resultFormat="e4x">
            <mx:request>
                <libraryId>{key}</libraryId>
            </mx:request>
        </mx:operation>
        <mx:operation name="editLibrary" resultFormat="e4x">
            <mx:request>
                <libraryName>{comps[0].name}</libraryName>
                <version>{comps[0].version}</version>
                <type>{comps[0].type}</type>
                <vendor>{comps[0].vendor}</vendor>
                <description>{comps[0].description}</description>
                <url>{comps[0].url}</url>
                <filename>{comps[0].filename}</filename>
                <id>{comps[0].id}</id>
            </mx:request>
        </mx:operation>
        <mx:operation name="addLibrary" resultFormat="e4x">
            <mx:request>
                <libraryName>{comps[0].name}</libraryName>
                <version>{comps[0].version}</version>
                <type>{comps[0].type}</type>
                <vendor>{comps[0].vendor}</vendor>
                <description>{comps[0].description}</description>
                <url>{comps[0].url}</url>
                <filename>{comps[0].filename}</filename>
            </mx:request>
        </mx:operation>
        <mx:operation name="addLicenseToLibrary" resultFormat="e4x">
            <mx:request>
                <libraryId>{key}</libraryId>
                <licenseKey>{selectedLicenseKey}</licenseKey>
            </mx:request>
        </mx:operation>
        <mx:operation fault="onFaultRemoveLicenseFromLibrary(event)" name="removeLicenseFromLibrary" resultFormat="e4x">
            <mx:request>
                <libraryId>{key}</libraryId>
            </mx:request>
        </mx:operation>
        <mx:operation fault="onFaultRemoveLibrary(event)" name="removeLibrary" resultFormat="e4x">
            <mx:request>
                <libraryId>{modelLocator.selectedToDelete}</libraryId>
            </mx:request>
        </mx:operation>
        <mx:operation fault="onFaultRemoveCopyright(event)" name="removeCopyright" resultFormat="e4x">
            <mx:request>
                <belongsTo>"library"</belongsTo>
                <itemId>{key}</itemId>
            </mx:request>
        </mx:operation>
        <mx:operation name="addCopyright" resultFormat="e4x">
            <mx:request>
                <year>{copyright.year}</year>
                <statement>{copyright.statement}</statement>
                <owner>{copyright.owner}</owner>
                <belongsTo>"library"</belongsTo>
                <itemId>{key}</itemId>
            </mx:request>
        </mx:operation>
        <mx:operation name="editCopyright" resultFormat="e4x">
            <mx:request>
                <year>{copyright.year}</year>
                <statement>{copyright.statement}</statement>
                <owner>{copyright.owner}</owner>
                <id>{copyright.id}</id>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResult(event)" name="getLicenseLibraries" resultFormat="e4x">
            <mx:request>
                <licenseKey>{licenseKey}</licenseKey>
            </mx:request>
        </mx:operation>
        <mx:operation fault="onFaultRemoveLibraryComponents(event)" name="removeLibraryComponents" resultFormat="e4x">
            <mx:request>
                <libId>{key}</libId>
            </mx:request>
        </mx:operation>
    </mx:WebService>
</mx:VBox>