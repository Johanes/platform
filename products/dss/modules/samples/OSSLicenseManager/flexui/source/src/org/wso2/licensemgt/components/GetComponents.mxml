<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" height="0" includeInLayout="false">
    <mx:Metadata>
        [Event(name="arrayFiled",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
        [Event(name="arrayFiledWithOne",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.AsyncToken;

        import org.wso2.licensemgt.components.ShowProgress;

        import org.wso2.licensemgt.events.ArrayFiledEvent;
        import org.wso2.licensemgt.model.ModelLocator;

        import mx.core.Application;

        private var modelLocator:ModelLocator = ModelLocator.getInstance();

        public var myDP:ArrayCollection = new ArrayCollection();

        [Bindable] var searchTextFiltered:String = new String();

        var popup : ShowProgress;

        private function onResult(oEvent:ResultEvent):void
        {
            var compData:XML = XML(oEvent.result);
            myDP = resultXMLtoArray(compData);

            var e:ArrayFiledEvent = new ArrayFiledEvent("arrayFiled", myDP);
            dispatchEvent(e);

        }

        private function onResultGetComponentsByKey(oEvent:ResultEvent):void
        {
            var compData:XML = XML(oEvent.result);
            myDP = resultXMLtoArray(compData);

            var e:ArrayFiledEvent = new ArrayFiledEvent("arrayFiledWithOne", myDP);
            dispatchEvent(e);

        }

        private function resultXMLtoArray(result:XML):ArrayCollection {
            var testNS:Namespace = result.namespace();
            var compDetails:XMLList = result.testNS::Component;
            var tmpXMLList:XMLList;

            var Id:String = "";
            var Key:String = "";
            var Name:String = "";
            var Type:String = "";
            var Version:String = "";
            var Vendor:String = "";
            var Url:String = "";
            var Filename:String = "";
            var Description:String = "";

            myDP = new ArrayCollection();

            for (var i:int; i < compDetails.length(); i++) {
                tmpXMLList = compDetails[i].testNS::Id;
                Id = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Key;
                Key = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Name;
                Name = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Type;
                Type = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Version;
                Version = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Vendor;
                Vendor = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Url;
                Url = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Filename;
                Filename = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Description;
                Description = tmpXMLList[0].text();


                myDP.addItem({id:Id,key:Key,name:Name,type:Type,version:Version,vendor:Vendor,url:Url,filename:Filename,description:Description,what:"component"});

            }
            return myDP;
        }

        public function getArray():void {
            licenseService.getAllComponents.send();
        }

        public function deleteComponent():void {
            licenseService.removeComponent.send();
        }

        public function sendSearchRequest(searchTextFiltered:String):void
        {
            this.searchTextFiltered = searchTextFiltered;
            licenseService.getComponents.send();
        }

        [Bindable] var comps = new ArrayCollection();
        var selectedLibraries = new ArrayCollection();
        [Bindable] var key:String = "";
        [Bindable] var selectedLicenseKey:String = "";
        [Bindable] var selectedLibraryId:String = "";

        var selectedLicenses = new ArrayCollection();

        public function insertComponent(comps:ArrayCollection, selectedLibraries:ArrayCollection, selectedLicenses:ArrayCollection):void {
            this.comps = comps;
            this.selectedLibraries = selectedLibraries;
            this.selectedLicenses = selectedLicenses;
   
            this.key = comps[0].name;
            if (modelLocator.selectedComponentState == "new") {
                licenseService.addComponent.send();
            }
            if (modelLocator.selectedComponentState == "edit") {
                licenseService.editComponent.send();
                licenseService.removeLicenseFromComponent.send();
                licenseService.removeLibraryFromComponent.send();
            }
            for each(var item in selectedLibraries) {
                this.selectedLibraryId = item.id;
                licenseService.addLibraryToComponent.send();
            }
            for each(item in selectedLicenses) {
                this.selectedLicenseKey = item.key;
                licenseService.addLicenseToComponent.send();
            }
        }


        public function getComponentDetails(key:String):void {
            this.key = key;
            licenseService.getComponentsByKey.send();
        }

        /* Shows the web service call fault string */
        private function handleFault(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                Application.application.getAllComponents();
            } else {
                Alert.show(event.fault.faultString);
            }
        }
        [Bindable] var licenseKey:String = "";
         public function getArrayLicenseComps(licenseKey:String):void {
             this.licenseKey = licenseKey;
            licenseService.getLicenseComponents.send();
        }
        [Bindable] var libId:String = "";
        public function getLibComponents(libId:String):void{
            this.libId = libId;
            licenseService.getLibraryComponents.send();
        }

        ]]></mx:Script>
    <mx:WebService id="licenseService"
                   service="OSSLicenseService"
                   useProxy="true"
                   port="SOAP11Endpoint"
                   fault="handleFault(event)"
                   destination="license">
        <mx:operation result="onResult(event)" name="getAllComponents" resultFormat="e4x">
            <mx:request></mx:request>
        </mx:operation>
        <mx:operation name="removeComponent" resultFormat="e4x"> <!--result="onRemoveResult(event)"-->
            <mx:request>
                <componentKey>{modelLocator.selectedToDelete}</componentKey>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResult(event)" name="getComponents" resultFormat="e4x">
            <mx:request>
                <componentName>{searchTextFiltered}</componentName>
            </mx:request>
        </mx:operation>
        <mx:operation name="addComponent" resultFormat="e4x">
            <mx:request>
                <componentKey>{comps[0].name}</componentKey>
                <!-- Right now we use component name as the component key -->
                <name>{comps[0].name}</name>
                <type>{comps[0].type}</type>
                <version>{comps[0].version}</version>
                <vendor>{comps[0].vendor}</vendor>
                <url>{comps[0].url}</url>
                <description>{comps[0].description}</description>
                <filename>{comps[0].filename}</filename>
            </mx:request>
        </mx:operation>
        <mx:operation result="" name="editComponent" resultFormat="e4x">
            <mx:request>
                <name>{comps[0].name}</name>
                <type>{comps[0].type}</type>
                <version>{comps[0].version}</version>
                <vendor>{comps[0].vendor}</vendor>
                <url>{comps[0].url}</url>
                <description>{comps[0].description}</description>
                <filename>{comps[0].filename}</filename>
                <componentKey>{key}</componentKey>
            </mx:request>
        </mx:operation>
        <mx:operation name="addLicenseToComponent" resultFormat="e4x">
            <mx:request>
                <componentKey>{key}</componentKey>
                <licenseKey>{selectedLicenseKey}</licenseKey>
            </mx:request>
        </mx:operation>
        <mx:operation name="addLibraryToComponent" resultFormat="e4x">
            <mx:request>
                <componentKey>{key}</componentKey>
                <libId>{selectedLibraryId}</libId>
            </mx:request>
        </mx:operation>
        <mx:operation name="getLibraryComponents" resultFormat="e4x" result="onResult(event)">
            <mx:request>
                <libraryId>{libId}</libraryId>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResultGetComponentsByKey(event)" name="getComponentsByKey" resultFormat="e4x">
            <mx:request>
                <componentKey>{key}</componentKey>
            </mx:request>
        </mx:operation>
        <mx:operation name="removeLicenseFromComponent" resultFormat="e4x">
            <mx:request>
                <componentKey>{key}</componentKey>
            </mx:request>
        </mx:operation>
        <mx:operation name="removeLibraryFromComponent" resultFormat="e4x">
            <mx:request>
                <componentKey>{key}</componentKey>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResult(event)" name="getLicenseComponents" resultFormat="e4x">
            <mx:request>
                <licenseKey>{licenseKey}</licenseKey>
            </mx:request>
        </mx:operation>
    </mx:WebService>
</mx:VBox>