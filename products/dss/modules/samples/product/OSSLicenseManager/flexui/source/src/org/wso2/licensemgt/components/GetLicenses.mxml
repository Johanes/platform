<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" height="0" includeInLayout="false">
    <mx:Metadata>
        [Event(name="arrayFiled",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
        [Event(name="arrayFiledWithOne",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
        [Event(name="deletedDone",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.soap.mxml.Operation;
        import mx.collections.XMLListCollection;
        import mx.controls.Alert;
        import mx.rpc.events.ResultEvent;
        import mx.collections.ArrayCollection;
        import mx.events.ListEvent;

        import mx.utils.ObjectUtil;

        import org.wso2.licensemgt.events.ArrayFiledEvent;
        import org.wso2.licensemgt.model.ModelLocator;

        import mx.validators.Validator;
        import mx.events.ValidationResultEvent;
        import mx.core.Application;

        import org.wso2.licensemgt.model.Utils;

        private var modelLocator:ModelLocator = ModelLocator.getInstance();
        public var utils:Utils = new Utils();
        public var myDP:ArrayCollection = new ArrayCollection();
        [Bindable] var searchTextFiltered:String = "";

        private function onResult(oEvent:ResultEvent):void
        {
            var compData:XML = XML(oEvent.result);
            myDP = resultXmlToArray(compData);
            //            PopUpManager.removePopUp(this);

            var e:ArrayFiledEvent = new ArrayFiledEvent("arrayFiled", myDP);
            dispatchEvent(e);

        }

        private function onResultGetOne(oEvent:ResultEvent):void
        {
            var compData:XML = XML(oEvent.result);
            myDP = resultXmlToArray(compData);
            //            PopUpManager.removePopUp(this);

            var e:ArrayFiledEvent = new ArrayFiledEvent("arrayFiledWithOne", myDP);
            dispatchEvent(e);

        }

        public function resultXmlToArray(result:XML):ArrayCollection {

            var testNS:Namespace = result.namespace();
            var compDetails:XMLList = result.testNS::License;
            var tmpXMLList:XMLList;

            var Key:String = "";
            var Name:String = "";
            var Version:String = "";
            var Year:String = "";
            var Source:String = "";
            var Url:String = "";
            var Content:String = "";

            myDP = new ArrayCollection();

            for (var i:int; i < compDetails.length(); i++) {

                tmpXMLList = compDetails[i].testNS::Key;
                Key = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Name;
                Name = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Version;
                Version = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Year;
                Year = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Source;
                Source = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Url;
                Url = tmpXMLList[0].text();

                tmpXMLList = compDetails[i].testNS::Content;
                Content = tmpXMLList[0].text();


                myDP.addItem({key:Key,name:Name,version:Version,year:Year,source:Source,url:Url,content:Content,what:"license"});

            }
            return myDP;
        }

        public function getArray():void {
            licenseService.getAllLicenses.send();
        }

        public function getLicenseDetails(key:String):void {
            this.searchTextFiltered = key;
            licenseService.getLicenseByKey.send();
        }

        /* Shows the web service call fault string */
        private function handleFault(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                Application.application.getAllLicense();
            } else {
                Alert.show(event.fault.faultString);
            }
        }

        private function onFaultRemove(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                var e:ArrayFiledEvent = new ArrayFiledEvent("deletedDone", new ArrayCollection());
                dispatchEvent(e);
                if (delRefsDone == 1) {
                    licenseService.removeLicense.send();
                }
                delRefsDone ++;
            } else {
                Alert.show(event.fault.faultString);
            }
        }

        [Bindable] var key:String = "";

        public function getLibLicense(key:String):void {
            this.key = key;
            licenseService.getLibraryLicenses.send();
        }

        public function getCompLicense(key:String):void {
            this.key = key;
            licenseService.getComponentLicenses.send();
        }


        public function sendSearchRequest(searchTextFiltered:String):void
        {
            this.searchTextFiltered = searchTextFiltered;
            licenseService.getLicense.send();
        }

        [Bindable] var comps:ArrayCollection = new ArrayCollection();

        public function insertComponent(comps:ArrayCollection):void {
            this.comps = comps;

            if (modelLocator.selectedComponentState == "new") {
                licenseService.addLicense.send();
            }
            if (modelLocator.selectedComponentState == "edit") {
                licenseService.editLicense.send();
            }
        }

        [Bindable] var licenseKey:String = "";
        private var delRefsDone:int = 0; //if set to 1 deleting refs is done
        public function deleteLicense(licenseKey:String):void {
            delRefsDone = 0;
            this.licenseKey = licenseKey;
            removeLibraryRefs(licenseKey);
            removeComponentRefs(licenseKey);
            licenseService.removeLicense.send();
        }
        public function removeLibraryRefs(licenseKey:String):void {
            this.licenseKey = licenseKey;
            licenseService.removeRefLicenseLibs.send();
        }
        public function removeComponentRefs(licenseKey:String):void {
            this.licenseKey = licenseKey;
            licenseService.removeRefLicenseComps.send();
        }

        ]]></mx:Script>
    <mx:WebService id="licenseService"
                   service="OSSLicenseService"
                   port="SOAP11Endpoint"
                   useProxy="true"
                   fault="handleFault(event)"
                   destination="license">
        <mx:operation result="onResult(event)" name="getAllLicenses" resultFormat="e4x">
            <mx:request>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResultGetOne(event)" name="getComponentLicenses" resultFormat="e4x">
            <mx:request>
                <componentKey>{key}</componentKey>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResultGetOne(event)" name="getLibraryLicenses" resultFormat="e4x">
            <mx:request>
                <libraryId>{key}</libraryId>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResult(event)" name="getLicense" resultFormat="e4x">
            <mx:request>
                <licenseName>{searchTextFiltered}</licenseName>
            </mx:request>
        </mx:operation>
        <mx:operation result="onResultGetOne(event)" name="getLicenseByKey" resultFormat="e4x">
            <mx:request>
                <licenseKey>{searchTextFiltered}</licenseKey>
            </mx:request>
        </mx:operation>
        <mx:operation name="removeLicense" resultFormat="e4x">
            <mx:request>
                <licenseKey>{modelLocator.selectedToDelete}</licenseKey>
            </mx:request>
        </mx:operation>
        <mx:operation name="addLicense" resultFormat="e4x">
            <mx:request>
                <licenseKey>{comps[0].key}</licenseKey>
                <licenseName>{comps[0].name}</licenseName>
                <version>{comps[0].version}</version>
                <year>{comps[0].year}</year>
                <licenseSource>{comps[0].source}</licenseSource>
                <url>{comps[0].url}</url>
                <LicenseText>{comps[0].content}</LicenseText>
            </mx:request>
        </mx:operation>
        <mx:operation name="editLicense" resultFormat="e4x">
            <mx:request>
                <licenseName>{comps[0].name}</licenseName>
                <version>{comps[0].version}</version>
                <year>{comps[0].year}</year>
                <licenseSource>{comps[0].source}</licenseSource>
                <url>{comps[0].url}</url>
                <LicenseText>{comps[0].content}</LicenseText>
                <licenseKey>{comps[0].key}</licenseKey>
            </mx:request>
        </mx:operation>
        <!-- Reference handling ws calls -->
        <mx:operation fault="onFaultRemove(event)" name="removeRefLicenseLibs" resultFormat="e4x">
            <mx:request>
                <licenseKey>{licenseKey}</licenseKey>
            </mx:request>
        </mx:operation>
        <mx:operation fault="onFaultRemove(event)" name="removeRefLicenseComps" resultFormat="e4x">
            <mx:request>
                <licenseKey>{licenseKey}</licenseKey>
            </mx:request>
        </mx:operation>

    </mx:WebService>
</mx:VBox>