<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:Mx="http://www.adobe.com/2006/mxml" height="0"
         includeInLayout="false">
    <mx:Metadata>
        [Event(name="arrayFiled",type="org.wso2.licensemgt.events.ArrayFiledEvent")]
    </mx:Metadata>
    <Mx:Script><![CDATA[
        import mx.collections.ArrayCollection;

        import mx.controls.Alert;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.wso2.licensemgt.events.ArrayFiledEvent;
        import org.wso2.licensemgt.model.ModelLocator;

        public var modelLocator:ModelLocator = ModelLocator.getInstance();
        [Bindable]
        public var _xmlResult:XML;      //holds the result xml
        [Bindable]
        public var _xlDayData:XMLList;  //dataProvider for the day weather dataGrid
        [Bindable]
        public var libTypeList:ArrayCollection = new ArrayCollection();

        default xml namespace = "http://ws.wso2.org/dataservice"
        public function onResultGetTypes(oEvent:ResultEvent):void
        {
            libTypeList = new ArrayCollection();
            _xmlResult = XML(oEvent.result);
            var testNS:Namespace = _xmlResult.namespace();
            _xlDayData = _xmlResult.testNS::Type;
            for (var i:int; i < _xlDayData.length(); i++) {
                libTypeList.addItem({label:_xlDayData[i].testNS::typeName.text() ,data:_xlDayData[i].testNS::typeName.text(),name:_xlDayData[i].testNS::typeName.text(),id:_xlDayData[i].testNS::typeId.text(),typeType:_xlDayData[i].testNS::typeType.text(),what:'type'});
            }
            var e:ArrayFiledEvent = new ArrayFiledEvent("arrayFiled", libTypeList);
            dispatchEvent(e);
        }

        [Bindable]  public var typeType:String;
        [Bindable]  public var typeName:String;
        [Bindable]  public var oldType:String;
        [Bindable]  public var typeId:String;

        public function getArray(typeType:String):void {
            this.typeType = typeType;
            licenseService.getAllTypes.send();
        }
        public function addTypeSend(typeType:String,typeName:String):void{
            this.typeType = typeType;
            this.typeName = typeName;
            licenseService.addType.send();
        }
        public function editTypeSend(typeType:String,typeName:String,oldType:String,typeId:String):void{
            this.typeType = typeType;
            this.typeName = typeName;
            this.oldType = oldType;
            this.typeId = typeId;
            licenseService.editType.send();
            if (this.typeType == 'component') {
                licenseService.editComponentType.send();
            } else if (this.typeType == 'library') {
                licenseService.editLibraryType.send();
            }
        }
        public function handleFault(event:FaultEvent):void {
            var faultMessage:String = event.fault.faultString;
            if (faultMessage.search("Raw response") != -1) {
                 if(modelLocator.viewState == ModelLocator.TYPES){
                    getArray(typeType); 
                 }
            } else {
                Alert.show(event.fault.faultString);
            }
        }
        public function deleteType(typeType:String):void{
            this.typeType = typeType;
            licenseService.removeType.send();
        }
        ]]></Mx:Script>
    <mx:WebService id="licenseService"
                   service="OSSLicenseService"
                   useProxy="true"
                   port="SOAP11Endpoint"
                   fault="handleFault(event)"
                   destination="license">
        <mx:operation result="onResultGetTypes(event)" name="getAllTypes" resultFormat="e4x">
            <mx:request>
                <typeType>{typeType}</typeType>
            </mx:request>
        </mx:operation>
        <mx:operation name="addType" resultFormat="e4x">
            <mx:request>
                <typeName>{typeName}</typeName>
                <typeType>{typeType}</typeType>
            </mx:request>
        </mx:operation>
        <mx:operation name="removeType" resultFormat="e4x">
            <mx:request>
                <typeId>{modelLocator.selectedToDelete}</typeId>
            </mx:request>
        </mx:operation>
        <mx:operation name="editType" resultFormat="e4x">
            <mx:request>
                <typeName>{typeName}</typeName>
                <typeType>{typeType}</typeType>
                <typeId>{typeId}</typeId>
            </mx:request>
        </mx:operation>
        <mx:operation name="editComponentType" resultFormat="e4x">
            <mx:request>
                <newType>{typeType}</newType>
                <oldType>{oldType}</oldType>
            </mx:request>
        </mx:operation>
        <mx:operation name="editLibraryType" resultFormat="e4x">
            <mx:request>
                <newType>{typeName}</newType>
                <oldType>{oldType}</oldType>
            </mx:request>
        </mx:operation>
    </mx:WebService>
</mx:VBox>