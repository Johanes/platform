<!--
  ~ Copyright 2005-2007 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<html>
    <body>
        <p>[<a
                href="http://wso2.org/downloads/solutions/data-services">Download</a>]
            | [<a href="../index_docs.html">Documentation Home</a>] | [<a
                href="../release_notes.html">Release Note</a>]
        </p>
        <h1>Gadget Sample</h1>
        <h2>Introduction</h2>
        <p>
           This sample demostrate how data services are invoked inside a gadget using REST calls. Following sample provides database operations  such as insert, update, delete and retreive data; further, it provides a mechanism  to analyze data in a barchart format.
        </p>
        <h2>Prerequisites</h2>
        <p>
            The sample data services should be deployed as per the instructions mentioned in <a href="deploying_samples.html">Deploying Samples</a> section.
        </p>
      
        <h2>Database Definition</h2>
        <p>
            The scenario is based on a possible database used in a small company to handle its internal affairs. Such information about the products that are produced in the company.
        </p>
        <h2>Service Definition</h2>
        <p>
            There are seperate queries/resources written for specific operations; resources are defined inorder to access data through REST calls. The resources implemented in the service are listed as follows. 

            <ul>
              <li> Get Product : http://localhost:9763/services/ResourcesSample.HTTPEndpoint/product/{productCode} - Use HTTP GET request to retreive product infomation for a given product code.
              </li>
              <li> Delete Product : http://localhost:9763/services/ResourcesSample.HTTPEndpoint/product/{productCode}  - Use HTTP DELETE request to delete a given product from the database.
              </li>
              <li> Update Product : http://localhost:9763/services/ResourcesSample.HTTPEndpoint/product/{putproduct}/{productname}/{productline}/{quantityinstock}/{buyprice} - Use HTTP PUT request to update product infomation.
              </li>
              <li> Insert Product : http://localhost:9763/services/ResourcesSample.HTTPEndpoint/product/{putproduct}/{productname}/{productline}/{quantityinstock}/{buyprice} - Use HTTP POST request to insert new products.
              </li>          
              <li> Get All Products : http://localhost:9763/services/ResourcesSample.HTTPEndpoint/products - Use HTTP GET request to get all the products.
              </li>
              
            </ul>
            <p>The above first four resources uses the same resource path <a href=" http://localhost:9763/services/ResourcesSample.HTTPEndpoint/product"> http://localhost:9763/services/ResourcesSample.HTTPEndpoint/product</a> , the REST calls are identified by the HTTP request method. The last resource is  used to retrieve all the products, therefore seperate resource path is used.

        </p></p>
        <h2>Manage Product Gadget</h2>
        <p>
            Manage product gadget provides the functionality to add, edit, delete and view  a product and access the database directly.</p> <br /><br />  <p>
                 <img src="../images/samples/gadget_sample_img1.png" /> <br />     
                  <p>Figure 1: Manage Products</p>
        <br/><br /> 
        </p>

        <h2>Product Analysis Gadget</h2>
        <p>
            The product analysis gadget calculate number of products for a product line and create a bar chart according to the result. Whenever a product  is modified/inserted the barchart is refreshed accordingly. This functionality is provided using the WSO2 Gadget Server inter gadget comunication feature.
       <p><br /> 
                 <img src="../images/samples/gadget_sample_img2.png" /> <br />     
                <p>Figure 2: Products Chart</p>
        <br/><br /> 
        </p>

        </p>
        <h2>Product Infomation Gadget</h2>
        <p><br /> 
            The product information gadget retreive all products and displays product infomation in a table format and refresh data according to data management. <br /><br />
            <p>
             
                 <img src="../images/samples/gadget_sample_img3.png" /> <br />     
                <p>Figure 3: Products Information</p>
        <br/>
           
        </p> </p>
    </body>
</html>
