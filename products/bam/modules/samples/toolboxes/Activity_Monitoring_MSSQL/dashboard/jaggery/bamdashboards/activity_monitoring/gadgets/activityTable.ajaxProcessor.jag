<%
    var sEcho = request.getParameter('sEcho');
    var sSearch = request.getParameter('sSearch');
    var iDisplayStart = request.getParameter('iDisplayStart');
    var iDisplayLength = request.getParameter('iDisplayLength');
    var iColumns = request.getParameter('iColumns');
    var iSortingCols = request.getParameter('iSortingCols');
    var sTimeStampFrom = request.getParameter('timeStampForm');
    var sTimeStampTo = request.getParameter('timeStampTo');
    var sServer = request.getParameter('server');
    var sService = request.getParameter('service');
    var sOperation = request.getParameter('operation');
    var iSort = request.getParameter('iSortCol_0');
    var sSort = request.getParameter('sSortDir_0');
    var iIndexOfMessageCount = request.getParameter('indexOfMessageCount');
    var iIndexOfActivityID = request.getParameter('indexOfActivityID');

    var log = new Log();

    //log.info( "sEcho " + sEcho + " :)" );
    //log.info( "sKeyword " + sSearch + " :)" );
    //log.info( "iDisplayStart " + iDisplayStart + " :)" );
    //log.info( "iDisplayLength " + iDisplayLength + " :)" );
    //log.info( "iColumns " + iColumns + " :)" );
    //log.info( "iSortingCols " + iSortingCols + " :)" );
    //log.info( sBamActivityId );
    //log.info( sTimeStampFrom );
    //log.info( sTimeStampTo );
    //log.info( sSort );
    //log.info( iSort );
    //log.info( mColumnIndex );


    queryGen = {};

    queryGen.entry = {};

    queryGen.entries = {};

    queryGen.commons = {}

    queryGen.commons.getFromTime = function() {
        var fromTime = '' + sTimeStampFrom + '';
        if(fromTime != -1) {
            return 'sentTimestamp > ' + fromTime;
        } else {
            return '';
        }
    };

    queryGen.commons.getToTime = function() {
        var toTime = '' + sTimeStampTo + '';
        if(toTime != -1) {
            return 'sentTimestamp < ' + toTime;
        } else {
            return '';
        }
    };

    queryGen.commons.getServer = function() {
        var server = '' + sServer + '';
        if(server != '') {
            return 'host = \'' + server + '\'';
        } else {
            return '';
        }
    };

    queryGen.commons.getService = function() {
        var service = '' + sService + '';
        if(service != '') {
            return 'service_name = \'' + service + '\'';
        } else {
            return '';
        }
    };

    queryGen.commons.getOperation = function() {
        var operation = '' + sOperation + '';
        if(operation != '') {
            return 'operation_name = \'' + operation + '\'';
        } else {
            return '';
        }
    };

    queryGen.commons.getConstraintString = function() {
        var constraintString = '';
        var conditions = [this.getFromTime(), this.getToTime(), this.getServer(),
                          this.getService(), this.getOperation()];
        for(var i=0; i<5; i++) {
            if(conditions[i] != '') {
                if(constraintString != '') {
                    constraintString = constraintString + ' AND ' + conditions[i];
                } else {
                    constraintString = ' ' + conditions[i];
                }
            }
        }
        return constraintString;
    };

    queryGen.entries.genQuery = function(queryType) {
        var whereString = queryGen.commons.getConstraintString();
        if(whereString != '') {
            whereString = 'WHERE ' + whereString ;
        }
        if( sSearch != "" )
            whereString += " AND bamActivityID LIKE '%" + sSearch + "%'";
        //log.info( queryGen.entries.getOrderByString() );
        var displayLenght = parseInt(iDisplayLength, 10);
        var displayStart = parseInt(iDisplayStart, 10);
        var modifiedDisplayStart = (displayStart + 1).toString();
        var modifiedSelectLength = (displayStart + displayLenght).toString();
        if( queryType == "query")
            return "SELECT B.BAMACTIVITYID, B.MESSAGECOUNT FROM (SELECT A.BAMACTIVITYID, A.MESSAGECOUNT, ROW_NUMBER() OVER (ORDER BY A." + queryGen.entries.getOrderByString() + " " + sSort + ") ROWMUM FROM (SELECT DISTINCT BAMACTIVITYID, COUNT(messageRowID) AS MESSAGECOUNT FROM ActivitySummary " + whereString + " GROUP BY BAMACTIVITYID) A ) B WHERE ROWMUM between " + modifiedDisplayStart + " AND " + modifiedSelectLength;
        else
            return "SELECT COUNT( DISTINCT BAMACTIVITYID ) AS COUNT FROM ActivitySummary " + whereString;
    }

    queryGen.entries.getOrderByString = function()
    {
        switch(iSort)
        {
            case iIndexOfMessageCount :
                return "MESSAGECOUNT";
                break;
            case iIndexOfActivityID:
                return "BAMACTIVITYID";
                break;
            default:
                return "MESSAGECOUNT";
        }
    }

    var iTotalRecords;
    var iTotalDisplayedRecords;
    var aaData;

    var result;
    var rowCount;
    var db;
    try
    {
        db = new Database("WSO2BAM_DATASOURCE");
        //log.info("SELECT messageRowID, sentTimestamp, soapHeader, soapBody FROM ActivitySummary  LIMIT "+ iDisplayStart + "," + iDisplayLength);
        //

        var whereString = '';

        var sQuery = queryGen.entries.genQuery("query");
        var sCountQuery = queryGen.entries.genQuery("countQuery");

        //log.info(sCountQuery);
        //log.info(sQuery);

        result = db.query(sQuery);
        rowCount = db.query(sCountQuery);
        //log.info('--------------------------------------------------------------------');
        //log.info(rowCount);
        //log.info();
    }
    catch(e)
    {

    //log.info();
    result = "";
    }
    finally
    {
    db.close();
    }

    //log.info( result );

    var len = result.length;
    var rows = [];
    var columnNames = [];
    var rowEntryStr = "";
    for (var i = 0; i < len; i++) {
        var obj = result[i];
        var objTemp = {};
    //log.info(stringify(obj));
        var row = [];
        for( var key in obj )
        {
            var keyTemp = key;
            key = key.toUpperCase();
            objTemp[key] = obj[keyTemp];
            //log.info(key);
            //log.info(keyTemp);
        }
        //log.info(objTemp);
        //log.info(obj);
        row.push( objTemp.MESSAGECOUNT );
        row.push( objTemp.BAMACTIVITYID );
        //log.info( objTemp.BAMACTIVITYID );
        row.push( "<span><img src=\"../images/details_open.png\" title=\"Explore\"></span>" );
        rows.push(row);
    }

    var numberOfRows = parseInt( rowCount[0].COUNT )/iDisplayLength;

    var obj = {
    "sEcho":sEcho,
    "iTotalRecords":numberOfRows + 1,
    "iTotalDisplayRecords":rowCount[0].COUNT,
    "aaData": rows
    };
    //log.info(obj);
    print(obj);
%>
