/*
*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
*  WSO2 Inc. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/
package org.wso2.carbon.bam.common.dataobjects.service;

import org.wso2.carbon.bam.util.BAMConstants;

/*
 * Data object representing a monitored server
 */
public class ServerDO {

/*  private TimeRange summaryInterval;
    private TimeRange dataRetention;*/

    private int serverID;
    private int tenantID = BAMConstants.NO_TENANT_MODE; // Defaults to no tenant mode until set

    private String serverURL;
    private String userName;
    private String password;

    /**
     * Server type is either Polling (pull) or Eventing (push).
     */
    private String serverType;

    private String subscriptionID;

    /**
     * The epr of the subscriber who has been registered to capture events generated by this server.
     * This may or may not be current BAM instance. In clustering scenarios this will be the epr
     * of the load balancer not the current BAM instance epr.                  ServerWithCategory
     */
    private String subscriptionEPR;

    /**
     * User provided description of the server
     */
    private String description;

    /**
     * If the server is added in eventing mode denotes the statistics collection mode. Currently 
     * one of service, message or mediation.   #TODO: See whether we can introduce an enum here
     */
    private int category;

    private String categoryName;

    /**
     * Denotes whether the BAM instance is currently subscribed to this server to capture event data
     * from it.
     */
    private boolean active;

    public ServerDO() {
        this.serverID = Integer.MIN_VALUE;
    }

    // TODO: Rename this to getServerID
    public int getId() {
        return serverID;
    }

    public void setId(int id) {
        this.serverID = id;
    }

    public int getTenantID() {
        return tenantID;
    }

    public void setTenantID(int tenantID) {
        this.tenantID = tenantID;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getServerURL() {
        return serverURL;
    }

    public void setServerURL(String serverURL) {
        this.serverURL = serverURL;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public void setCategory(int category) {
        this.category = category;
    }

    public int getCategory() {
        return category;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    public boolean getActive() {
        return active;
    }

    public void setServerType(String serverType) {
        this.serverType = serverType;
    }

    public String getServerType() {
        return serverType;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

//    public TenantDO getTenant() throws BAMException {
//        return BAMPersistenceManager.getPersistenceManager(BAMUtil.getRegistry()).getTenant(this.getTenantID());
//    }

/*    public TimeRange getSummaryInterval() {
        return summaryInterval;
    }

    public void setSummaryInterval(TimeRange summaryInterval) {
        this.summaryInterval = summaryInterval;
    }

    public TimeRange getDataRetention() {
        return dataRetention;
    }

    public void setDataRetention(TimeRange dataRetention) {
        this.dataRetention = dataRetention;
    }*/

    public String getSubscriptionID() {
        return subscriptionID;
    }

    public void setSubscriptionID(String subscriptionID) {
        this.subscriptionID = subscriptionID;
    }

    public String getSubscriptionEPR() {
        return subscriptionEPR;
    }

    public void setSubscriptionEPR(String subscriptionEPR) {
        this.subscriptionEPR = subscriptionEPR;
    }


    public String toString() {
        return "url: " + getServerURL() + " id: " + getId() + " tenantId" + getTenantID() + " [" + super.toString() + "]";
    }

    @Override
    public int hashCode() {
        int result = serverID;
        result = 31 * result + tenantID;
        result = 31 * result + (serverURL != null ? serverURL.hashCode() : 0);
        result = 31 * result + (serverType != null ? serverType.hashCode() : 0);
        result = 31 * result + category;
        return result;
    }

    /**
     * Tests equivalency of two server objects. Two server objects are logically equal if
     *  1. Server ids are same. // Refers to same server in database.
     *      OR
     *  1. Tenant ids are same.
     *  2. Server URL and server type values are same.
     *  3. Additionally if the server type is 'EventingServer' the statistics 'category' also must be
     *     same.
     * @param o the other server to be tested equal.
     * @return
     */
    @Override
    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }

        if (o instanceof ServerDO) {
            ServerDO otherServer = (ServerDO)o;

            // ID's are same. So this must be the same server
            if ((serverID != 0 && otherServer.serverID != 0) && (serverID == otherServer.serverID)) {
                return true;
            }

            if (tenantID == otherServer.getTenantID()) {
                if (isRequiredFieldsNotNull(this) && isRequiredFieldsNotNull(otherServer)) {
                    if (serverURL.equals(otherServer.getServerURL()) &&
                        serverType.equals(otherServer.getServerType())) {
                        if (serverType.equals(BAMConstants.SERVER_TYPE_EVENTING)) {
                            if (category == otherServer.getCategory()) {
                                return true;
                            }
                        } else {
                            return true;
                        }
                    }
                }
            }

        }

        return false;

    }

    private boolean isRequiredFieldsNotNull(ServerDO server) {
        if (server.serverURL != null && server.serverType != null) {
            return true;
        }

        return false;
    }

}
