<%
var gregUrl = "https://localhost:9443/";
var apiprov = require('apistore');
var apiProvider = new apiprov.APIProvider();

function loginFunc(username, password, remoteAddress) {
    var url = gregUrl + "services/AuthenticationAdmin";
    var payload =
        <aut:login xmlns:aut="http://authentication.services.core.carbon.wso2.org">
            <aut:username>{username}</aut:username>
            <aut:password>{password}</aut:password>
            <aut:remoteAddress>{remoteAddress}</aut:remoteAddress>
        </aut:login>;
    var result = invokeService(url, payload, "urn:login");
    if (result.error) {
        log("Error while authenticating user : " + username + " at " + remoteAddress, "error");
        return {
            error:result.error,
            cookie:null
        };
    }
    var xml = result.client.responseE4X;
    var ns = "http://authentication.services.core.carbon.wso2.org";
    var status = xml.ns::["return"].text().toString();
    if (status == "false") {
        log("Error verifying credentials for user : " + username + " at " + remoteAddress, "error");
        return {
            error:true,
            cookie:null
        };
    }
    apiProvider.login(username, password);
    log(username);
    log(xml);
    var cookie = result.client.getResponseHeader("Set-Cookie");
    log(cookie);
    cookie = cookie.split(';')[0];
session.put("username", username);
    session.put("cookie", cookie);
    return {
        error:false,
        cookie:cookie
    };
}

function logoutFunc() {
    session.put("username", null);
    session.put("cookie", null);

    return {
        error:false
    };
}

function getUserFunc() {
    return {
        username:session.get("username"),
        cookie:session.get("cookie")
    };
}
function invokeService(url, payload, action, opts) {
    var ws = require('ws');
    var client = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.2;
    options.userWSA = 1.0;
    options.action = action;
    var user = getUserFunc();
    if (user.cookie) {
        options.HTTPHeaders = [
            { name:"Cookie", value:user.cookie }
        ];
    }
    if (opts) {
        for (var key in opts) {
            options[key] = opts[key];
        }
    }
    try {
        client.open(options, url, false);
        client.send(payload);
        return {
            client:client,
            error:false
        };
    } catch (e) {
        log("Error invoking service " + url + ", action : " + options.action + ", " + e.toString());
return {
        client:client,
        error:e
        };
}
}

//methods for usage monitoring
function getProviderAPIVersionUsageFunc(providerName, apiName, server) {
        var usage=  new Array();
        var usageout=  new Array();
        usage= apiProvider.getProviderAPIVersionUsage(providerName, apiName, server);
        for (var k = 0; k < usage.length ; k++){
        var elem = {
        version:usage[k].version,
        count:usage[k].count
        };
usageout.push(elem);


}
return {
        error:false,
        usage:usageout
        };
}

function getProviderAPIUsageFunc(providerName,server) {
        var usage=  new Array();
        var usageout=  new Array();
        usage= apiProvider.getProviderAPIUsage(providerName,server);
        if (usage == null) {
        return {
        error:true
        };

}else{
        for (var k = 0; k < usage.length ; k++){
        var elem = {
        apiName:usage[k].apiName,
        count:usage[k].count
        };
usageout.push(elem);


}
return {
        error:false,
        usage:usageout
        };}
}

function getProviderAPIUserUsageFunc(providerName,apiName,server) {
        var usage=  new Array();
        var usageout=  new Array();
        usage= apiProvider.getProviderAPIUserUsage(providerName,apiName,server);
        if (usage == null) {
        return {
        error:true
        };

}else{
        for (var k = 0; k < usage.length ; k++){
        var elem = {
        apiName:usage[k].api,
        count:usage[k].count
        };
usageout.push(elem);


}
return {
        error:false,
        usage:usageout
        };}
}

function getProviderAPIVersionLastAccessFunc(providerName,server) {
        var usage=  new Array();
        var usageout=  new Array();
        usage= apiProvider.getProviderAPIVersionLastAccess(providerName,server);
        if (usage == null) {
        return {
        error:true
        };

}else{
        for (var k = 0; k < usage.length ; k++){
        var elem = {
        api_version:usage[k].api_version,
        lastAccess:usage[k].lastAccess
        };
usageout.push(elem);


}
return {
        error:false,
        usage:usageout
        };}
}

function getProviderAPIServiceTimeFunc(providerName,server) {
        var usage=  new Array();
        var usageout=  new Array();
        usage= apiProvider.getProviderAPIServiceTime(providerName,server);
        if (usage == null) {
        return {
        error:true
        };

}else{
        for (var k = 0; k < usage.length ; k++){
        var elem = {
        apiName:usage[k].apiName,
        serviceTime:usage[k].serviceTime
        };
usageout.push(elem);


}
return {
        error:false,
        usage:usageout
        };}
}

//methods for usage monitoring

function getAPIFunc(apiName, version) {
        log("getAPIFunc");
        var providerName = getUserFunc().username;
        var apiOut = new Array();
        var apii = new Array();
        apii = apiProvider.getAPI(providerName, apiName, version);

        var temps = new Array();

        if (apii == null) {
        return {
        error:true
        };

} else {
        var elem = {
        name:apii[0],
        description:apii[1],
        endpoint:apii[2],
        wsdl:apii[3],
        version:apii[4],
        tags:apii[5],
        availableTiers:apii[6],
        status:apii[7],
        thumb:apii[8],
        context:apii[9],
        lastUpdated:apii[10],
        subs:apii[11],
        templates:apii[12]

        };
apiOut.push(elem);

return {
        error:false,
        api:apiOut
        };
}
}

function getAPIsByProviderFunc() {
        log("getAPIsByProviderFunc");
        var apisOut = new Array();
        var apis = new Array();
        var provider = getUserFunc().username;
        apis = apiProvider.getAPIsByProvider(provider);
        if (apis == null) {
        return {
        error:true
        };
}
else {
        for (var k = 0; k < apis.length; k++) {
        var elem = {
        name:apis[k].apiName,
        version:apis[k].version,
        status:apis[k].status,
        thumb:apis[k].thumb,
        subs:apis[k].subs

        };
apisOut.push(elem);
}
return {
        error:false,
        apis:apisOut
        };
}

}

function saveAPIFunc(apiData) {
        log("saveAPIFunc");
        apiData.provider=getUserFunc().username;
        apiData.request=request;
        var success=apiProvider.addAPI(apiData);
        if(success){return {
        error:false
        };}else{return {
        error:true
        };}
}

function getAllAPIUsageByProviderFunc() {
        log("getAllAPIUsageByProviderFunc");
        var subscribersOut = new Array();
        var subscribersArray = new Array();
        var provider = getUserFunc().username;
        subscribersArray = apiProvider.getAllAPIUsageByProvider(provider);
        if (subscribersArray == null) {
        return {
        error:true
        };

}else{
        for (var k = 0; k < subscribersArray.length; k++) {
        var elem = {
        userName:subscribersArray[k].userName,
        application:subscribersArray[k].application,
        apis:subscribersArray[k].apis
        };
subscribersOut.push(elem);
}
return {
        error:false,
        subscribers:subscribersOut
        }; }

}

function getSubscribersOfAPIFunc(apiName, version) {
        log("getSubscribersOfAPIFunc");
        var providerName = getUserFunc().username;
        var subscribersOut = new Array();
        var subscribersArray = new Array();
        subscribersArray = apiProvider.getSubscribersOfAPI(providerName, apiName, version);
        if (subscribersArray == null) {
        return {
        error:true
        };

}else{
        for (var k = 0; k < subscribersArray.length; k++) {
        var elem = {
        userName:subscribersArray[k].userName,
        subscribedDate:subscribersArray[k].subscribedDate
        };
subscribersOut.push(elem);
}
return {
        error:false,
        subscribers:subscribersOut
        };
}

}

function getSubscribedAPIsFunc(username) {
        log("getSubscribedAPIsFunc");
        var apisOut = new Array();
        var apis = new Array();
        apis = apiProvider.getSubscribedAPIs(username);
        if (apis == null) {
        return {
        error:true
        };
}
else {
        for (var k = 0; k < apis.length; k++) {
        var elem = {
        name:apis[k].apiName,
        version:apis[k].version,
        lastUpdatedDate:apis[k].updatedDate
        };
apisOut.push(elem);
}
return {
        error:false,
        apis:apisOut
        };
}
}

function updateAPIFunc(apiData) {
        log("updateAPIFunc");
        apiData.provider = getUserFunc().username;
        apiData.request=request;
        var success=apiProvider.updateAPI(apiData);
        if(success){
        return {
        error:false
        };}else{return {
        error:true

        };}

}

function getAllDocumentationFunc(apiName, version) {
        log("getAllDocumentationFunc");
        var providerName = getUserFunc().username;
        var docsOut = new Array();
        var docs = new Array();
        docs = apiProvider.getAllDocumentation(providerName, apiName, version);
        if (docs == null) {
        return {
        error:true
        };

}else{
        for (var k = 0; k < docs.length; k++) {

        var elem = {
        docName:docs[k].docName,
        docType:docs[k].docType,
        sourceType:docs[k].sourceType,
        summary:docs[k].summary,
        lastUpdated:docs[k].docLastUpdated
        };
if(docs[k].sourceUrl != null) {
        elem.docUrl = docs[k].sourceUrl;
        }
docsOut.push(elem);
}
return {
        error:false,
        docs:docsOut
        }; }

}

function getInlineContentFunc(apiName, version,docName) {
        log("getInlineContentFunc");
        var providerName = getUserFunc().username;
        var docOut = new Array();
        var doc = new Array();
        doc = apiProvider.getInlineContent(providerName, apiName, version,docName);
        var k=0;
        var elem = {
        apiProvider:providerName,
        apiName:apiName,
        apiVersion:version,
        docName:doc[k].docName,
        docContent:doc[k].content
        };

docOut.push(elem);

return {
        error:false,
        doc:docOut
        };

}

function addInlineContentFunc(apiName, version,docName,docContent) {
        log("addInlineContentFunc" + apiName + version + docName + docContent);
        var providerName = getUserFunc().username;
        var docOut = new Array();
        var doc = new Array();
        apiProvider.addInlineContent(providerName, apiName, version,docName,docContent);

        return {
        error:false,
        message:"success"
        };

}

function addDocumentationFunc(apiName, version, docName, docType, summary, sourceType, sourceUrl) {
        log("addDocumentationFunc" + sourceType);
        var providerName = getUserFunc().username;
        var success=apiProvider.addDocumentation(providerName, apiName, version, docName, docType, summary, sourceType, sourceUrl);
        if(sourceType=="inline"){
        addInlineContentFunc(apiName, version,docName,"");
        }
if(success){
        return {
        error:false
        };}else{return {
        error:true
        };}


}

function removeDocumentationFunc(apiName, version, docName, docType) {
        log("removeDocumentationFunc");
        var providerName = getUserFunc().username;
        var success=apiProvider.removeDocumentation(providerName, apiName, version, docName, docType);
        if(success){
        return {
        error:false
        };}else{return {
        error:true
        };}
}

function createNewAPIVersionFunc(apiName, version, newVersion) {
        log("createNewAPIVersionFunc");
        var providerName = getUserFunc().username;
        var success=apiProvider.createNewAPIVersion(providerName, apiName, version, newVersion);
        if(success){
        return {
        error:false
        };}else{
        return {
        error:true

        };
}
}

function isContextExistFunc(context) {
        log("isContextExistFunc");
        var contextExist = apiProvider.isContextExist(context);
        return {
        error:false,
        contextExist:contextExist
        };

}


%>