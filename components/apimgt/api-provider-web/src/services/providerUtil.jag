<%
var gregUrl = "https://localhost:9443/";
var apiprov = require('apistore');
var apiProvider = new apiprov.APIProvider();

function loginFunc(username, password, remoteAddress) {
    var url = gregUrl + "services/AuthenticationAdmin";
    var payload =
        <aut:login xmlns:aut="http://authentication.services.core.carbon.wso2.org">
            <aut:username>{username}</aut:username>
            <aut:password>{password}</aut:password>
            <aut:remoteAddress>{remoteAddress}</aut:remoteAddress>
        </aut:login>;
    var result = invokeService(url, payload, "urn:login");
    if (result.error) {
        log("Error while authenticating user : " + username + " at " + remoteAddress, "error");
        return {
            error:result.error,
            cookie:null
        };
    }
    var xml = result.client.responseE4X;
    var ns = "http://authentication.services.core.carbon.wso2.org";
    var status = xml.ns::["return"].text().toString();
    if (status == "false") {
        log("Error verifying credentials for user : " + username + " at " + remoteAddress, "error");
        return {
            error:true,
            cookie:null
        };
    }
    apiProvider.login(username, password);
    log(username);
    log(xml);
    var cookie = result.client.getResponseHeader("Set-Cookie");
    log(cookie);
    cookie = cookie.split(';')[0];
    session.put("username", username);
    session.put("cookie", cookie);
    return {
        error:false,
        cookie:cookie
    };
}

function logoutFunc() {
    session.put("username", null);
    session.put("cookie", null);

    return {
        error:false
    };
}

function getUserFunc() {
    return {
        username:session.get("username"),
        cookie:session.get("cookie")
    };
}
function invokeService(url, payload, action, opts) {
    var ws = require('ws');
    var client = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.2;
    options.userWSA = 1.0;
    options.action = action;
    var user = getUserFunc();
    if (user.cookie) {
        options.HTTPHeaders = [
            { name:"Cookie", value:user.cookie }
        ];
    }
    if (opts) {
        for (var key in opts) {
            options[key] = opts[key];
        }
    }
    try {
        client.open(options, url, false);
        client.send(payload);
        return {
            client:client,
            error:false
        };
    } catch (e) {
        log("Error invoking service " + url + ", action : " + options.action + ", " + e.toString());
        return {
            client:client,
            error:e
        };
    }
}

function getAPIsFunc() {
    var Services = new Array();
    var servicesout = new Array();
    Services = apiProvider.ListProvidersNames();
    for (var k = 0; k < Services.length; k++) {
        var elem = {
            name:Services[k].name,
            rate:Services[k].rates,
            author:Services[k].author
        };
        servicesout.push(elem);

    }
    return {
        error:false,
        services:servicesout
    };
}

//methods for usage monitoring 
function getAPIUsageHostTestFunc(apiName,server) {
        var usage=  new Array();
        var usageout=  new Array();
        usage= apiProvider.getAPIUsageTest(apiName,server);
        for (var k = 0; k < usage.length ; k++){
        var elem = {
        version:usage[k].version,
        count:usage[k].count
        };
        usageout.push(elem);


}
return {
        error:false,
        usage:usageout
        };
}

function getAllAPIUsageFunc(server) {
	log("getAllAPIUsageFunc "+server);
    var usage=  new Array();
    var usageout=  new Array();
    usage= apiProvider.getAllAPIUsage(server);
    for (var k = 0; k < usage.length ; k++){
    var elem = {
    apiName:usage[k].apiName,
    count:usage[k].count
    };
    usageout.push(elem);


}
return {
    error:false,
    usage:usageout
    };
}

//methods for usage monitoring 
function rateAPIFunc() {
    log("rateAPIFunc");
    apiProvider.setRating();
    return {
        error:false,
        message:"success"
    };
}
function getAPIFunc(apiName, version) {
    log("getAPIFunc");
    var providerName = getUserFunc().username;
    var apiOut = new Array();
    var apii = new Array();
    apii = apiProvider.getAPI(providerName, apiName, version);

    var temps = new Array();

    if (apii == null) {
        return {
            error:true
        };

    } else {
        var elem = {
            name:apii[0],
            description:apii[1],
            endpoint:apii[2],
            wsdl:apii[3],
            version:apii[4],
            tags:apii[5],
            availableTiers:apii[6],
            status:apii[7],
            thumb:apii[8],
            context:apii[9],
            lastUpdated:apii[10],
            subs:apii[11],
            templates:apii[12]

        };
        apiOut.push(elem);

        return {
            error:false,
            api:apiOut
        };
    }
}

function getAPIsByProviderFunc() {
    log("getAPIsByProviderFunc");
    var apisOut = new Array();
    var apis = new Array();
    var provider = getUserFunc().username;
    apis = apiProvider.getAPIsByProvider(provider);
    if (apis == null) {
        return {
            error:true
        };
    }
    else {
        for (var k = 0; k < apis.length; k++) {
            var elem = {
                name:apis[k].apiName,
                description:apis[k].description,
                endpoint:apis[k].endpoint,
                wsdl:apis[k].wsdl,
                version:apis[k].version,
                lastUpdatedDate:apis[k].updatedDate,
                availableTiers:apis[k].tier,
                tags:apis[k].tags,
                status:apis[k].status,
                thumb:apis[k].thumb,
                subs:apis[k].subs

            };
            apisOut.push(elem);
        }
        return {
            error:false,
            apis:apisOut
        };
    }

}


function getAPIIdentifiersFunc() {
    var Services = new Array();
    var apiIdtsout = new Array();
    Services = apiProvider.giveAPIIdentifiers();
    for (var k = 0; k < Services.length; k++) {
        var elem = {
            name:Services[k].name,
            provider:Services[k].provider,
            version:Services[k].version
        };
        apiIdtsout.push(elem);

    }
    return {
        error:false,
        services:apiIdtsout
    };
}

function getIdFunc() {
    var id = apiProvider.id;
    return {
        error:false,
        id:"" + id
    };
}
function setIdFunc(id) {
    apiProvider.setId(id);
    return {
        error:false,
        message:"success",
        id:id
    };
}


function getProvidersFunc() {
    var providers = new Array();
    var arrayout = new Array();
    providers = apiProvider.ListProvidersNames();
    for (var k = 0; k < providers.length; k++) {
        arrayout.push(providers[k]);
    }
    return {
        error:false,
        services:arrayout
    };
}

function saveAPIFunc(apiName, version, description, endpoint, wsdl, tags, tier, thumbUrl, context, uriTemplateArr, uriMethodArr) {
    log("saveAPIFunc");
    var provider = getUserFunc().username;
    apiProvider.addAPI(provider, apiName, version, description, endpoint, wsdl, tags, tier, thumbUrl, context, request, uriTemplateArr, uriMethodArr);
    return {
        error:false,
        message:"success"
    };
   }

function getAllAPIUsageByProviderFunc() {
    log("getAllAPIUsageByProviderFunc");
    var subscribersOut = new Array();
    var subscribersArray = new Array();
    var provider = getUserFunc().username;
    subscribersArray = apiProvider.getAllAPIUsageByProvider(provider);
    for (var k = 0; k < subscribersArray.length; k++) {
        var elem = {
            userName:subscribersArray[k].userName,
            application:subscribersArray[k].application,
            apis:subscribersArray[k].apis
        };
        subscribersOut.push(elem);
    }
    return {
        error:false,
        subscribers:subscribersOut
    };

}

function getSubscribersOfAPIFunc(apiName, version) {
    log("getSubscribersOfAPIFunc");
    var providerName = getUserFunc().username;
    var subscribersOut = new Array();
    var subscribersArray = new Array();
    subscribersArray = apiProvider.getSubscribersOfAPI(providerName, apiName, version);
    for (var k = 0; k < subscribersArray.length; k++) {
        var elem = {
            userName:subscribersArray[k].userName,
            subscribedDate:subscribersArray[k].subscribedDate,
            description:subscribersArray[k].description
        };
        subscribersOut.push(elem);
    }
    return {
        error:false,
        subscribers:subscribersOut
    };

}

function getSubscribedAPIsFunc(username) {
    log("getSubscribedAPIsFunc");
    var apisOut = new Array();
    var apis = new Array();
    apis = apiProvider.getSubscribedAPIs(username);
    for (var k = 0; k < apis.length; k++) {
        var elem = {
            name:apis[k].apiName,
            description:apis[k].description,
            endpoint:apis[k].endpoint,
            wsdl:apis[k].wsdl,
            version:apis[k].version,
            lastUpdatedDate:apis[k].updatedDate,
            availableTiers:apis[k].tier,
            status:apis[k].status,
            thumb:apis[k].thumb
        };
        apisOut.push(elem);
    }
    return {
        error:false,
        apis:apisOut
    };
}

function updateAPIFunc(apiName, version, description, imageUrl, endpoint, wsdl, tags, tier, status, resourceTemplate, resourceMethod, resourceUri, context, uriTemplateArr, uriMethodArr) {
    log("updateAPIFunc");
    var providerName = getUserFunc().username;
    apiProvider.updateAPI(providerName, apiName, version, description, imageUrl, endpoint, wsdl, tags, tier, status, resourceTemplate, resourceMethod, resourceUri, context, request, uriTemplateArr, uriMethodArr);
    return {
        error:false,
        message:"success"
    };

}

function getAllDocumentationFunc(apiName, version) {
    log("getAllDocumentationFunc");
    var providerName = getUserFunc().username;
    var docsOut = new Array();
    var docs = new Array();
    docs = apiProvider.getAllDocumentation(providerName, apiName, version);
    for (var k = 0; k < docs.length; k++) {
    	
    	
        var elem = {
            docName:docs[k].docName,
            docType:docs[k].docType,
            sourceType:docs[k].sourceType,
            summary:docs[k].summary,
            lastUpdated:docs[k].docLastUpdated
        };
        if(docs[k].sourceUrl != null) {
            elem.docUrl = docs[k].sourceUrl;
        }
        docsOut.push(elem);
    }
    return {
        error:false,
        docs:docsOut
    };

}

function getInlineContentFunc(apiName, version,docName) {
    log("getInlineContentFunc");
    var providerName = getUserFunc().username;
    var docOut = new Array();
    var doc = new Array();
    doc = apiProvider.getInlineContent(providerName, apiName, version,docName);
    var k=0;
    	log('doc[k].content '+doc[k].content);
    	log(doc[k].content.length);
        var elem = {
        	apiProvider:providerName,
        	apiName:apiName,
        	apiVersion:version,
            docName:doc[k].docName,
            docContent:doc[k].content
        };
       
        docOut.push(elem);
    
    return {
        error:false,
        doc:docOut
    };

}

function addInlineContentFunc(apiName, version,docName,docContent) {
    log("addInlineContentFunc"+apiName+ version+docName+docContent);
    var providerName = getUserFunc().username;
    var docOut = new Array();
    var doc = new Array();
    apiProvider.addInlineContent(providerName, apiName, version,docName,docContent);

        return {
            error:false,
            message:"success"
        };

}

function addDocumentationFunc(apiName, version, docName, docType, summary, sourceType, sourceUrl) {
    log("addDocumentationFunc"+sourceType);
    var providerName = getUserFunc().username;
    apiProvider.addDocumentation(providerName, apiName, version, docName, docType, summary, sourceType, sourceUrl);
    if(sourceType=="inline"){
    	addInlineContentFunc(apiName, version,docName,"");
    }
    return {
        error:false,
        message:"success"
    };


}

function removeDocumentationFunc(apiName, version, docName, docType) {
    log("removeDocumentationFunc");
    var providerName = getUserFunc().username;
    apiProvider.removeDocumentation(providerName, apiName, version, docName, docType);
    log(docName + " removed")
    return {
        error:false,
        message:"success"
    };
}

function createNewAPIVersionFunc(apiName, version, newVersion) {
    log("createNewAPIVersionFunc");
    var providerName = getUserFunc().username;
    apiProvider.createNewAPIVersion(providerName, apiName, version, newVersion);
    return {
        error:false,
        message:"success"
    };


}

function isContextExistFunc(context) {
    log("isContextExistFunc");
    var contextExist = apiProvider.isContextExist(context);
    return {
        error:false,
        contextExist:contextExist
    };

}


%>