<%

include("/services/providerUtil.jag");

function login(username, password) {
    var remoteAddress = "localhost";
    var user = getUserFunc();
    if (user.username != null) {
       return getDataJSON({error:true}, null, "A user already logged in, please signout first");

    }
    var result = loginFunc(username, password, remoteAddress);
    if(result.error) {
        result.error = true;
    }
    //In order to prevent GReg cookie being sent to the browser
    delete result.cookie;
    return getDataJSON(result, "Login successful for user " + username,
            "Error while authenticating user : " + username + " at " + remoteAddress);
}

function logout() {
    var result = logoutFunc();
    return getDataJSON(result, "User logged out", null);
}
function getUser() {
    return getDataJSON(getUserFunc(), null, "Error while getting logged in user");
}

function getServices() {
    return getDataJSON(getAPIsFunc(), null, "Error while listing services");
}
function getAPIIdentifiers() {
    return getDataJSON(getAPIIdentifiersFunc(), null, "Error while get API Identifiers");
}
function getProviders() {
    return getDataJSON(getProvidersFunc(), null, "Error while get API Providers");
}
//methods for usage monitoring 
function getAPIUsageHostTest(apiName,server) {
    return getDataJSON(getAPIUsageHostTestFunc(apiName,server), null, "Error while get API Usage Test Details");
}
function getAllAPIUsage(server) {
    return getDataJSON(getAllAPIUsageFunc(server), null, "Error while get All API Usage Details");
}

//end method list for usage monitoring 

function getId() {
    return getDataJSON(getIdFunc(), null, "Error while get ID for testing");
}
function setId(id) {
    return getDataJSON(setIdFunc(id), null, "Error while set Id for testing");
}
function rateAPI() {
    return getDataJSON(rateAPIFunc(), null, "Error while Rating API");
}
function getAPI(apiName,version) {
    return getDataJSON(getAPIFunc(apiName,version), null, "Error while getting API");
}
function getInlineContent(apiName,version,docName) {
    return getDataJSON(getInlineContentFunc(apiName,version,docName), null, "Error while getting Inline Content");
}
function addInlineContent(apiName,version,docName,docContent) {
    return getDataJSON(addInlineContentFunc(apiName,version,docName,docContent), null, "Error while adding Inline Content");
}
function getAPIsByProvider() {
    return getDataJSON(getAPIsByProviderFunc(), null, "Error while Rating API");
}
function saveAPI(apiName,version,description,endpoint,wsdl,tags,tier,thumbUrl,context, uriTemplateArr, uriMethodArr) {
    return getDataJSON(saveAPIFunc(apiName,version,description,endpoint,wsdl,tags,tier,thumbUrl,context, uriTemplateArr, uriMethodArr), null, "Error while adding API");
}
function getAllAPIUsageByProvider() {
    return getDataJSON(getAllAPIUsageByProviderFunc(), null, "Error while getting subscribers for a provider");
}
function getSubscribersOfAPI(apiName,version) {
    return getDataJSON(getSubscribersOfAPIFunc(apiName,version),null, "Error while getting subscribers for a provider");
}
function getSubscribedAPIs(username) {
    return getDataJSON(getSubscribedAPIsFunc(username), null, "Error while getting subscribed APIs");
}
function updateAPI(apiName,version,description,imageUrl,endpoint,wsdl,tags,tier,status,resourceTemplate,resourceMethod,resourceUri,context, uriTemplateArr, uriMethodArr) {
    return getDataJSON(updateAPIFunc(apiName,version,description,imageUrl,endpoint,wsdl,tags,tier,status,resourceTemplate,resourceMethod,resourceUri,context, uriTemplateArr, uriMethodArr), null, "Error while updating API");
}
function getAllDocumentation(apiName,version) {
    return getDataJSON(getAllDocumentationFunc(apiName,version), null, "Error while getting all documentation per API");
}
function addDocumentation(apiName,version,docName,docType,summary,sourceType,sourceUrl) {
    return getDataJSON(addDocumentationFunc(apiName,version,docName,docType,summary,sourceType,sourceUrl), null, "Error while adding a new documentation");
}
function removeDocumentation(apiName,version,docName,docType) {
    return getDataJSON(removeDocumentationFunc(apiName,version,docName,docType), null, "Error while adding a new documentation");
}
function createNewAPIVersion(apiName,version,newVersion) {
    return getDataJSON(createNewAPIVersionFunc(apiName,version,newVersion), null, "Error while creating a new version of API");
}
function isContextExist(context) {
    return getDataJSON(isContextExistFunc(context), null, "Error while adding creating a new version of API");
}

function getDataJSON(result, successMsg, errorMsg) {
    if (result.error) {
        return {
            error:true,
            message:errorMsg,
            data:null
        };
    }
    var data = {};
    for (var key in result) {
        if (result.hasOwnProperty(key)) {
            if (key == "error") {
                continue;
            }
            data[key] = result[key];
        }
    }
    return {
        error:false,
        message:successMsg,
        data:data
    };
}

%>