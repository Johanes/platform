<%
var data = data || { "$":{ "page":{ "header":{} }, "layout":{} } };
var templates = templates || {};

var getTemplateFile = function (template) {
    return getTemplatesDir() + template + "/template.jag";
};

var getInitializerFile = function (template) {
    return getTemplatesDir() + template + "/initializer.js";
};

var getTheme = function () {
    //TODO : remove following lines if theme switching need to be avoided
    var theme = request.getParameter("theme");
    if (theme) {
        return theme;
    }
    var site = require("/site/conf/site.json");
    return site.theme;
};

var getThemesPath = function () {
    return "/site/themes/";
};

var getThemePath = function () {
    var site = require("/site/conf/site.json");
    return getThemesPath() + getTheme() + "/";
};

var getDefaultThemePath = function () {
    return getThemesPath() + "default/";
};

var getTemplatesDir = function () {
    return getThemePath() + "tmpl/";
};

var getThemeFile = function (path) {
    var prefix = getThemePath();
    var def = getDefaultThemePath();
    var tmpPath = prefix + path;
    var file = new File(tmpPath);
    return file.exists ? tmpPath : def + path;
};

var mergeData = function (data, dataDef) {
    data = data || {};
    for (var key in dataDef) {
        if (dataDef.hasOwnProperty(key)) {
            var fn = data[key];
            if (!fn) {
                data[key] = dataDef[key];
            }
        }
    }
    return data;
};

var renderPage = function (data) {
    var tpls = templates;
    var name = data.name;
    var css = data.css;
    var js = data.js;
    var code = data.code;

    var initTemplates = function (tpls, name, d, data) {
        if (tpls[name]) {
            return;
        }
        var initializer = require(getInitializerFile(name));
        tpls[name] = initializer;
        initializer.initialize(data);

        var tmpls = initializer.getTemplates();
        var i, length = tmpls.length;
        for (i = 0; i < length; i++) {
            initTemplates(tpls, tmpls[i], null, data);
        }
        d = mergeData(d, initializer.getData());
        var j, len, vars = initializer.getTemplateVars();
        length = vars.length;
        for (j = 0; j < length; j++) {
            var vname = vars[j];
            var v = d[vname];
            if (!v) {
                continue;
            }
            if (!(v instanceof Array)) {
                initTemplates(tpls, v.name, v.data, data);
                return;
            }
            len = v.length;
            for (var k = 0; k < len; k++) {
                var el = v[k];
                initTemplates(tpls, el.name, el.data, data);
            }
        }
    };

    var d = data.data;
    if (!d) {
        d = {};
        data.data = d;
    }
    initTemplates(tpls, name, d, data);
    log(data);
    var initializer = tpls[name];
    var params = initializer.getParams(d);
    include(getTemplateFile(name));
    var fn = template;
    fn(d, params);
};

var includeTemplate = function (name, data) {
    var tpls = templates;
    var initializer = tpls[name];
    var params = initializer.getParams(data);
    include(getTemplateFile(name));
    var fn = template;
    fn(data, params);
};

var includeTemplates = function (tmpls) {
    var i, tmpl, length = tmpls.length;
    for (i = 0; i < length; i++) {
        tmpl = tmpls[i];
        includeTemplate(tmpl.name, tmpl.data);
    }
};

var addHeaderCSS = function (data, template, key, css) {
    css = getThemeFile(css);
    var obj = data.css;
    if (!obj) {
        obj = {};
        data.css = obj;
    }
    var tmpl = obj[template];
    if (tmpl) {
        tmpl[key] = css;
    } else {
        tmpl = {};
        obj[template] = tmpl;
        tmpl[key] = css;
    }
};

var addHeaderJS = function (data, template, key, js) {
    js = getThemeFile(js);
    var obj = data.js;
    if (!obj) {
        obj = {};
        data.js = obj;
    }
    var tmpl = obj[template];
    if (tmpl) {
        tmpl[key] = js;
    } else {
        tmpl = {};
        obj[template] = tmpl;
        tmpl[key] = js;
    }
};

var addHeaderCode = function (data, template, key, code) {
    var obj = data.code;
    if (!obj) {
        obj = {};
        data.code = obj;
    }
    var tmpl = obj[template];
    if (tmpl) {
        tmpl[key] = code;
    } else {
        tmpl = {};
        obj[template] = tmpl;
        tmpl[key] = code;
    }
};

%>