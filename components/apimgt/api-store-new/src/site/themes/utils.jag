<%
var templates = templates || {};

Log.prototype.isDebugEnabled = function () {
    return false;
};

var getTemplateFile = function (initializer) {
    return getThemeFile(initializer.getTemplateFile());
};

var getInitializerFile = function (template) {
    return getTemplatesDir() + template + "/initializer.js";
};

var getTheme = function () {
    //TODO : remove following lines if theme switching need to be avoided
    var theme = request.getParameter("theme");
    if (theme) {
        return theme;
    }
    var site = require("/site/conf/site.json");
    return site.theme;
};

var getThemesPath = function () {
    return "/site/themes/";
};

var getThemePath = function () {
    var site = require("/site/conf/site.json");
    return getThemesPath() + getTheme() + "/";
};

var getDefaultThemePath = function () {
    return getThemesPath() + "default/";
};

var getTemplatesDir = function () {
    return getThemePath() + "tmpl/";
};

var getThemeFile = function (path) {
    var prefix = getThemePath();
    var def = getDefaultThemePath();
    var tmpPath = prefix + path;
    var file = new File(tmpPath);
    return file.exists ? tmpPath : def + path;
};

var mergeData = function (params, paramsDef) {
    params = params || {};
    for (var key in paramsDef) {
        if (paramsDef.hasOwnProperty(key)) {
            var obj = params[key];
            if (!obj) {
                params[key] = paramsDef[key];
            }
        }
    }
    return params;
};

var renderPage = function (global) {
    var log = new Log();
    if (log.isDebugEnabled()) {
        log.debug("=============== renderPage(global) ===================");
    }
    var tpls = templates;
    var name = global.name;
    var css = global.css;
    var js = global.js;
    var code = global.code;

    var setTemplates = function (inserted, tmpls, keys, params) {
        var i, tpl, length, tpls, key = keys[0];
        var kys = keys.slice(1);
        length = kys.length;
        tpls = params[key];
        if (length == 0) {
            if (!tpls) {
                return;
            }
            if (tpls instanceof Array) {
                for (i = 0; i < tpls.length; i++) {
                    tpl = tpls[i];
                    if (!inserted[tpl.name]) {
                        inserted[tpl.name] = true;
                        tmpls.push(tpl);
                    }
                }
            } else {
                if (!inserted[tpls.name]) {
                    inserted[tpls.name] = true;
                    tmpls.push(tpls);
                }
            }
            return;
        }

        if (tpls instanceof Array) {
            for (i = 0; i < tpls.length; i++) {
                setTemplates(inserted, tmpls, kys, tpls[i]);
            }
        } else {
            setTemplates(inserted, tmpls, kys, tpls);
        }
    };

    var initTemplates = function (tpls, name, params, global) {
        if (log.isDebugEnabled()) {
            log.debug("=============== initTemplates(tpls, name, params, global) ===================");
            log.debug("tpls >>> " + stringify(tpls));
            log.debug("name >>> " + stringify(name));
        }
        if (tpls[name]) {
            return;
        }
        if (log.isDebugEnabled()) {
            log.debug("initializer >>> " + getInitializerFile(name));
        }
        var initializer = require(getInitializerFile(name));
        tpls[name] = initializer;
        initializer.initialize(global);

        var tmpls = initializer.getTemplates();
        if (log.isDebugEnabled()) {
            log.debug("templates >>> " + stringify(tmpls));
        }
        var i, length = tmpls.length;
        for (i = 0; i < length; i++) {
            initTemplates(tpls, tmpls[i], null, global);
        }

        params = mergeData(params, initializer.getParams());
        if (log.isDebugEnabled()) {
            log.debug("merged params >>> " + getInitializerFile(name));
        }
        var j, k, keys, values, inserted, d, tpl, len, vars = initializer.getTemplateParams();

        length = vars.length;
        for (j = 0; j < length; j++) {
            keys = vars[j];
            if (keys instanceof Array) {
                values = [];
                inserted = {};
                setTemplates(inserted, values, keys, params);
            } else {
                values = params[keys];
            }
            if (!values) {
                continue;
            }
            if (!(values instanceof Array)) {
                d = values.params || (values.params = {});
                initTemplates(tpls, values.name, d, global);
                continue;
            }
            len = values.length;
            for (k = 0; k < len; k++) {
                tpl = values[k];
                d = tpl.params || (tpl.params = {});
                initTemplates(tpls, tpl.name, d, global);
            }
        }
    };

    var params = global.params || (global.params = {});
    initTemplates(tpls, name, params, global);
    var initializer = tpls[name];
    var data = initializer.getData(params);
    if (log.isDebugEnabled()) {
        log.debug("including template >>> " + getTemplateFile(initializer));
    }
    template = null;
    include(getTemplateFile(initializer));
    var fn = template;
    if (!fn) {
        log.error("Template header and footer includes are missing for : " + name);
    }
    fn(data, params, global);
};

var includeTemplate = function (name, params, global) {
    var log = new Log();
    if (log.isDebugEnabled()) {
        log.debug("=================includeTemplate(name, data, global)====================");
        log.debug("name >>> " + stringify(name));
    }
    var tpls = templates;
    var initializer = tpls[name];
    var data = initializer.getData(params);
    if (log.isDebugEnabled()) {
        log.debug("including template >>> " + getTemplateFile(initializer));
    }
    template = null;
    include(getTemplateFile(initializer));
    var fn = template;
    if (!fn) {
        log.error("Template header and footer includes are missing for : " + name);
    }
    fn(data, params, global);
};

var includeTemplates = function (tmpls, global) {
    if (!tmpls) {
        return;
    }
    if (tmpls instanceof Array) {
        var i, tmpl, length = tmpls.length;
        for (i = 0; i < length; i++) {
            tmpl = tmpls[i];
            includeTemplate(tmpl.name, tmpl.params, global);
        }
    } else {
        includeTemplate(tmpls.name, tmpls.params, global);
    }
};

var includeJag = function (path) {
    include(getThemeFile(path));
};

var addHeaderCSS = function (global, template, key, css) {
    css = getThemeFile(css);
    insertGlobal(global, template, "css", key, css);
};

var addHeaderJS = function (global, template, key, js) {
    js = getThemeFile(js);
    insertGlobal(global, template, "js", key, js);
};

var addHeaderCode = function (global, template, key, code) {
    insertGlobal(global, template, "code", key, code);
};

var insertGlobal = function (global, template, name, key, value) {
    var obj = global[name] || (global[name] = {});
    var tmpl = obj[template];
    tmpl = tmpl || (obj[template] = {});
    tmpl[key] = value;
};
%>