/**
 * Copyright (c) 2009, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.wso2.carbon.bam.analyzer.ui;

import org.apache.axis2.AxisFault;
import org.apache.axis2.client.Options;
import org.apache.axis2.client.ServiceClient;
import org.apache.axis2.context.ConfigurationContext;
import org.wso2.carbon.bam.index.stub.IndexAdminServiceConfigurationException;
import org.wso2.carbon.bam.index.stub.IndexAdminServiceIndexingException;
import org.wso2.carbon.bam.index.stub.IndexAdminServiceStoreException;
import org.wso2.carbon.bam.index.stub.IndexAdminServiceStub;
import org.wso2.carbon.bam.index.stub.service.types.CursorDTO;
import org.wso2.carbon.bam.index.stub.service.types.IndexDTO;
import org.wso2.carbon.bam.index.stub.service.types.TableDTO;

import java.rmi.RemoteException;

public class IndexAdminClient {

    private IndexAdminServiceStub stub;

    private String INDEX_ADMIN_SERVICE_URL = "IndexAdminService";

    public static final int TABLES_PER_PAGE = 10;
    
    public static final int INDEXES_PER_PAGE = 10;

    public IndexAdminClient(String cookie, String backendServerURL,
                               ConfigurationContext configCtx) throws AxisFault {
        String serviceURL = backendServerURL + INDEX_ADMIN_SERVICE_URL;
        stub = new IndexAdminServiceStub(configCtx, serviceURL);
        ServiceClient client = stub._getServiceClient();
        Options option = client.getOptions();
        option.setManageSession(true);
        option.setProperty(org.apache.axis2.transport.http.HTTPConstants.COOKIE_STRING, cookie);
    }
    
    public int getTableCount(boolean includeAutoGenerated) throws AxisFault {
        try {
            return stub.getTableCount(includeAutoGenerated);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch table count..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to fetch table count..", e);
        }
    }
    
    public TableDTO[] getAllTableMetaData(boolean includeAutoGenerated) throws AxisFault {
        try {
            return stub.getAllTableMetaData(includeAutoGenerated);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch table meta data..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to fetch table meta data..", e);
        }
    }
    
    public TableDTO[] getTableMetaData(int pageNumber, int tablesPerPage,
                                       boolean includeAutoGenerated) throws AxisFault {
        try {
            return stub.getTableMetaData(pageNumber, tablesPerPage, includeAutoGenerated);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch tables..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Credentials invalid or not supplied yet.", e);
        }
    }
    
    public TableDTO getTableMetaData(String tableName) throws AxisFault {
        try {
            return stub.getSingleTableMetaData(tableName);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch table meta data..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to fetch table meta data..", e);
        }
    }
    
    public void createTable(TableDTO table) throws AxisFault {
        try {
            stub.createTable(table);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to create table..", e);
        } catch (IndexAdminServiceStoreException e) {
            throw new AxisFault("Unable to create table..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to create table..", e);
        }
    }
    
    public void deleteTable(String tableName) throws AxisFault {
        try {
            stub.deleteTable(tableName);
        } catch (RemoteException e) {
            throw new AxisFault("Error while deleting table..", e);
        } catch (IndexAdminServiceStoreException e) {
            throw new AxisFault("Error while deleting table..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Error while deleting table..", e);
        }
    }
    
    public CursorDTO[] getAllCursors() throws AxisFault {
        try {
            return stub.getAllCursors();
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch cursors..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Credentials invalid or not supplied yet.", e);
        }
    }

    public void createIndex(IndexDTO index) throws AxisFault {
        try {
            stub.createIndex(index);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to create index..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to create index..", e);
        } catch (IndexAdminServiceIndexingException e) {
            throw new AxisFault("Unable to create index..", e);
        }
    }

    public void editIndex(IndexDTO index) throws AxisFault {
        try {
            stub.editIndex(index);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to edit index..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to edit index..", e);
        } catch (IndexAdminServiceIndexingException e) {
            throw new AxisFault("Unable to edit index..", e);
        }
    }
    
    public void deleteIndex(String indexName) throws AxisFault {
        try {
            stub.deleteIndex(indexName);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to delete index..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to delete index..", e);
        } catch (IndexAdminServiceIndexingException e) {
            throw new AxisFault("Unable to delete index..", e);
        }
    }
    
    public IndexDTO getIndex(String indexName) throws AxisFault {
        try {
            return stub.getIndex(indexName);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to get index meta data..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to get index meta data..", e);
        }
    }

    public int getIndexCount() throws AxisFault {
        try {
            return stub.getIndexCount();
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch index count..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to fetch index count..", e);
        }
    }

    public IndexDTO[] getIndexMetaData(int pageNumber, int indexesPerPage) throws AxisFault {
        try {
            return stub.getIndexMetaData(pageNumber, indexesPerPage);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch indexes..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Credentials invalid or not supplied yet.", e);
        }
    }
    
    public String[] getIndexValues(String indexName, String indexColumn) throws AxisFault {
        try {
            return stub.getIndexValues(indexName, indexColumn);
        } catch (RemoteException e) {
            throw new AxisFault("Unable fetch index values..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable fetch index values..", e);
        } catch (IndexAdminServiceIndexingException e) {
            throw new AxisFault("Unable fetch index values..", e);
        }

    }
    
    public String getDataSourceTypeOfTable(String tableName) throws AxisFault {
        try {
            return stub.getDataSourceTypeOfTable(tableName);
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch table meta information..", e);
        } catch (IndexAdminServiceConfigurationException e) {
            throw new AxisFault("Unable to fetch table meta information..", e);
        }
    }
    
    public String[] getDataSourceTypes() throws AxisFault {
        try {
            return stub.getDataSourceTypes();
        } catch (RemoteException e) {
            throw new AxisFault("Unable to fetch data source types..", e);
        }
    }

}
