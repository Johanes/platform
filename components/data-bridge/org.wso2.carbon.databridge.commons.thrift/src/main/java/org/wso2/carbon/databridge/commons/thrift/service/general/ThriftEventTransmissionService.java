/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.wso2.carbon.databridge.commons.thrift.service.general;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.wso2.carbon.databridge.commons.thrift.data.ThriftEventBundle;
import org.wso2.carbon.databridge.commons.thrift.exception.ThriftDifferentStreamDefinitionAlreadyDefinedException;
import org.wso2.carbon.databridge.commons.thrift.exception.ThriftMalformedStreamDefinitionException;
import org.wso2.carbon.databridge.commons.thrift.exception.ThriftNoStreamDefinitionExistException;
import org.wso2.carbon.databridge.commons.thrift.exception.ThriftSessionExpiredException;
import org.wso2.carbon.databridge.commons.thrift.exception.ThriftStreamDefinitionException;
import org.wso2.carbon.databridge.commons.thrift.exception.ThriftUndefinedEventTypeException;

public class ThriftEventTransmissionService {

  public interface Iface {

    public String defineStream(String sessionId, String streamDefinition) throws
                                                                               ThriftDifferentStreamDefinitionAlreadyDefinedException,
                                                                               ThriftMalformedStreamDefinitionException,
                                                                               ThriftStreamDefinitionException,
                                                                               ThriftSessionExpiredException, org.apache.thrift.TException;

    public String findStreamId(String sessionId, String streamName, String streamVersion) throws
                                                                                               ThriftNoStreamDefinitionExistException,
                                                                                               ThriftSessionExpiredException, org.apache.thrift.TException;

    public void publish(ThriftEventBundle eventBundle) throws ThriftUndefinedEventTypeException,
                                                              ThriftSessionExpiredException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void defineStream(String sessionId, String streamDefinition, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.defineStream_call> resultHandler) throws org.apache.thrift.TException;

    public void findStreamId(String sessionId, String streamName, String streamVersion, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findStreamId_call> resultHandler) throws org.apache.thrift.TException;

    public void publish(ThriftEventBundle eventBundle, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.publish_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String defineStream(String sessionId, String streamDefinition) throws
                                                                               ThriftDifferentStreamDefinitionAlreadyDefinedException,
                                                                               ThriftMalformedStreamDefinitionException,
                                                                               ThriftStreamDefinitionException,
                                                                               ThriftSessionExpiredException, org.apache.thrift.TException
    {
      send_defineStream(sessionId, streamDefinition);
      return recv_defineStream();
    }

    public void send_defineStream(String sessionId, String streamDefinition) throws org.apache.thrift.TException
    {
      defineStream_args args = new defineStream_args();
      args.setSessionId(sessionId);
      args.setStreamDefinition(streamDefinition);
      sendBase("defineStream", args);
    }

    public String recv_defineStream() throws
                                           ThriftDifferentStreamDefinitionAlreadyDefinedException,
                                           ThriftMalformedStreamDefinitionException,
                                           ThriftStreamDefinitionException,
                                           ThriftSessionExpiredException, org.apache.thrift.TException
    {
      defineStream_result result = new defineStream_result();
      receiveBase(result, "defineStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ade != null) {
        throw result.ade;
      }
      if (result.mtd != null) {
        throw result.mtd;
      }
      if (result.tde != null) {
        throw result.tde;
      }
      if (result.se != null) {
        throw result.se;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "defineStream failed: unknown result");
    }

    public String findStreamId(String sessionId, String streamName, String streamVersion) throws
                                                                                               ThriftNoStreamDefinitionExistException,
                                                                                               ThriftSessionExpiredException, org.apache.thrift.TException
    {
      send_findStreamId(sessionId, streamName, streamVersion);
      return recv_findStreamId();
    }

    public void send_findStreamId(String sessionId, String streamName, String streamVersion) throws org.apache.thrift.TException
    {
      findStreamId_args args = new findStreamId_args();
      args.setSessionId(sessionId);
      args.setStreamName(streamName);
      args.setStreamVersion(streamVersion);
      sendBase("findStreamId", args);
    }

    public String recv_findStreamId() throws ThriftNoStreamDefinitionExistException,
                                                  ThriftSessionExpiredException, org.apache.thrift.TException
    {
      findStreamId_result result = new findStreamId_result();
      receiveBase(result, "findStreamId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tnde != null) {
        throw result.tnde;
      }
      if (result.se != null) {
        throw result.se;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStreamId failed: unknown result");
    }

    public void publish(ThriftEventBundle eventBundle) throws ThriftUndefinedEventTypeException,
                                                              ThriftSessionExpiredException, org.apache.thrift.TException
    {
      send_publish(eventBundle);
      recv_publish();
    }

    public void send_publish(ThriftEventBundle eventBundle) throws org.apache.thrift.TException
    {
      publish_args args = new publish_args();
      args.setEventBundle(eventBundle);
      sendBase("publish", args);
    }

    public void recv_publish() throws ThriftUndefinedEventTypeException,
                                      ThriftSessionExpiredException, org.apache.thrift.TException
    {
      publish_result result = new publish_result();
      receiveBase(result, "publish");
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.se != null) {
        throw result.se;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void defineStream(String sessionId, String streamDefinition, org.apache.thrift.async.AsyncMethodCallback<defineStream_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      defineStream_call method_call = new defineStream_call(sessionId, streamDefinition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class defineStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String streamDefinition;
      public defineStream_call(String sessionId, String streamDefinition, org.apache.thrift.async.AsyncMethodCallback<defineStream_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.streamDefinition = streamDefinition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("defineStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        defineStream_args args = new defineStream_args();
        args.setSessionId(sessionId);
        args.setStreamDefinition(streamDefinition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ThriftDifferentStreamDefinitionAlreadyDefinedException,
                                       ThriftMalformedStreamDefinitionException,
                                       ThriftStreamDefinitionException,
                                       ThriftSessionExpiredException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_defineStream();
      }
    }

    public void findStreamId(String sessionId, String streamName, String streamVersion, org.apache.thrift.async.AsyncMethodCallback<findStreamId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStreamId_call method_call = new findStreamId_call(sessionId, streamName, streamVersion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStreamId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String streamName;
      private String streamVersion;
      public findStreamId_call(String sessionId, String streamName, String streamVersion, org.apache.thrift.async.AsyncMethodCallback<findStreamId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.streamName = streamName;
        this.streamVersion = streamVersion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStreamId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStreamId_args args = new findStreamId_args();
        args.setSessionId(sessionId);
        args.setStreamName(streamName);
        args.setStreamVersion(streamVersion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ThriftNoStreamDefinitionExistException,
                                       ThriftSessionExpiredException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStreamId();
      }
    }

    public void publish(ThriftEventBundle eventBundle, org.apache.thrift.async.AsyncMethodCallback<publish_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publish_call method_call = new publish_call(eventBundle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publish_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftEventBundle eventBundle;
      public publish_call(ThriftEventBundle eventBundle, org.apache.thrift.async.AsyncMethodCallback<publish_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventBundle = eventBundle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publish", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publish_args args = new publish_args();
        args.setEventBundle(eventBundle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ThriftUndefinedEventTypeException,
                                     ThriftSessionExpiredException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_publish();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("defineStream", new defineStream());
      processMap.put("findStreamId", new findStreamId());
      processMap.put("publish", new publish());
      return processMap;
    }

    private static class defineStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, defineStream_args> {
      public defineStream() {
        super("defineStream");
      }

      protected defineStream_args getEmptyArgsInstance() {
        return new defineStream_args();
      }

      protected defineStream_result getResult(I iface, defineStream_args args) throws org.apache.thrift.TException {
        defineStream_result result = new defineStream_result();
        try {
          result.success = iface.defineStream(args.sessionId, args.streamDefinition);
        } catch (ThriftDifferentStreamDefinitionAlreadyDefinedException ade) {
          result.ade = ade;
        } catch (ThriftMalformedStreamDefinitionException mtd) {
          result.mtd = mtd;
        } catch (ThriftStreamDefinitionException tde) {
          result.tde = tde;
        } catch (ThriftSessionExpiredException se) {
          result.se = se;
        }
        return result;
      }
    }

    private static class findStreamId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStreamId_args> {
      public findStreamId() {
        super("findStreamId");
      }

      protected findStreamId_args getEmptyArgsInstance() {
        return new findStreamId_args();
      }

      protected findStreamId_result getResult(I iface, findStreamId_args args) throws org.apache.thrift.TException {
        findStreamId_result result = new findStreamId_result();
        try {
          result.success = iface.findStreamId(args.sessionId, args.streamName, args.streamVersion);
        } catch (ThriftNoStreamDefinitionExistException tnde) {
          result.tnde = tnde;
        } catch (ThriftSessionExpiredException se) {
          result.se = se;
        }
        return result;
      }
    }

    private static class publish<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publish_args> {
      public publish() {
        super("publish");
      }

      protected publish_args getEmptyArgsInstance() {
        return new publish_args();
      }

      protected publish_result getResult(I iface, publish_args args) throws org.apache.thrift.TException {
        publish_result result = new publish_result();
        try {
          iface.publish(args.eventBundle);
        } catch (ThriftUndefinedEventTypeException ue) {
          result.ue = ue;
        } catch (ThriftSessionExpiredException se) {
          result.se = se;
        }
        return result;
      }
    }

  }

  public static class defineStream_args implements org.apache.thrift.TBase<defineStream_args, defineStream_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("defineStream_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_DEFINITION_FIELD_DESC = new org.apache.thrift.protocol.TField("streamDefinition", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String sessionId; // required
    public String streamDefinition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      STREAM_DEFINITION((short)2, "streamDefinition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // STREAM_DEFINITION
            return STREAM_DEFINITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM_DEFINITION, new org.apache.thrift.meta_data.FieldMetaData("streamDefinition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(defineStream_args.class, metaDataMap);
    }

    public defineStream_args() {
    }

    public defineStream_args(
      String sessionId,
      String streamDefinition)
    {
      this();
      this.sessionId = sessionId;
      this.streamDefinition = streamDefinition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public defineStream_args(defineStream_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetStreamDefinition()) {
        this.streamDefinition = other.streamDefinition;
      }
    }

    public defineStream_args deepCopy() {
      return new defineStream_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.streamDefinition = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public defineStream_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getStreamDefinition() {
      return this.streamDefinition;
    }

    public defineStream_args setStreamDefinition(String streamDefinition) {
      this.streamDefinition = streamDefinition;
      return this;
    }

    public void unsetStreamDefinition() {
      this.streamDefinition = null;
    }

    /** Returns true if field streamDefinition is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamDefinition() {
      return this.streamDefinition != null;
    }

    public void setStreamDefinitionIsSet(boolean value) {
      if (!value) {
        this.streamDefinition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case STREAM_DEFINITION:
        if (value == null) {
          unsetStreamDefinition();
        } else {
          setStreamDefinition((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case STREAM_DEFINITION:
        return getStreamDefinition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case STREAM_DEFINITION:
        return isSetStreamDefinition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof defineStream_args)
        return this.equals((defineStream_args)that);
      return false;
    }

    public boolean equals(defineStream_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_streamDefinition = true && this.isSetStreamDefinition();
      boolean that_present_streamDefinition = true && that.isSetStreamDefinition();
      if (this_present_streamDefinition || that_present_streamDefinition) {
        if (!(this_present_streamDefinition && that_present_streamDefinition))
          return false;
        if (!this.streamDefinition.equals(that.streamDefinition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(defineStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      defineStream_args typedOther = (defineStream_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamDefinition()).compareTo(typedOther.isSetStreamDefinition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamDefinition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamDefinition, typedOther.streamDefinition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SESSION_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STREAM_DEFINITION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.streamDefinition = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.streamDefinition != null) {
        oprot.writeFieldBegin(STREAM_DEFINITION_FIELD_DESC);
        oprot.writeString(this.streamDefinition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("defineStream_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamDefinition:");
      if (this.streamDefinition == null) {
        sb.append("null");
      } else {
        sb.append(this.streamDefinition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class defineStream_result implements org.apache.thrift.TBase<defineStream_result, defineStream_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("defineStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ade", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MTD_FIELD_DESC = new org.apache.thrift.protocol.TField("mtd", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TDE_FIELD_DESC = new org.apache.thrift.protocol.TField("tde", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SE_FIELD_DESC = new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public String success; // required
    public ThriftDifferentStreamDefinitionAlreadyDefinedException ade; // required
    public ThriftMalformedStreamDefinitionException mtd; // required
    public ThriftStreamDefinitionException tde; // required
    public ThriftSessionExpiredException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ADE((short)1, "ade"),
      MTD((short)2, "mtd"),
      TDE((short)3, "tde"),
      SE((short)4, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ADE
            return ADE;
          case 2: // MTD
            return MTD;
          case 3: // TDE
            return TDE;
          case 4: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADE, new org.apache.thrift.meta_data.FieldMetaData("ade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MTD, new org.apache.thrift.meta_data.FieldMetaData("mtd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TDE, new org.apache.thrift.meta_data.FieldMetaData("tde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SE, new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(defineStream_result.class, metaDataMap);
    }

    public defineStream_result() {
    }

    public defineStream_result(
      String success,
      ThriftDifferentStreamDefinitionAlreadyDefinedException ade,
      ThriftMalformedStreamDefinitionException mtd,
      ThriftStreamDefinitionException tde,
      ThriftSessionExpiredException se)
    {
      this();
      this.success = success;
      this.ade = ade;
      this.mtd = mtd;
      this.tde = tde;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public defineStream_result(defineStream_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAde()) {
        this.ade = new ThriftDifferentStreamDefinitionAlreadyDefinedException(other.ade);
      }
      if (other.isSetMtd()) {
        this.mtd = new ThriftMalformedStreamDefinitionException(other.mtd);
      }
      if (other.isSetTde()) {
        this.tde = new ThriftStreamDefinitionException(other.tde);
      }
      if (other.isSetSe()) {
        this.se = new ThriftSessionExpiredException(other.se);
      }
    }

    public defineStream_result deepCopy() {
      return new defineStream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ade = null;
      this.mtd = null;
      this.tde = null;
      this.se = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public defineStream_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftDifferentStreamDefinitionAlreadyDefinedException getAde() {
      return this.ade;
    }

    public defineStream_result setAde(ThriftDifferentStreamDefinitionAlreadyDefinedException ade) {
      this.ade = ade;
      return this;
    }

    public void unsetAde() {
      this.ade = null;
    }

    /** Returns true if field ade is set (has been assigned a value) and false otherwise */
    public boolean isSetAde() {
      return this.ade != null;
    }

    public void setAdeIsSet(boolean value) {
      if (!value) {
        this.ade = null;
      }
    }

    public ThriftMalformedStreamDefinitionException getMtd() {
      return this.mtd;
    }

    public defineStream_result setMtd(ThriftMalformedStreamDefinitionException mtd) {
      this.mtd = mtd;
      return this;
    }

    public void unsetMtd() {
      this.mtd = null;
    }

    /** Returns true if field mtd is set (has been assigned a value) and false otherwise */
    public boolean isSetMtd() {
      return this.mtd != null;
    }

    public void setMtdIsSet(boolean value) {
      if (!value) {
        this.mtd = null;
      }
    }

    public ThriftStreamDefinitionException getTde() {
      return this.tde;
    }

    public defineStream_result setTde(ThriftStreamDefinitionException tde) {
      this.tde = tde;
      return this;
    }

    public void unsetTde() {
      this.tde = null;
    }

    /** Returns true if field tde is set (has been assigned a value) and false otherwise */
    public boolean isSetTde() {
      return this.tde != null;
    }

    public void setTdeIsSet(boolean value) {
      if (!value) {
        this.tde = null;
      }
    }

    public ThriftSessionExpiredException getSe() {
      return this.se;
    }

    public defineStream_result setSe(ThriftSessionExpiredException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ADE:
        if (value == null) {
          unsetAde();
        } else {
          setAde((ThriftDifferentStreamDefinitionAlreadyDefinedException)value);
        }
        break;

      case MTD:
        if (value == null) {
          unsetMtd();
        } else {
          setMtd((ThriftMalformedStreamDefinitionException)value);
        }
        break;

      case TDE:
        if (value == null) {
          unsetTde();
        } else {
          setTde((ThriftStreamDefinitionException)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((ThriftSessionExpiredException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ADE:
        return getAde();

      case MTD:
        return getMtd();

      case TDE:
        return getTde();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ADE:
        return isSetAde();
      case MTD:
        return isSetMtd();
      case TDE:
        return isSetTde();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof defineStream_result)
        return this.equals((defineStream_result)that);
      return false;
    }

    public boolean equals(defineStream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ade = true && this.isSetAde();
      boolean that_present_ade = true && that.isSetAde();
      if (this_present_ade || that_present_ade) {
        if (!(this_present_ade && that_present_ade))
          return false;
        if (!this.ade.equals(that.ade))
          return false;
      }

      boolean this_present_mtd = true && this.isSetMtd();
      boolean that_present_mtd = true && that.isSetMtd();
      if (this_present_mtd || that_present_mtd) {
        if (!(this_present_mtd && that_present_mtd))
          return false;
        if (!this.mtd.equals(that.mtd))
          return false;
      }

      boolean this_present_tde = true && this.isSetTde();
      boolean that_present_tde = true && that.isSetTde();
      if (this_present_tde || that_present_tde) {
        if (!(this_present_tde && that_present_tde))
          return false;
        if (!this.tde.equals(that.tde))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(defineStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      defineStream_result typedOther = (defineStream_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAde()).compareTo(typedOther.isSetAde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ade, typedOther.ade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMtd()).compareTo(typedOther.isSetMtd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMtd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtd, typedOther.mtd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTde()).compareTo(typedOther.isSetTde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tde, typedOther.tde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, typedOther.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ADE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ade = new ThriftDifferentStreamDefinitionAlreadyDefinedException();
              this.ade.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MTD
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mtd = new ThriftMalformedStreamDefinitionException();
              this.mtd.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.tde = new ThriftStreamDefinitionException();
              this.tde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.se = new ThriftSessionExpiredException();
              this.se.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetAde()) {
        oprot.writeFieldBegin(ADE_FIELD_DESC);
        this.ade.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetMtd()) {
        oprot.writeFieldBegin(MTD_FIELD_DESC);
        this.mtd.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTde()) {
        oprot.writeFieldBegin(TDE_FIELD_DESC);
        this.tde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSe()) {
        oprot.writeFieldBegin(SE_FIELD_DESC);
        this.se.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("defineStream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ade:");
      if (this.ade == null) {
        sb.append("null");
      } else {
        sb.append(this.ade);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mtd:");
      if (this.mtd == null) {
        sb.append("null");
      } else {
        sb.append(this.mtd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tde:");
      if (this.tde == null) {
        sb.append("null");
      } else {
        sb.append(this.tde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findStreamId_args implements org.apache.thrift.TBase<findStreamId_args, findStreamId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStreamId_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("streamName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STREAM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("streamVersion", org.apache.thrift.protocol.TType.STRING, (short)3);

    public String sessionId; // required
    public String streamName; // required
    public String streamVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      STREAM_NAME((short)2, "streamName"),
      STREAM_VERSION((short)3, "streamVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // STREAM_NAME
            return STREAM_NAME;
          case 3: // STREAM_VERSION
            return STREAM_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("streamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("streamVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStreamId_args.class, metaDataMap);
    }

    public findStreamId_args() {
    }

    public findStreamId_args(
      String sessionId,
      String streamName,
      String streamVersion)
    {
      this();
      this.sessionId = sessionId;
      this.streamName = streamName;
      this.streamVersion = streamVersion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStreamId_args(findStreamId_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetStreamName()) {
        this.streamName = other.streamName;
      }
      if (other.isSetStreamVersion()) {
        this.streamVersion = other.streamVersion;
      }
    }

    public findStreamId_args deepCopy() {
      return new findStreamId_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.streamName = null;
      this.streamVersion = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public findStreamId_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getStreamName() {
      return this.streamName;
    }

    public findStreamId_args setStreamName(String streamName) {
      this.streamName = streamName;
      return this;
    }

    public void unsetStreamName() {
      this.streamName = null;
    }

    /** Returns true if field streamName is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamName() {
      return this.streamName != null;
    }

    public void setStreamNameIsSet(boolean value) {
      if (!value) {
        this.streamName = null;
      }
    }

    public String getStreamVersion() {
      return this.streamVersion;
    }

    public findStreamId_args setStreamVersion(String streamVersion) {
      this.streamVersion = streamVersion;
      return this;
    }

    public void unsetStreamVersion() {
      this.streamVersion = null;
    }

    /** Returns true if field streamVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamVersion() {
      return this.streamVersion != null;
    }

    public void setStreamVersionIsSet(boolean value) {
      if (!value) {
        this.streamVersion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case STREAM_NAME:
        if (value == null) {
          unsetStreamName();
        } else {
          setStreamName((String)value);
        }
        break;

      case STREAM_VERSION:
        if (value == null) {
          unsetStreamVersion();
        } else {
          setStreamVersion((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case STREAM_NAME:
        return getStreamName();

      case STREAM_VERSION:
        return getStreamVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case STREAM_NAME:
        return isSetStreamName();
      case STREAM_VERSION:
        return isSetStreamVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStreamId_args)
        return this.equals((findStreamId_args)that);
      return false;
    }

    public boolean equals(findStreamId_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_streamName = true && this.isSetStreamName();
      boolean that_present_streamName = true && that.isSetStreamName();
      if (this_present_streamName || that_present_streamName) {
        if (!(this_present_streamName && that_present_streamName))
          return false;
        if (!this.streamName.equals(that.streamName))
          return false;
      }

      boolean this_present_streamVersion = true && this.isSetStreamVersion();
      boolean that_present_streamVersion = true && that.isSetStreamVersion();
      if (this_present_streamVersion || that_present_streamVersion) {
        if (!(this_present_streamVersion && that_present_streamVersion))
          return false;
        if (!this.streamVersion.equals(that.streamVersion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStreamId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStreamId_args typedOther = (findStreamId_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamName()).compareTo(typedOther.isSetStreamName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamName, typedOther.streamName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamVersion()).compareTo(typedOther.isSetStreamVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamVersion, typedOther.streamVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SESSION_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STREAM_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.streamName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // STREAM_VERSION
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.streamVersion = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.streamName != null) {
        oprot.writeFieldBegin(STREAM_NAME_FIELD_DESC);
        oprot.writeString(this.streamName);
        oprot.writeFieldEnd();
      }
      if (this.streamVersion != null) {
        oprot.writeFieldBegin(STREAM_VERSION_FIELD_DESC);
        oprot.writeString(this.streamVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStreamId_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamName:");
      if (this.streamName == null) {
        sb.append("null");
      } else {
        sb.append(this.streamName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamVersion:");
      if (this.streamVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.streamVersion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findStreamId_result implements org.apache.thrift.TBase<findStreamId_result, findStreamId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStreamId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField TNDE_FIELD_DESC = new org.apache.thrift.protocol.TField("tnde", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SE_FIELD_DESC = new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String success; // required
    public ThriftNoStreamDefinitionExistException tnde; // required
    public ThriftSessionExpiredException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TNDE((short)1, "tnde"),
      SE((short)2, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TNDE
            return TNDE;
          case 2: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TNDE, new org.apache.thrift.meta_data.FieldMetaData("tnde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SE, new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStreamId_result.class, metaDataMap);
    }

    public findStreamId_result() {
    }

    public findStreamId_result(
      String success,
      ThriftNoStreamDefinitionExistException tnde,
      ThriftSessionExpiredException se)
    {
      this();
      this.success = success;
      this.tnde = tnde;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStreamId_result(findStreamId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTnde()) {
        this.tnde = new ThriftNoStreamDefinitionExistException(other.tnde);
      }
      if (other.isSetSe()) {
        this.se = new ThriftSessionExpiredException(other.se);
      }
    }

    public findStreamId_result deepCopy() {
      return new findStreamId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tnde = null;
      this.se = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findStreamId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftNoStreamDefinitionExistException getTnde() {
      return this.tnde;
    }

    public findStreamId_result setTnde(ThriftNoStreamDefinitionExistException tnde) {
      this.tnde = tnde;
      return this;
    }

    public void unsetTnde() {
      this.tnde = null;
    }

    /** Returns true if field tnde is set (has been assigned a value) and false otherwise */
    public boolean isSetTnde() {
      return this.tnde != null;
    }

    public void setTndeIsSet(boolean value) {
      if (!value) {
        this.tnde = null;
      }
    }

    public ThriftSessionExpiredException getSe() {
      return this.se;
    }

    public findStreamId_result setSe(ThriftSessionExpiredException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case TNDE:
        if (value == null) {
          unsetTnde();
        } else {
          setTnde((ThriftNoStreamDefinitionExistException)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((ThriftSessionExpiredException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case TNDE:
        return getTnde();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TNDE:
        return isSetTnde();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStreamId_result)
        return this.equals((findStreamId_result)that);
      return false;
    }

    public boolean equals(findStreamId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tnde = true && this.isSetTnde();
      boolean that_present_tnde = true && that.isSetTnde();
      if (this_present_tnde || that_present_tnde) {
        if (!(this_present_tnde && that_present_tnde))
          return false;
        if (!this.tnde.equals(that.tnde))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStreamId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStreamId_result typedOther = (findStreamId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTnde()).compareTo(typedOther.isSetTnde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTnde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tnde, typedOther.tnde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, typedOther.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // TNDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.tnde = new ThriftNoStreamDefinitionExistException();
              this.tnde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.se = new ThriftSessionExpiredException();
              this.se.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetTnde()) {
        oprot.writeFieldBegin(TNDE_FIELD_DESC);
        this.tnde.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSe()) {
        oprot.writeFieldBegin(SE_FIELD_DESC);
        this.se.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStreamId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tnde:");
      if (this.tnde == null) {
        sb.append("null");
      } else {
        sb.append(this.tnde);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class publish_args implements org.apache.thrift.TBase<publish_args, publish_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_args");

    private static final org.apache.thrift.protocol.TField EVENT_BUNDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventBundle", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ThriftEventBundle eventBundle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_BUNDLE((short)1, "eventBundle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_BUNDLE
            return EVENT_BUNDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_BUNDLE, new org.apache.thrift.meta_data.FieldMetaData("eventBundle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEventBundle.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_args.class, metaDataMap);
    }

    public publish_args() {
    }

    public publish_args(
      ThriftEventBundle eventBundle)
    {
      this();
      this.eventBundle = eventBundle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_args(publish_args other) {
      if (other.isSetEventBundle()) {
        this.eventBundle = new ThriftEventBundle(other.eventBundle);
      }
    }

    public publish_args deepCopy() {
      return new publish_args(this);
    }

    @Override
    public void clear() {
      this.eventBundle = null;
    }

    public ThriftEventBundle getEventBundle() {
      return this.eventBundle;
    }

    public publish_args setEventBundle(ThriftEventBundle eventBundle) {
      this.eventBundle = eventBundle;
      return this;
    }

    public void unsetEventBundle() {
      this.eventBundle = null;
    }

    /** Returns true if field eventBundle is set (has been assigned a value) and false otherwise */
    public boolean isSetEventBundle() {
      return this.eventBundle != null;
    }

    public void setEventBundleIsSet(boolean value) {
      if (!value) {
        this.eventBundle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_BUNDLE:
        if (value == null) {
          unsetEventBundle();
        } else {
          setEventBundle((ThriftEventBundle)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_BUNDLE:
        return getEventBundle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_BUNDLE:
        return isSetEventBundle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_args)
        return this.equals((publish_args)that);
      return false;
    }

    public boolean equals(publish_args that) {
      if (that == null)
        return false;

      boolean this_present_eventBundle = true && this.isSetEventBundle();
      boolean that_present_eventBundle = true && that.isSetEventBundle();
      if (this_present_eventBundle || that_present_eventBundle) {
        if (!(this_present_eventBundle && that_present_eventBundle))
          return false;
        if (!this.eventBundle.equals(that.eventBundle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(publish_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      publish_args typedOther = (publish_args)other;

      lastComparison = Boolean.valueOf(isSetEventBundle()).compareTo(typedOther.isSetEventBundle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventBundle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventBundle, typedOther.eventBundle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EVENT_BUNDLE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.eventBundle = new ThriftEventBundle();
              this.eventBundle.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.eventBundle != null) {
        oprot.writeFieldBegin(EVENT_BUNDLE_FIELD_DESC);
        this.eventBundle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_args(");
      boolean first = true;

      sb.append("eventBundle:");
      if (this.eventBundle == null) {
        sb.append("null");
      } else {
        sb.append(this.eventBundle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class publish_result implements org.apache.thrift.TBase<publish_result, publish_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publish_result");

    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SE_FIELD_DESC = new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public ThriftUndefinedEventTypeException ue; // required
    public ThriftSessionExpiredException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UE((short)1, "ue"),
      SE((short)2, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UE
            return UE;
          case 2: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SE, new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publish_result.class, metaDataMap);
    }

    public publish_result() {
    }

    public publish_result(
      ThriftUndefinedEventTypeException ue,
      ThriftSessionExpiredException se)
    {
      this();
      this.ue = ue;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publish_result(publish_result other) {
      if (other.isSetUe()) {
        this.ue = new ThriftUndefinedEventTypeException(other.ue);
      }
      if (other.isSetSe()) {
        this.se = new ThriftSessionExpiredException(other.se);
      }
    }

    public publish_result deepCopy() {
      return new publish_result(this);
    }

    @Override
    public void clear() {
      this.ue = null;
      this.se = null;
    }

    public ThriftUndefinedEventTypeException getUe() {
      return this.ue;
    }

    public publish_result setUe(ThriftUndefinedEventTypeException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public ThriftSessionExpiredException getSe() {
      return this.se;
    }

    public publish_result setSe(ThriftSessionExpiredException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((ThriftUndefinedEventTypeException)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((ThriftSessionExpiredException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UE:
        return getUe();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UE:
        return isSetUe();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publish_result)
        return this.equals((publish_result)that);
      return false;
    }

    public boolean equals(publish_result that) {
      if (that == null)
        return false;

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(publish_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      publish_result typedOther = (publish_result)other;

      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, typedOther.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new ThriftUndefinedEventTypeException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.se = new ThriftSessionExpiredException();
              this.se.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSe()) {
        oprot.writeFieldBegin(SE_FIELD_DESC);
        this.se.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publish_result(");
      boolean first = true;

      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
